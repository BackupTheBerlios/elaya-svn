PRODUCTIONS
(* Basic defs *)

RCharConst:"char constant"<var ParValue : TValue>
(.
	var
			vlNumber : TNumber;
.)
=
ICharType "(" RDirectNumber<vlNumber> ")"
(.
	if not(LargeInIntRange(vlNumber,0,255)) then SemError(Err_Num_Out_Of_range);
	ParValue := TString.Create(chr(vlNumber.vrNumber));
.)
.

RStringConstant:"string constant"<var ParValue : TValue>
(.
	var
		vlStr : string;
.)
=
RCharConst<ParValue>
|(RText<vlStr> (.ParValue := TString.Create(vlStr);.))
.


RNumberConstant:"Constant Number"<var ParValue : TValue;var ParValid : boolean>
(.
	var
		vlNumber : TNumber;
		vlValid  : boolean;
.)
=

RNumber<vlNumber,ParValid>
(.
	if not(LargeInRange(vlNumber, Min_Longint,Max_Cardinal)) then begin
		ErrorText(Err_Num_Out_Of_Range,'');
		ParValid := false;
	end;
	ParValue := TLongint.Create(vlNumber);
.)
.


(* End basic *)
(*

RStructDirectExpr<ParValue : TStructValue;ParType : TType>
(.
	var
		vlValue : TValue;
		vlName  : string;
.)
=
"{" (("." RIdent<vlName> '=')|( (. EmptyString(vlName);.)))
(( RStructDirectExpr {"," ["." RIdent<xx> '='] RStructDirectExpr} "}")
|( RDirectExpr<vlValue> {"," ["." RIdent<xx> '='] RDirectExpr<vlValue>} "}"))
.
*)

RDirectTString<var ParStr : TString>
=
	RDirectExpr<ParStr>
	(.
		if ParStr <> nil then begin
			if not(ParStr is TString) then SemError(Err_Not_A_String_Constant);
		end;
	.)
.


RDirectNumber<var ParNum:TNumber>
(.
	var
		vlValue : TValue;
.)
=
RDirectExpr<vlValue>
(.
  	if (vlValue<> nil) then begin
		if vlValue.GetNumber(ParNum) then SemError(Err_Not_An_Integer_const);
		vlValue.destroy;
	end else begin
		LoadLong(ParNum , 0);
	end;
.)
.



RDirectCardinal<var ParNum : cardinal>
(.
var
      vlNum : TNumber;
.)
=
RDirectNumber<vlNum>
(.
	if not(LargeInRange(vlNum ,Min_Cardinal, Max_Cardinal)) then SemError(Err_Num_Out_Of_Range);
	ParNum := LargeToCardinal(vlNum);
.)
.



RDirectExpr<var ParVal:TValue>
(.
	var
		vlValid:boolean;
.)
=
	RDirectLogic<ParVal,vlValid>
. 


RDirectLogic<var ParVal : TValue;var ParValid:boolean>
(.
	var
		vlVal : TValue;
		vlValid: boolean;
.)
=
(.
	vlVal := nil;
.)
RDirectAdd<ParVal,ParValid>
{((IAnd RDirectAdd<vlVal,vlValid>
(.
  if ParValid and vlValid then begin
    if CalculationStatusToError(ParVal.AndVal(vlVal)) then ParValid := false;
  end else begin
    ParValid := false;
  end;;
.)
)
 |(IOr  RDirectAdd<vlVal,vlValid>
(.
  if ParValid and vlValid then begin
    if CalculationStatusToError(ParVal.OrVal(vlVal)) then ParValid := false;
  end else begin
    ParValid := false;
  end;;
.)
)
 |(IXor RDirectAdd<vlVal,vlValid>

(.
  if ParValid and vlValid then begin
    if CalculationStatusToError(ParVal.XorVal(vlVal)) then ParValid := false;
  end else begin
    ParValid := false;
  end;;
.)
)
 )
(. if vlVal <> nil then vlVal.Destroy; .)
}
.

RDirectAdd<var ParVal:TValue;var ParValid:boolean>
(.
	var
		vlVal:TValue;
		vlValid : boolean;
.)

=

RDirectMul<ParVal,ParValid>
{(('+' RDirectMul<vlVal,vlValid>
(.
  if ParValid and vlValid then begin
    if CalculationStatusToError(ParVal.Add(vlVal)) then ParValid := false;
  end else begin
    ParValid := false;
  end;;
.)
)
|('-' RDirectMul<vlval,vlValid>

(.
  if ParValid and vlValid then begin
    if CalculationStatusToError(ParVal.Sub(vlVal)) then ParValid := false;
  end else begin
    ParValid := false;
  end;;
.)
)
|(IShl RDirectMul<vlVal,vlValid>
(.
  if ParValid and  vlValid then begin
    if CalculationStatusToError(ParVal.ShiftLeft(vlVal)) then ParValid := false;
  end else begin
    ParValid := false;
  end;;
.)
)
|(IShr RDirectMul<vlVal,vlValid>
(.
  if ParValid and vlValid then begin
    if CalculationStatusToError(ParVal.ShiftRight(vlVal)) then ParValid := false;
  end else begin
    ParValid := false;
  end;;
.)
)
)
 (.  if vlVal <> nil then vlVal.destroy;.)
}
.


RDirectMul<var ParVal:TValue;var ParValid:boolean>
(.
	var
		vlVal   : TValue;
		vlValid : boolean;
  .)
=
RDirectNeg<ParVal,ParValid>
{(('*' RDirectNeg<vlval,vlValid>
(.
  if ParValid and vlValid then begin
    if CalculationStatusToError(ParVal.Mul(vlVal)) then ParValid := false;
  end else begin
    ParValid := false;
  end;;
.)
)
|(IDiv RDirectNeg<vlVal,vlValid>
(.
  if ParValid and vlValid then begin
    if CalculationStatusToError(ParVal.DivVal(vlVal)) then ParValid := false;
  end else begin
    ParValid := false;
  end;;
.)
)
|(IMod RDirectNeg<vlVal,vlValid>

(.
  if ParValid and vlValid then begin
    if CalculationStatusToError(ParVal.ModVal(vlVal)) then ParValid := false;
  end else begin
    ParValid := false;
  end;;
.)
)

	)			 		(. if vlVal <> nil then vlVal.destroy; .)
}
.


RDirectNeg<var ParVal : TValue;var ParValid : boolean>
(.
	Var
		vlNeg : boolean;
		vlValid :boolean;
.)
=
(. vlNeg := false; .)

{('-'				 (. vlNeg := true; .))
|('+')
}

RDirectFact<ParVal,vlValid>
(.
	if(vlValid) then begin
		if vlNeg then  begin
			if CalculationStatusToError(ParVal.Neg) then ParValid := false;
		end;
	end else begin
		ParValid := false;
	end;
.)
.




RDirectFact:"formula"<var ParVal:TValue;var ParValid:boolean>
(.
	var
		vlNum :TSize;
		vlType:TType;
.)
=
(.
	ParVal  := nil;
	ParValid := false;
 .)

(
 (  RNum_Or_Const<ParVal,ParValid>  )
|('(' RDirectLogic<ParVal,ParValid> ')')
|(INil
	(.
		ParVal := TPointer.Create;
      TPointer(ParVal).SetPointer(0);
		ParValid := true;
	.)
)
|(INot "(" RDirectLogic<ParVal,ParValid> ")"
	(.
 		if(ParValid) then begin
			if CalculationStatusToError(ParVal.NotVal) then ParValid := false;
		end;
 .))

|(ISizeOf "(" RH_Type<vlType> ")"
	(.
		if vlType <> nil then begin
			vlNum := vlType.fSize;
			ParValid := true;
		end  else begin
			vlNum := 0;
			ParValid := false;
		end;
		ParVal := TLongint.Create(vlNum);
	.)
))
		(. if ParVal = nil then ParVal := (TLongint.Create(1));.)
.


(*===( Constant String Expr )==================================================*)



(*		      Constant Declaration			   *)

RConstantDecl
(.
 var
   vlNameList : TNameList;
   vlStr      : String;
   vlIdent    : string;
   vlVal      : TValue;
.)
=				(. vlNameList := TNameList.Create;.)

 RIdent<vlIdent>		(. vlNameList.AddName(vlIdent);.)
 {"," RIdent<vlIdent>		(. vlNameList.AddName(vlIdent);.)
 }
 "="
  RDirectExpr<vlVal>(* |RStructDirectExpr *)

(.
	if vlVal.fType = VT_String then begin
		vlVal.GetString(vlStr);
		fNDCreator.AddStringConst(vlNameList,vlStr);
	end else begin
		fNDCreator.AddConstant(vlNameList,vlVal);
	end;
	vlVal.destroy;
	vlNameList.destroy;
.)
.

RConstant
=IConst
 {RConstantDecl ";"}
.



RNum_Or_Const:"identifier"<var ParVal:TValue;var ParValid : boolean>
				(. var vlConst : TConstant;
				.)
=
				(.   ParVal := nil;.)
(
RNumberConstant<ParVal,ParValid>
|(RDefIdentObj<TDefinition(vlConst),false>
	(.
		ParVal := nil;
		if (vlConst <> nil) then begin
			if not(vlConst is TConstant) then begin
				SemError(Err_Not_An_Integer_Const)
			end else begin
				ParVal := vlConst.fVal.Clone;
			end;
		end;
		if ParVal = nil then ParVal := TLongint.Create(1);
	.)
)|RStringConstant<ParVal>
)
(.
 if ParVal = nil then begin
 	ParVal := TLongint.Create(1);
 	ParValid := false;
 end;
.)

.


RNum_Or_Const_2:"identifier"<var ParVal:TValue>
(. var
       vlValid   : boolean;
       vlNum     : TNumber;
       vlStr     : String;
       vlNeg     : boolean;
.)
=
(.
	ParVal  := nil;
	vlNeg   := false;
.)
(

  (
	[('-'  (. vlNeg := true; .)) |'+']
	RNumberConstant<ParVal,vlValid> (.if vlNeg then CalculationStatusToError(ParVal.neg);.)
  )
|RStringConstant<ParVal>
)
(.if ParVal = nil then ParVal := TLongint.Create(1); .)

.


END.
