PRODUCTIONS

RBreak<var ParNode : TSubListStatementNode>=
IBreak				(. AddBreakNode(ParNode);.)
.

RContinue<var ParNode : TSubListStatementNode>=
IContinue			(. AddContinueNode(ParNode);.)
.

RWrite:"write statement"<ParNode:TSubListStatementNode>
(.
var
	vlWritelnFlag:boolean;
	vlNl      : TDefinition;
	vlRoutine : TDefinition;
	vlOwner   : TDefinition;
	vlExpr    : TFormulaNode;
	vlName    : string;
	vlNode    : TCallNode;
.)
=
(.
	vlWritelnFlag := false;
	vlNl          := nil;
.)

((
  IWrite
|(IWriteln (. vlWritelnFlag := true; .)
)
)
[
(.
	fNDCreator.GetWriteProc(false,vlRoutine,vlOwner);
.)
"(" RParam<vlExpr,vlName>   (. HandleWriteStatement(vlExpr,vlName,vlRoutine,vlOwner,ParNode); .)
{ "," RParam<vlExpr,vlName> (. HandleWriteStatement(vlExpr,vlName,vlRoutine,vlOwner,ParNode); .)
}
")"
]


)
(.
  if vlWritelnFlag then begin
	if fNDCreator.GetWriteProc(true,vlNl,vlOwner) then begin
		vlNode := TCallNode(vlNl.createExecuteNode(fNDCreator,vlOwner));
		ParNode.AddNode(vlNode);
	end;
  end;
.)

.



RIncDec:"increment/decrement statement"<var ParNode : TSubListStatementNode>
(.
var
	vlNode 		: TIncDecNode;
	vlIncrNode  : TFormulaNode;
	vlValueNode : TFormulaNode;
	vlIncFlag   : boolean;
.)

=
(.
	vlValueNode := nil;
.)
( ((IInc		(. vlIncFlag := true; .))
 |(IDec     (. vlIncFlag := false;.))
 )  RFormula<vlIncrNode>
 (
  ( (IWith  RFormula<vlValueNode>)
  | (. vlValueNode := TFormulaNode(fNDCreator.CreateIntNodeLong(1)); .))
 ))
  (.ParNode.AddNode( TIncDecNode.Create(vlIncFlag,vlIncrNode,vlValueNode));.)
.

(*			Program Flow					*)


RExit<var ParNode:TSubListStatementNode>
(.
   var
		vlExp : TFormulaNode;
.)
=
(.	vlExp := nil;.)

IExit ["(" RFormula<vlExp> ")"]
(.
	ParNode :=TSubListStatementnode( CreateExitNode(vlExp));(* TODO Change exit type? *)
.)
.


RWhile<var ParNode:TSubListStatementNode>
(.
 var
    vlCond : TFormulaNode;
 .)
=
IWhile RFormula<vlCond>
(.
	ParNode := TWhileNode.Create;
	TWhileNode(ParNode).SetCond(vlCond);
	fNDCreator.AddCurrentNode(ParNode);
.)
IDo RCode<ParNode>
(. fNDCreator.EndNode; .)
.


RCount:"count statement"<var ParNode:TSubListStatementNode>

(.
 var
	vlN1,vln2,vlN3,vlN4:TFormulaNode;
	vlNode : TCountNode;
	vlUp   : boolean;
	vlEndCondition : TFormulaNode;
.)
=
(.
	vlN4   := nil;
	vlNode := TCountNode.Create;
	vlUp   := false;
 .)
ICount RFormula<vlN1>			(.  vlNode.SetCount(vlN1); .)
((IAll IOf RFormula<vlN3> (. vlNode.SetAllOf(vlN3); .))|(

IFrom  RFormula<vlN2>			(.  vlNode.SetBegin(vlN2); .)
[((ITo					(.  vlUp := true; .))
|(IDownTo				(.  vlUp := false; .)))
							(.  vlNode.Setup(vlUp); .)
RFormula<vlN3>				(.  vlNode.SetEnd(vlN3); .)]
[IStep RFormula<vlN4>]
(.
	if vlN4 = nil then vlN4 := TFormulaNode(fNDCreator.CreateIntNodeLOng(1));
	vlNode.SetStep(vlN4);
.)
))
[IUntil RExpr<vlEndCondition> (.	vlNode.SetEndCondition(vlEndCondition);.)]
((.
	fNDCreator.AddCurrentNode(vlNode);
.)
[IDo RCode<vlNode>]
(.
	ParNode := vlNode;
	fNDCreator.EndNode;
 .)
)
.



RFor<var ParNode :TSubListStatementnode>
(.
	var
		vlExpr : TFormulaNode;
      vlNode : TForNode;
.)
=
					(. vlNode := (TForNode.Create); .)
IFor RFormula<vlExpr>                      (. vlNode.SetBegin(vlExpr); .)
IUntil RFormula<vlExpr>
(.
	vlNode.SetEnd(vlExpr);
	fNDCreator.AddCurrentNode(vlNode);
.)
[IDo    RCode<vlNode>]
(.
	ParNode := vlNode;
	fNDCreator.EndNode;
 .)
.



RIf<var ParNode:TSubListStatementNode>
(.
	var
		vlCond : TFormulaNode;
		vlThen : TThenElseNode;
.)
=
IIf RFormula<vlCond>
(.
	ParNode := TIfNode.Create;
	TIfNode(ParNode).SetCond(vlCond);
	vlThen := TThenElseNode.Create(True);
	ParNode.AddNode(vlThen);
.)
IThen	RCode<vlThen>
[IElse
(.
	vlThen := TThenElseNode.Create(False);
	ParNode.AddNode(vlThen);
.)
RCode<vlThen>
]
.


RRepeat<var ParNode:TSubListStatementNode>
				(. var vlCond:TFormulaNode; .)
=
IRepeat        			(. ParNode := TRepeatNode.Create;
				   fNDCreator.AddCurrentNode(ParNode); .)
{RCode<ParNode> ";"}
IUntil RFormula<vlCond>
(.
	TRepeatNode(ParNode).SetCond(vlCond);
	fNDCreator.EndNode;
.)
.

RLoad:"syntax"<var Parexp:TFormulaNode>
(. var
	vlName   : string;
	vlDigiL  : TDigiItem;
	vlDigiR  : TDigiItem;
.)
=
(.
	ParExp := nil;
.)
RExprDigi<vlDigiL>
((
":="  (. LexName(vlName); .)
 RExprDigi <vlDigiR>
	(.
		if vlDigiL <> nil then ParExp := vlDigiL.CreateWriteNode(fNDCreator,vlDigiR);
		if vlDigiR <> nil then vlDigiR.Destroy;
	.))

|( (.
    if vlDigiL <> nil then ParExp :=TFormulaNode(vlDigiL.CreateExecuteNode(fNDCreator));
    if (ParExp = nil) then ErrorText(Err_Cant_Execute,'');
	.)
))
(.
	if vlDigiL <> nil then vlDigiL.Destroy;
.)
.



RLeave<var ParNode : TNodeIdent>
=
ILeave  (. if ParNode <> nil then ParNode :=TLeaveNode.Create; .)
.


RCode:"code item"<ParNode:TSubListStatementNode>
(.
 var
	vlNode     : TSubListStatementNode;(* TODO Solve this*)
	vlForm     : TFormulanode;
	vlLineInfo : TNodeident;
.)
=
(.
    vlNode := nil;
	 vlForm := nil;
    if (GetConfigValues.fGenerateDebug) and (ParNode <> nil)  then begin
    	vlLineInfo := TLineNumberNode.create;
    	vlLineInfo.fLine := nextLine;
		ParNode.AddNode(vlLineInfo);
    end;
.)

(RLoad<TFormulaNode(vlForm)>
|RAsmBlock<vlNode>
|RBreak<vlNode>
|RContinue<vlNode>
|RFor<vlNode>
|RCount<vlNode>
|RWhile<vlNode>
|RIf<vlNode>
|RRepeat<vlNode>
|RExit<vlNode>
|RIncDec<ParNode>
|RLeave<vlNode>
|RCodes<vlNode>
|RWrite<ParNode>)

(.
	if vlNode <> nil then ParNode.AddNode(vlNode);
   if vlForm <> nil then ParNode.AddNode(vlForm);
.)
.




RCodes<var ParNode:TSubListStatementNode>
=
	(. ParNode := TBlockNode.Create;.)
IBegin
	  { RCode<ParNode>";"}
IEnd
.

RBlockOfCode<ParNode : TSubListStatementNode>
(.
	var
		vlNode : TSubListStatementNode;
.)
=
RCodes<vlNode>
(.
	ParNode.AddNode(vlNode);
.)
.



END.
