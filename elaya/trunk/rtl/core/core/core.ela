{    Elaya Rtl  for the elaya compiler
    Copyright (C) 1999,2000  J.v.Iddekinge.


    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
}

unit;


public




 type
	align 1;
	byte   =  default number size=1;
	short  =  default number signed size=1;
	word   =  default number size=2;
	integer=  default number signed size=2;
	long   =  default number size=4;
	longint=  default number signed size=4;
	char   =  default chartype size = 1;
	boolean=default booleantype size=4 (true,false);
	shortboolean=booleantype size=1 (shorttrue,shortfalse);
	Asc255   	=  default asciiz size=255;
	Str255   	=  default string size=255;
	
	cint             = longint;
	clong            = long;
	Asc              =  Asc255;
	Asc0             = Asciiz size=0;
	PAsc             = Ptr Asc0;
	PPAsc            = Ptr PAsc;
	PChar            = ptr char;
	PByte            = Ptr Byte;
	PWord            = Ptr Word;
	PLong            = ptr Long;
	PInteger         = Ptr Integer;
	PLongint         = Ptr Longint;
	PSHort           = Ptr Short;
	PStr255          = Ptr Str255;
	PString	        = Ptr Str255;
	TOfs_PathName  = ASCIIZ size=128;
	Handle	        = long;
	HFile	        = long;
	Uint	        = long;
	VOID            = default VoidType;
	PVoid 	        = default Ptr Void;
	Pointer         = PVoid;
	PPointer         = ptr Pointer;
	Const_Pointer   = ptr const void;
	DWord	        = long;
	TSplit	        = record
		b1,b2,b3,b4:byte;
	end;
   
	TSegfaultHandler=procedure(ParAddres:long);



const
	CS_Lower	= -1;
	CS_Equal	= 0;
	CS_Bigger	= 1;

type

TOpenMode=enum
	OM_Close      := 0;
	OM_Read	      := 1;
	OM_Write      := 2;
	OM_Read_Write := 3;
	OM_Create     := 4;
end;

type

TSeekMode=enum
	SM_Begin      := 0;
	SM_Current    := 1;
	SM_End        := 2;
end;

   TDate=record
     Year : long;
     Month: long;
     Day  : long;
     Hour : long;
     Min  : long;
     Sec  : long;
   end;

   TDir=record
       pathName : string;
       SPV : PVoid ;
   end;

   PDir=ptr TDir;
   TFileType=enum
        ft_unkown;
        ft_CharDevice;
        ft_Directory;
        ft_BlockDevice;
        ft_Regular;
        ft_Fifo;
   end;

   TFileInfo=record
       Filename : string;
       FileType : TFileType;
       FileSize : long;
       CreTIme  : long;
       vrFailed : boolean;
   end;

   TReadStatus=enum
       rs_ok    := 0;
       rs_end   := 1;
       rs_error := 2;
   end;

   PMetaData= default metatype ptr const TMetaData;
   TMetaData= default metatype record
		vrParent : PMetaData;
		vrName   : PStr255;
   end;

   const

   { errors}
   Err_No_Error              = 0;
   Err_Native_Error          = 1;
   Err_File_Not_Found        = 3;
   Err_File_Allready_Exists  = 4;
   Err_Not_Open              = 5;
   Err_Allready_Open         = 6;
   Err_Cant_Use_Item         = 7;
   Err_No_Access             = 8;
   Err_Not_Implemented       = 9;
   Err_Wrong_Type_Of_File    = 10;
   Err_Out_Of_Memory	     = 11;
   Err_Int_Error             = 1000;
   Err_Int_File_Not_Open     = 1001;

   linked = 'linked';
   dll    = 'dll';




{--( Error Handling )------------------------------------------------}




const
	Maximum_Byte    = 255;
	Minimum_Byte    = 0;
    Maximum_Short   = 127;
	Minimum_Short   = -128;
	Maximim_Word    = 65535;
	Minimum_Word    = 0;
	Maximum_Integer = 32767;
	Minimum_Integer = -32768;
	Maximum_Longint = 2147483647;
	Minimum_longint = -(Maximum_longint+1);
	Maximum_Long    = 2*Maximum_Longint+1;
	Minimum_long    = 0;


	procedure SetError(ParError:long);
	procedure ResetErrors;
	function  PushError:long;
	function  GetLastError:long;
	function  GetNativeError : long;
	procedure SetNativeError(ParNative,ParError : long);
	function GetSegFaultHandler : TSegFaultHandler;
	procedure SetSegFaultHandler(ParHandler : TSegFaultHandler);
	procedure CallSegFaultHandler(ParAddr : long);

end public


var
	vgErrorCode       : long;
	vgNativeError     : long;
	vgSegfaultHandler : TSegfaultHandler;

{----( Fout afhandeling )------------------------------------------}

procedure ResetErrors;
begin
	vgErrorCode   := 0;
	vgNativeError := 0;
end;

procedure SetNativeError(ParNative,ParError : long);
begin
	vgNativeError := ParNative;
	vgErrorCode   := ParError;
end;


procedure SetError(ParError:long);
begin
     vgNativeError := 0;
     vgErrorCode   := ParError;
end;

function PushError:long;
var vlErr:long;
begin
     vlErr := vgErrorCode;
     vgErrorCode := Err_No_Error;
     exit(vlErr);
end;

function GetLastError:long;
begin
     exit(vgErrorCode);
end;

function  GetNativeError : long;
begin
     exit(vgNativeError);
end;

function GetSegFaultHandler : TSegFaultHandler;
begin
	exit(vgSegFaultHandler);
end;

procedure  SetSegFaultHandler(ParHandler : TSegFaultHandler);
begin
	vgSegFaultHandler := ParHandler;
end;

procedure CallSegFaultHandler(ParAddr : long);
begin
	if vgSegFaultHandler <> nil then vgSegFaultHandler^(ParAddr);
end;




begin
	SetSegFaultHandler(nil);
end.
