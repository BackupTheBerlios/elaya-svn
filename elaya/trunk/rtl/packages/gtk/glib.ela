{
   $Id: glib.pp,v 1.1.2.3 2000/09/09 18:42:52 peter Exp $

   GLIB - Library of useful routines for C programming
   Copyright (C) 1995-1997  Peter Mattis, Spencer Kimball and Josh MacDonald

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public
   License as published by the Free Software Foundation; either
   version 2 of the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this library; if not, write to the
   Free Software Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.
}

unit;
public
const

     G_DIR_SEPARATOR = '/';
     G_DIR_SEPARATOR_S = '/';
     G_SEARCHPATH_SEPARATOR = ':';
     G_SEARCHPATH_SEPARATOR_S = ':';

type
	gboolean=long;
   PPgchar = ptr Pgchar;
   Pgchar = ptr gchar;
   gchar = char;
   Pgshort = ptr gshort;
   gshort = integer;
   Pglong = ptr glong;
   glong = longint;
   Pgint = ptr gint;
   gint = longint;
   Pgboolean = ptr gboolean;
   Pguchar = ptr guchar;
   guchar = char;
   Pgushort = ptr gushort;
   gushort = word;
   Pgulong = ptr gulong;
   gulong = long;
   Pguint = ptr guint;
   guint = long;
	float = long;{should be?}
   Pgfloat = ptr gfloat;
   gfloat = float;
	double=array[0 to 7] of byte;
   Pgdouble = ptr gdouble;
   gdouble = double;
   Pgpointer = ptr gpointer;
   gpointer = pointer;

   gint8 = short;
   guint8 = byte;
   gint16 = integer;
   guint16 = word;
   gint32 = longint;
   guint32 = long;

   Pgint8 = ptr short;
   Pguint8 = ptr byte;
   Pgint16 = ptr integer;
   Pguint16 = ptr word;
   Pgint32 = ptr longint;
   Pguint32 = ptr long;

   PPgint8 = ptr Pgint8;
   PPguint8 = ptr Pguint8;
   PPgint16 = ptr Pgint16;
   PPguint16 = ptr Pguint16;
   PPgint32 = ptr Pgint32;
   PPguint32 = ptr Pguint32;

   gconstpointer = pointer;
   gssize = gint32;
   gsize = guint32;
   TGQuark = guint32;
   TGTime = gint32;

{var
   glib_major_version : guint;external glibdll name 'glib_major_version';
   glib_minor_version : guint;external glibdll name 'glib_minor_version';
   glib_micro_version : guint;external glibdll name 'glib_micro_version';
   glib_interface_age : guint;external glibdll name 'glib_interface_age';
   glib_binary_age : guint;external glibdll name 'glib_binary_age';
}
type
   PGList = ptr TGList;
   TGList = record
        data : gpointer;
        next : PGList;
        prev : PGList;
     end;
   PGSList = ptr TGSList;
   PPGSList = ptr PGSList;
   TGSList = record
        data : gpointer;
        next : PGSList;
     end;
   PGString = ptr TGString;
   TGString = record
        str : Pgchar;
        len : gint;
     end;
   PGArray = ptr TGArray;
   TGArray = record
        data : Pgchar;
        len : guint;
     end;
   PGDebugKey = ptr TGDebugKey;
   TGDebugKey = record
        key : Pgchar;
        _value : guint;
     end;
   PGHashTable = ptr TGHashTable;
   TGHashTable = record
        dummy : gint;
     end;
   PGCache = ptr TGCache;
   TGCache = record
        dummy : gint;
     end;
   PGTree = ptr TGTree;
   TGTree = record
        dummy : gint;
     end;
   PGTimer = ptr TGTimer;
   TGTimer = record
        dummy : gint;
     end;
   PGMemChunk = ptr TGMemChunk;
   TGMemChunk = record
        dummy : gint;
     end;
   PGStringChunk = ptr TGStringChunk;
   TGStringChunk = record
        dummy : gint;
     end;

     PGByteArray = ptr TGByteArray;
     TGByteArray = record
          data : Pguint8;
          len : guint;
       end;

     PGPtrArray = ptr TGPtrArray;
     TGPtrArray = record
          pdata : Pgpointer;
          len : guint;
       end;

     PGTuples = ptr TGTuples;
     TGTuples = record
          len : guint;
       end;

type
   PGTraverseType = ptr TGTraverseType;
   TGTraverseType = longint;
const
   G_IN_ORDER = 0;
   G_PRE_ORDER = 1;
   G_POST_ORDER = 2;

type
    TGTraverseFlags = longint;
const
    G_TRAVERSE_LEAFS = 1 shl 0;
    G_TRAVERSE_NON_LEAFS = 1 shl 1;
    G_TRAVERSE_ALL = 1 shl 0 + 1 shl 1;
    G_TRAVERSE_MASK = 3;

type
    TGLogLevelFlags = longint;
const
    G_LOG_FLAG_RECURSION = 1 shl 0;
    G_LOG_FLAG_FATAL = 1 shl 1;
    G_LOG_LEVEL_ERROR = 1 shl 2;
    G_LOG_LEVEL_CRITICAL = 1 shl 3;
    G_LOG_LEVEL_WARNING = 1 shl 4;
    G_LOG_LEVEL_MESSAGE = 1 shl 5;
    G_LOG_LEVEL_INFO = 1 shl 6;
    G_LOG_LEVEL_DEBUG = 1 shl 7;
    G_LOG_LEVEL_MASK = (1 shl 8) - 2;

    type
       PGNode = ptr TGNode;
       TGNode = record
            data : gpointer;
            next : PGNode;
            prev : PGNode;
            parent : PGNode;
            children : PGNode;
         end;

    const
       G_HOOK_FLAG_USER_SHIFT = 4;

    type
       TGHookFlagMask = longint;
    const
       G_HOOK_FLAG_ACTIVE = 1 shl 0;
       G_HOOK_FLAG_IN_CALL = 1 shl 1;
       G_HOOK_FLAG_MASK = $0f;

    type
       PGHook = ptr TGHook;
       PGHookList = ptr TGHookList;

       TGHookCompareFunc = function (new_hook:PGHook; sibling:PGHook):gint;cdecl;
       TGHookFindFunc = function (hook:PGHook; data:gpointer):gboolean;cdecl;
       TGHookMarshaller = procedure (hook:PGHook; data:gpointer);cdecl;
       TGHookCheckMarshaller = function (hook:PGHook; data:gpointer):gboolean;cdecl;
       TGHookFunc = procedure (data:gpointer);cdecl;
       TGHookCheckFunc = function (data:gpointer):gboolean;cdecl;
       TGHookFreeFunc = procedure (hook_list:PGHookList; hook:PGHook);cdecl;

       TGDestroyNotify = procedure (data:gpointer);cdecl;

       TGHookList = record
            seq_id : guint;
            hook_size : guint;
            flag0 : word;
            hooks : PGHook;
            hook_memchunk : PGMemChunk;
            hook_free : TGHookFreeFunc;
            hook_destroy : TGHookFreeFunc;
         end;

       TGHook = record
            data : gpointer;
            next : PGHook;
            prev : PGHook;
            ref_count : guint;
            hook_id : guint;
            flags : guint;
            func : gpointer;
            destroy : TGDestroyNotify;
         end;

    const
       bm_TGHookList_is_setup = $1;
       bp_TGHookList_is_setup = 0;

const
   G_CSET_UA_2_Z = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
   G_CSET_a_2_z = 'abcdefghijklmnopqrstuvwxyz';

type
   PGErrorType = ptr TGErrorType;
   TGErrorType = longint;
const
   G_ERR_UNKNOWN = 0;
   G_ERR_UNEXP_EOF = 1;
   G_ERR_UNEXP_EOF_IN_STRING = 2;
   G_ERR_UNEXP_EOF_IN_COMMENT = 3;
   G_ERR_NON_DIGIT_IN_CONST = 4;
   G_ERR_DIGIT_RADIX = 5;
   G_ERR_FLOAT_RADIX = 6;
   G_ERR_FLOAT_MALFORMED = 7;

type
  PGTokenType = ptr TGTokenType;
  TGTokenType = longint;
const
    G_TOKEN_EOF                   = 0;
    G_TOKEN_LEFT_PAREN            = ('(');
    G_TOKEN_RIGHT_PAREN           = (')');
    G_TOKEN_LEFT_CURLY            = ('{');
    G_TOKEN_RIGHT_CURLY           = ('}');
    G_TOKEN_LEFT_BRACE            = ('[');
    G_TOKEN_RIGHT_BRACE           = (']');
    G_TOKEN_EQUAL_SIGN            = ('=');
    G_TOKEN_COMMA                 = (',');

    G_TOKEN_NONE                  = 256;

    G_TOKEN_ERROR = 257;

    G_TOKEN_CHAR = 258;
    G_TOKEN_BINARY = 259;
    G_TOKEN_OCTAL = 260;
    G_TOKEN_INT = 261;
    G_TOKEN_HEX = 262;
    G_TOKEN_FLOAT = 263;
    G_TOKEN_STRING = 264;

    G_TOKEN_SYMBOL = 265;
    G_TOKEN_IDENTIFIER = 266;
    G_TOKEN_IDENTIFIER_NULL = 267;

    G_TOKEN_COMMENT_SINGLE = 268;
    G_TOKEN_COMMENT_MULTI = 269;
    G_TOKEN_LAST = 270;

type
   PGTokenValue = ptr TGTokenValue;
   TGTokenValue = union
		v_symbol     : gpointer;
		v_identifier : Pgchar ;
		v_binary     : gulong;
		v_octal      : gulong ;
		v_int        : gulong;
{		v_float      : gdouble;}
		v_hex        : gulong;
		v_string     : Pgchar;
		v_comment    : Pgchar;
	 	v_char       : guchar;
		v_error      : guint;
     end;

PGScannerConfig = ptr TGScannerConfig;
TGScannerConfig = Record
         cset_skip_characters,
         cset_identifier_first,
         cset_identifier_nth,
         cpair_comment_single : Pgchar;
         flag0 : guint;
end;
   PGScanner = ptr TGScanner;

  TGScannerMsgFunc = procedure (scanner:PGScanner; message:Pgchar; error:gint);cdecl;

   TGScanner = record
            user_data : gpointer;
            max_parse_errors : guint;
            parse_errors : guint;
            input_name : Pgchar;
            derived_data : gpointer;
            config : PGScannerConfig;
            token :TGTokenType;
            _value : TGTokenValue;
            line : guint;
            position : guint;
            next_token :TGTokenType;
            next_value : TGTokenValue;
            next_line : guint;
            next_position : guint;
            symbol_table : PGHashTable;
            input_fd : gint;
            text : Pgchar;
            text_end : Pgchar;
            buffer : Pgchar;
            scope_id : guint;
            msg_handler :TGScannerMsgFunc;
     end;


    const
       bm_TGScannerConfig_case_sensitive = $1;
       bp_TGScannerConfig_case_sensitive = 0;
       bm_TGScannerConfig_skip_comment_multi = $2;
       bp_TGScannerConfig_skip_comment_multi = 1;
       bm_TGScannerConfig_skip_comment_single = $4;
       bp_TGScannerConfig_skip_comment_single = 2;
       bm_TGScannerConfig_scan_comment_multi = $8;
       bp_TGScannerConfig_scan_comment_multi = 3;
       bm_TGScannerConfig_scan_identifier = $10;
       bp_TGScannerConfig_scan_identifier = 4;
       bm_TGScannerConfig_scan_identifier_1char = $20;
       bp_TGScannerConfig_scan_identifier_1char = 5;
       bm_TGScannerConfig_scan_identifier_NULL = $40;
       bp_TGScannerConfig_scan_identifier_NULL = 6;
       bm_TGScannerConfig_scan_symbols = $80;
       bp_TGScannerConfig_scan_symbols = 7;
       bm_TGScannerConfig_scan_binary = $100;
       bp_TGScannerConfig_scan_binary = 8;
       bm_TGScannerConfig_scan_octal = $200;
       bp_TGScannerConfig_scan_octal = 9;
       bm_TGScannerConfig_scan_float = $400;
       bp_TGScannerConfig_scan_float = 10;
       bm_TGScannerConfig_scan_hex = $800;
       bp_TGScannerConfig_scan_hex = 11;
       bm_TGScannerConfig_scan_hex_dollar = $1000;
       bp_TGScannerConfig_scan_hex_dollar = 12;
       bm_TGScannerConfig_scan_string_sq = $2000;
       bp_TGScannerConfig_scan_string_sq = 13;
       bm_TGScannerConfig_scan_string_dq = $4000;
       bp_TGScannerConfig_scan_string_dq = 14;
       bm_TGScannerConfig_numbers_2_int = $8000;
       bp_TGScannerConfig_numbers_2_int = 15;
       bm_TGScannerConfig_int_2_float = $10000;
       bp_TGScannerConfig_int_2_float = 16;
       bm_TGScannerConfig_identifier_2_string = $20000;
       bp_TGScannerConfig_identifier_2_string = 17;
       bm_TGScannerConfig_char_2_token = $40000;
       bp_TGScannerConfig_char_2_token = 18;
       bm_TGScannerConfig_symbol_2_token = $80000;
       bp_TGScannerConfig_symbol_2_token = 19;
       bm_TGScannerConfig_scope_0_fallback = $100000;
       bp_TGScannerConfig_scope_0_fallback = 20;

type
   PGFunc = ptr TGFunc;
   TGFunc = procedure(data:gpointer; user_data:gpointer);cdecl;
   PGHFunc = ptr TGHFunc;
   TGHFunc = procedure(key:gpointer; _value:gpointer; user_data:gpointer);cdecl;
   PGHRFunc = ptr TGHRFunc;
   TGHRFunc = function (key:gpointer; _value:gpointer; user_data:gpointer):gboolean;cdecl;
   PGHashFunc = ptr TGHashFunc;
   TGHashFunc = function(key:gpointer):guint;cdecl;
   PGCompareFunc = ptr TGCompareFunc;
   TGCompareFunc = function (a:gpointer; b:gpointer):gint;cdecl;
   PGCacheNewFunc = ptr TGCacheNewFunc;
   TGCacheNewFunc = function(key:gpointer):gpointer;cdecl;
   PGCacheDupFunc = ptr TGCacheDupFunc;
   TGCacheDupFunc = function(_value:gpointer):gpointer;cdecl;
   PGCacheDestroyFunc = ptr TGCacheDestroyFunc;
   TGCacheDestroyFunc = procedure(_value:gpointer);cdecl;
   PGTraverseFunc = ptr TGTraverseFunc;
   TGTraverseFunc = function(key:gpointer; _value:gpointer; data:gpointer):gint;cdecl;
   PGSearchFunc = ptr TGSearchFunc;
   TGSearchFunc = function(key:gpointer; data:gpointer):gint;cdecl;
   PGErrorFunc = ptr TGErrorFunc;
   TGErrorFunc = procedure(str:Pgchar);cdecl;
   PGWarningFunc = ptr TGWarningFunc;
   TGWarningFunc = procedure(str:Pgchar);cdecl;
   PGPrintFunc = ptr TGPrintFunc;
   TGPrintFunc = procedure(str:Pgchar);cdecl;

   TGCompletionFunc = function (_para1:gpointer):Pgchar;cdecl;
   TGDataForeachFunc = procedure (key_id:TGQuark; data:gpointer; user_data:gpointer);cdecl;
   TGFreeFunc = procedure (data:gpointer);cdecl;
   TGLogFunc = procedure (log_domain:Pgchar; log_level:TGLogLevelFlags; message:Pgchar; user_data:gpointer);cdecl;
   TGNodeTraverseFunc = function (node:PGNode; data:gpointer):gboolean;cdecl;
   TGNodeForeachFunc = procedure (node:PGNode; data:gpointer);cdecl;
   TGVoidFunc = procedure ;cdecl;

   PGallocator = pointer;
   PGrelation  = pointer;
   PGData      = pointer;
   PPGData     = ptr PGData;
   PTm         = pointer;
   PGMainloop  = pointer;
   PGMutex     = pointer;


{windows gtk}

{procedure g_list_push_allocator(allocator:PGAllocator); name 'g_list_push_allocator';
procedure g_list_pop_allocator; name 'g_list_pop_allocator';
var
  g_log_domain_glib : Pgchar;external glibdll name 'g_log_domain_glib';
    const
       G_ALLOCATOR_LIST = 1;
       G_ALLOCATOR_SLIST = 2;
       G_ALLOCATOR_NODE = 3;

function  g_allocator_new(name:Pgchar; n_preallocs:guint):PGAllocator; name 'g_allocator_new';
procedure g_allocator_free(allocator:PGAllocator); name 'g_allocator_free';
function  g_strncasecmp(s1:Pgchar; s2:Pgchar; n:guint):gint; name 'g_strncasecmp';
function  g_strchug(thestring:Pgchar):Pgchar; name 'g_strchug';
function  g_strchomp(thestring:Pgchar):Pgchar; name 'g_strchomp';
function  g_strstrip(thestring : Pgchar) : Pgchar;
function  g_strjoin(separator:Pgchar; args:array of const):Pgchar; name 'g_strjoin';
procedure g_slist_push_allocator(allocator:PGAllocator); name 'g_slist_push_allocator';
procedure g_slist_pop_allocator; name 'g_slist_pop_allocator';
procedure g_node_push_allocator(allocator:PGAllocator); name 'g_node_push_allocator';
procedure g_node_pop_allocator; name 'g_node_pop_allocator';
function  g_spaced_primes_closest(num:guint):guint; name 'g_spaced_primes_closest';
function  g_source_remove_by_funcs_user_data(funcs:PGSourceFuncs; user_data:gpointer):gboolean; name 'g_source_remove_by_funcs_user_data';
}


   const
       G_ALLOC_ONLY = 1;
       G_ALLOC_AND_FREE = 2;
       G_STR_DELIMITERS = '_-|> <.';

    type
       TGDateYear = guint16;
       TGDateDay = guint8;

       TGDateDMY = longint;
const
       G_DATEDMY_DAY = 0;
       G_DATEDMY_MONTH = 1;
       G_DATEDMY_YEAR = 2;

type
       TGDateWeekday = longint;
const
       G_DATE_BAD_WEEKDAY = 0;
       G_DATE_MONDAY = 1;
         G_DATE_TUESDAY = 2;
         G_DATE_WEDNESDAY = 3;
         G_DATE_THURSDAY = 4;
         G_DATE_FRIDAY = 5;
         G_DATE_SATURDAY = 6;
         G_DATE_SUNDAY = 7;

type
       TGDateMonth = longint;
const
         G_DATE_BAD_MONTH = 0;
         G_DATE_JANUARY = 1;
         G_DATE_FEBRUARY = 2;
         G_DATE_MARCH = 3;
         G_DATE_APRIL = 4;
         G_DATE_MAY = 5;
         G_DATE_JUNE = 6;
         G_DATE_JULY = 7;
         G_DATE_AUGUST = 8;
         G_DATE_SEPTEMBER = 9;
         G_DATE_OCTOBER = 10;
         G_DATE_NOVEMBER = 11;
         G_DATE_DECEMBER = 12;

    const
       G_DATE_BAD_JULIAN = 0;
       G_DATE_BAD_DAY = 0;
       G_DATE_BAD_YEAR = 0;

    type
       PGDate = ptr TGDate;
       TGDate = record
            flag0 : longint;
            flag1 : longint;
         end;

    const
       bm_TGDate_julian_days = $FFFFFFFF;
       bp_TGDate_julian_days = 0;
       bm_TGDate_julian = $1;
       bp_TGDate_julian = 0;
       bm_TGDate_dmy = $2;
       bp_TGDate_dmy = 1;
       bm_TGDate_day = $FC;
       bp_TGDate_day = 2;
       bm_TGDate_month = $F00;
       bp_TGDate_month = 8;
       bm_TGDate_year = $FFFF000;
       bp_TGDate_year = 12;

type
     PGCompletion = ptr TGCompletion;
     TGCompletion = record
          items : PGList;
          func : TGCompletionFunc;
          prefix : Pgchar;
          cache : PGList;
       end;

    type
       TGIOError = longint;
    const
       G_IO_ERROR_NONE = 0;
       G_IO_ERROR_AGAIN = 1;
       G_IO_ERROR_INVAL = 2;
       G_IO_ERROR_UNKNOWN = 3;

    type
       TGSeekType = longint;
    const
       G_SEEK_CUR = 0;
       G_SEEK_SET = 1;
       G_SEEK_END = 2;

    type
       TGIOCondition = longint;

       PGIOFuncs = ptr TGIOFuncs;

       PGIOChannel = ptr TGIOChannel;
       TGIOChannel = record
            channel_flags : guint;
            ref_count : guint;
            funcs : PGIOFuncs;
         end;

       TGIOFunc = function (source:PGIOChannel; condition:TGIOCondition; data:gpointer):gboolean;cdecl;

      TIo_Read  = function (channel:PGIOChannel; buf:Pgchar; p_count:guint; bytes_read:Pguint):TGIOError;cdecl;
		TIo_Write = function (channel:PGIOChannel; buf:Pgchar; p_count:guint; bytes_written:Pguint):TGIOError;cdecl;
		TIo_Seek  = function (channel:PGIOChannel; offset:gint; thetype:TGSeekType):TGIOError;cdecl;
	   TIo_Close = procedure (channel:PGIOChannel);cdecl;
		TIo_Add_Watch = function (channel:PGIOChannel; priority:gint; condition:TGIOCondition; func:TGIOFunc; user_data:gpointer; notify:TGDestroyNotify):guint;cdecl;
      TIO_Free = procedure (channel:PGIOChannel);cdecl;
       TGIOFuncs = record
            io_read  : TIo_Read;
            io_write : TIo_Write;
            io_seek  : TIo_Seek;
            io_close : TIo_Close;
            io_add_watch : TIo_Add_Watch;
            io_free : TIo_Free;
         end;

    type
       PGTimeVal = ptr TGTimeVal;
       TGTimeVal = record
            tv_sec : glong;
            tv_usec : glong;
         end;


		 TPrepare_Proc = function (source_data:gpointer; current_time:PGTimeVal; timeout:Pgint; user_data:gpointer):gboolean;cdecl;
		 TCheck_Proc   = function (source_data:gpointer; current_time:PGTimeVal; user_data:gpointer):gboolean;cdecl;
		 TDispatch_Proc= function (source_data:gpointer; current_time:PGTimeVal; user_data:gpointer):gboolean;cdecl;
       PGSourceFuncs = ptr TGSourceFuncs;
       TGSourceFuncs = record
            prepare  : TPrepare_Proc;
            check    : TCheck_Proc;
				dispatch : TDispatch_Proc;
            destroy  : TGDestroyNotify;
         end;

    const
       G_PRIORITY_HIGH = -100;
       G_PRIORITY_DEFAULT = 0;
       G_PRIORITY_HIGH_IDLE = 100;
       G_PRIORITY_DEFAULT_IDLE = 200;
       G_PRIORITY_LOW = 300;

    type
       TGSourceFunc = function (data:gpointer):gboolean;cdecl;
       PGPollFD = ptr TGPollFD;
       TGPollFD = record
            fd : gint;
            events : gushort;
            revents : gushort;
         end;

       TGPollFunc = function (ufds:PGPollFD; nfsd:guint; timeout:gint):gint;cdecl;

function  julian_days(var a : TGDate) : guint;
procedure set_julian_days(var a : TGDate; __julian_days : guint);
function  julian(var a : TGDate) : guint;
procedure set_julian(var a : TGDate; __julian : guint);
function  dmy(var a : TGDate) : guint;
procedure set_dmy(var a : TGDate; __dmy : guint);
function  day(var a : TGDate) : guint;
procedure set_day(var a : TGDate; __day : guint);
function  month(var a : TGDate) : guint;
procedure set_month(var a : TGDate; __month : guint);
function  year(var a : TGDate) : guint;
procedure set_year(var a : TGDate; __year : guint);


function  g_list_previous(list : PGlist) : PGlist;
function  g_list_next(list : PGlist) : PGlist;
function  g_slist_next(slist : PGSList) : PGSList;
function  G_NODE_IS_ROOT(node : PGNode) : boolean;
function  G_NODE_IS_LEAF(node : PGNode) : boolean;
function  g_node_append(parent,node : PGNode) : PGNode;
function  g_node_insert_data(parent:PGNode;position:gint;data : pointer) : PGNode;
function  g_node_insert_data_before(parent,sibling:PGNode;data : pointer) : PGNode;
function  g_node_prepend_data(parent:PGNode;data : pointer) : PGNode;
function  g_node_append_data(parent:PGNode;data : pointer) : PGNode;
function  g_node_prev_sibling(node : PGnode) : PGNode;
function  g_node_next_sibling(node : PGnode) : PGnode;
function  g_node_first_child(node : PGnode) : PGnode;

function  is_setup(var a : TGHookList) : guint;
procedure set_is_setup(var a : TGHookList; __is_setup : guint);
function  G_HOOK_DEFERRED_DESTROY : TGHookFreeFunc;
function  G_HOOK_ACTIVE(hook : PGHook) : boolean;
function  G_HOOK_IN_CALL(hook : PGHook) : boolean;
function  G_HOOK_IS_VALID(hook : PGHook) : boolean;
function  G_HOOK_IS_UNLINKED(hook : PGHook) : boolean;
procedure g_hook_append(hook_list:PGhooklist;hook : PGhook);

function  g_array_append_val(a:PGarray;v : longint) : PGarray;
function  g_array_prepend_val(a:PGarray;v : longint) : PGarray;
function  g_array_insert_val(a:PGarray;i:guint;v : longint) : PGarray;

procedure g_datalist_id_set_data(dl:PPGdata;q:TGQuark;d : pointer);
procedure g_datalist_id_remove_data(dl:PPGData;q:TGQuark);
function  g_datalist_Get_data(dl:PPGData;k : Pgchar):gpointer;
procedure g_datalist_set_data_full(dl:PPGData;k:Pgchar;d:gpointer;f : TGDestroyNotify);
procedure g_datalist_remove_no_notify(dl:PPGdata;k : Pgchar);
procedure g_datalist_set_data(dl:PPGdata;k:Pgchar;d : pointer);
procedure g_datalist_remove_data(dl:PPGdata;k : Pgchar);

procedure g_dataset_id_set_data(l:gconstpointer;k:TGQuark;d : gconstpointer);
procedure g_dataset_id_remove_data(l : gconstpointer;k:TGQuark);
function  g_dataset_get_data(l : gconstpointer;k:Pgchar) : gconstpointer;
procedure g_dataset_set_data_full(l:gconstpointer;k:Pgchar;d:pointer;f : TGDestroynotify);
procedure g_dataset_remove_no_notify(l : gconstpointer;k:Pgchar);
procedure g_dataset_set_data(l:gconstpointer;k:Pgchar;d:pointer);
procedure g_dataset_remove_data(l : gconstpointer;k:Pgchar);

function  case_sensitive(var a : TGScannerConfig) : guint;
procedure set_case_sensitive(var a : TGScannerConfig; __case_sensitive : guint);
function  skip_comment_multi(var a : TGScannerConfig) : guint;
procedure set_skip_comment_multi(var a : TGScannerConfig; __skip_comment_multi : guint);
function  skip_comment_single(var a : TGScannerConfig) : guint;
procedure set_skip_comment_single(var a : TGScannerConfig; __skip_comment_single : guint);
function  scan_comment_multi(var a : TGScannerConfig) : guint;
procedure set_scan_comment_multi(var a : TGScannerConfig; __scan_comment_multi : guint);
function  scan_identifier(var a : TGScannerConfig) : guint;
procedure set_scan_identifier(var a : TGScannerConfig; __scan_identifier : guint);
function  scan_identifier_1char(var a : TGScannerConfig) : guint;
procedure set_scan_identifier_1char(var a : TGScannerConfig; __scan_identifier_1char : guint);
function  scan_identifier_NULL(var a : TGScannerConfig) : guint;
procedure set_scan_identifier_NULL(var a : TGScannerConfig; __scan_identifier_NULL : guint);
function  scan_symbols(var a : TGScannerConfig) : guint;
procedure set_scan_symbols(var a : TGScannerConfig; __scan_symbols : guint);
function  scan_binary(var a : TGScannerConfig) : guint;
procedure set_scan_binary(var a : TGScannerConfig; __scan_binary : guint);
function  scan_octal(var a : TGScannerConfig) : guint;
procedure set_scan_octal(var a : TGScannerConfig; __scan_octal : guint);
function  scan_float(var a : TGScannerConfig) : guint;
procedure set_scan_float(var a : TGScannerConfig; __scan_float : guint);
function  scan_hex(var a : TGScannerConfig) : guint;
procedure set_scan_hex(var a : TGScannerConfig; __scan_hex : guint);
function  scan_hex_dollar(var a : TGScannerConfig) : guint;
procedure set_scan_hex_dollar(var a : TGScannerConfig; __scan_hex_dollar : guint);
function  scan_string_sq(var a : TGScannerConfig) : guint;
procedure set_scan_string_sq(var a : TGScannerConfig; __scan_string_sq : guint);
function  scan_string_dq(var a : TGScannerConfig) : guint;
procedure set_scan_string_dq(var a : TGScannerConfig; __scan_string_dq : guint);
function  numbers_2_int(var a : TGScannerConfig) : guint;
procedure set_numbers_2_int(var a : TGScannerConfig; __numbers_2_int : guint);
function  int_2_float(var a : TGScannerConfig) : guint;
procedure set_int_2_float(var a : TGScannerConfig; __int_2_float : guint);
function  identifier_2_string(var a : TGScannerConfig) : guint;
procedure set_identifier_2_string(var a : TGScannerConfig; __identifier_2_string : guint);
function  char_2_token(var a : TGScannerConfig) : guint;
procedure set_char_2_token(var a : TGScannerConfig; __char_2_token : guint);
function  symbol_2_token(var a : TGScannerConfig) : guint;
procedure set_symbol_2_token(var a : TGScannerConfig; __symbol_2_token : guint);
function  scope_0_fallback(var a : TGScannerConfig) : guint;
procedure set_scope_0_fallback(var a : TGScannerConfig; __scope_0_fallback : guint);


{array of const}

{
procedure g_logv(log_domain:Pgchar; log_level:TGLogLevelFlags; format:Pgchar; args:array of const); name 'g_logv';
function  g_strdup_printf(format:Pgchar;args:array of const):Pgchar; name 'g_strdup_printf';
function  g_strdup_vprintf(format:Pgchar; args:array of const):Pgchar; name 'g_strdup_vprintf';
function  g_strconcat(string1:Pgchar; args:array of const):Pgchar; name 'g_strconcat';
function  g_printf_string_upper_bound(format:Pgchar; args:array of const):guint; name 'g_printf_string_upper_bound';
function  g_vsnprintf(thestring:Pgchar; n:gulong; format:Pgchar; args:array of const):gint; name 'g_vsnprintf';
procedure g_string_sprintf(thestring:PGString; fmt:Pgchar; args:array of const); name 'g_string_sprintf';
procedure g_string_sprintfa(thestring:PGString; fmt:Pgchar; args:array of const); name 'g_string_sprintfa';
procedure g_relation_insert(relation:PGRelation; args:array of const); name 'g_relation_insert';
function  g_relation_exists(relation:PGRelation; args:array of const):gboolean; name 'g_relation_exists';
}

external linked 'libglib.so' cdecl

	function  g_list_alloc:PGList; name 'g_list_alloc';
	procedure g_list_free(list:PGList); name 'g_list_free';
	procedure g_list_free_1(list:PGList); name 'g_list_free_1';
	function  g_list_append(list:PGList; data:gpointer):PGList; name 'g_list_append';
	function  g_list_prepend(list:PGList; data:gpointer):PGList; name 'g_list_prepend';
	function  g_list_insert(list:PGList; data:gpointer; position:gint):PGList; name 'g_list_insert';
	function  g_list_insert_sorted(list:PGList; data:gpointer; func:TGCompareFunc):PGList; name 'g_list_insert_sorted';
	function  g_list_concat(list1:PGList; list2:PGList):PGList; name 'g_list_concat';
	function  g_list_remove(list:PGList; data:gpointer):PGList; name 'g_list_remove';
	function  g_list_remove_link(list:PGList; link:PGList):PGList; name 'g_list_remove_link';
	function  g_list_reverse(list:PGList):PGList; name 'g_list_reverse';
	function  g_list_copy(list:PGList):PGList; name 'g_list_copy';
	function  g_list_nth(list:PGList; n:guint):PGList; name 'g_list_nth';
	function  g_list_find(list:PGList; data:gpointer):PGList; name 'g_list_find';
	function  g_list_find_custom(list:PGList; data:gpointer; func:TGCompareFunc):PGList; name 'g_list_find_custom';
	function  g_list_index(list:PGList; data:gpointer):gint; name 'g_list_index';
	function  g_list_position(list:PGList; llink:PGList):gint; name 'g_list_position';
	function  g_list_last(list:PGList):PGList; name 'g_list_last';
	function  g_list_first(list:PGList):PGList; name 'g_list_first';
	function  g_list_length(list:PGList):guint; name 'g_list_length';
	procedure g_list_foreach(list:PGList; func:TGFunc; user_data:gpointer); name 'g_list_foreach';
	function  g_list_sort(list:PGList; compare_func:TGCompareFunc):PGList; name 'g_list_sort';
	function  g_list_nth_data(list:PGList; n:guint):gpointer; name 'g_list_nth_data';
	function  g_slist_alloc:PGSList; name 'g_slist_alloc';
	procedure g_slist_free(list:PGSList); name 'g_slist_free';
	procedure g_slist_free_1(list:PGSList); name 'g_slist_free_1';
	function  g_slist_append(list:PGSList; data:gpointer):PGSList; name 'g_slist_append';
	function  g_slist_prepend(list:PGSList; data:gpointer):PGSList; name 'g_slist_prepend';
	function  g_slist_insert(list:PGSList; data:gpointer; position:gint):PGSList; name 'g_slist_insert';
	function  g_slist_insert_sorted(list:PGSList; data:gpointer; func:TGCompareFunc):PGSList; name 'g_slist_insert_sorted';
	function  g_slist_concat(list1:PGSList; list2:PGSList):PGSList; name 'g_slist_concat';
	function  g_slist_remove(list:PGSList; data:gpointer):PGSList; name 'g_slist_remove';
	function  g_slist_remove_link(list:PGSList; link:PGSList):PGSList; name 'g_slist_remove_link';
	function  g_slist_reverse(list:PGSList):PGSList; name 'g_slist_reverse';
	function  g_slist_copy(list:PGSList):PGSList; name 'g_slist_copy';
	function  g_slist_nth(list:PGSList; n:guint):PGSList; name 'g_slist_nth';
	function  g_slist_find(list:PGSList; data:gpointer):PGSList; name 'g_slist_find';
	function  g_slist_find_custom(list:PGSList; data:gpointer; func:TGCompareFunc):PGSList; name 'g_slist_find_custom';
	function  g_slist_position(list:PGSList; llink:PGSList):gint; name 'g_slist_position';
	function  g_slist_index(list:PGSList; data:gpointer):gint; name 'g_slist_index';
	function  g_slist_last(list:PGSList):PGSList; name 'g_slist_last';
	function  g_slist_length(list:PGSList):guint; name 'g_slist_length';
	procedure g_slist_foreach(list:PGSList; func:TGFunc; user_data:gpointer); name 'g_slist_foreach';
	function  g_slist_sort(list:PGSList; compare_func:TGCompareFunc):PGSList; name 'g_slist_sort';
	function  g_slist_nth_data(list:PGSList; n:guint):gpointer; name 'g_slist_nth_data';
	function  g_hash_table_new(hash_func:TGHashFunc; key_compare_func:TGCompareFunc):PGHashTable; name 'g_hash_table_new';
	procedure g_hash_table_destroy(hash_table:PGHashTable); name 'g_hash_table_destroy';
	procedure g_hash_table_insert(hash_table:PGHashTable; key:gpointer; _value:gpointer); name 'g_hash_table_insert';
	procedure g_hash_table_remove(hash_table:PGHashTable; key:gpointer); name 'g_hash_table_remove';
	function  g_hash_table_lookup(hash_table:PGHashTable; key:gpointer):gpointer; name 'g_hash_table_lookup';
	function  g_hash_table_lookup_extended(hash_table:PGHashTable; lookup_key:gconstpointer; orig_key:Pgpointer; _value:Pgpointer):gboolean; name 'g_hash_table_lookup_extended';
	procedure g_hash_table_freeze(hash_table:PGHashTable); name 'g_hash_table_freeze';
	procedure g_hash_table_thaw(hash_table:PGHashTable); name 'g_hash_table_thaw';
	procedure g_hash_table_foreach(hash_table:PGHashTable; func:TGHFunc; user_data:gpointer); name 'g_hash_table_foreach';
	function  g_hash_table_foreach_remove(hash_table:PGHashTable; func:TGHRFunc; user_data:gpointer):guint; name 'g_hash_table_foreach_remove';
	function  g_hash_table_size(hash_table:PGHashTable):guint; name 'g_hash_table_size';
	
	function  g_cache_new(value_new_func:TGCacheNewFunc; value_destroy_func:TGCacheDestroyFunc; key_dup_func:TGCacheDupFunc; key_destroy_func:TGCacheDestroyFunc; hash_key_func:TGHashFunc; hash_value_func:TGHashFunc; key_compare_func:TGCompareFunc):PGCache; name 'g_cache_new';
	procedure g_cache_destroy(cache:PGCache); name 'g_cache_destroy';
	function  g_cache_insert(cache:PGCache; key:gpointer):gpointer; name 'g_cache_insert';
	procedure g_cache_remove(cache:PGCache; _value:gpointer); name 'g_cache_remove';
	procedure g_cache_key_foreach(cache:PGCache; func:TGHFunc; user_data:gpointer); name 'g_cache_key_foreach';
	procedure g_cache_value_foreach(cache:PGCache; func:TGHFunc; user_data:gpointer); name 'g_cache_value_foreach';
	
	function  g_tree_new(key_compare_func:TGCompareFunc):PGTree; name 'g_tree_new';
	procedure g_tree_destroy(tree:PGTree); name 'g_tree_destroy';
	procedure g_tree_insert(tree:PGTree; key:gpointer; _value:gpointer); name 'g_tree_insert';
	procedure g_tree_remove(tree:PGTree; key:gpointer); name 'g_tree_remove';
	function  g_tree_lookup(tree:PGTree; key:gpointer):gpointer; name 'g_tree_lookup';
	procedure g_tree_traverse(tree:PGTree; traverse_func:TGTraverseFunc; traverse_type:TGTraverseType; data:gpointer); name 'g_tree_traverse';
	function  g_tree_search(tree:PGTree; search_func:TGSearchFunc; data:gpointer):gpointer; name 'g_tree_search';
	function  g_tree_height(tree:PGTree):gint; name 'g_tree_height';
	function  g_tree_nnodes(tree:PGTree):gint; name 'g_tree_nnodes';
	
	function  g_node_new(data:gpointer):PGNode; name 'g_node_new';
	procedure g_node_destroy(p_root:PGNode); name 'g_node_destroy';
	procedure g_node_unlink(node:PGNode); name 'g_node_unlink';
	function  g_node_insert(parent:PGNode; position:gint; node:PGNode):PGNode; name 'g_node_insert';
	function  g_node_insert_before(parent:PGNode; sibling:PGNode; node:PGNode):PGNode; name 'g_node_insert_before';
	function  g_node_prepend(parent:PGNode; node:PGNode):PGNode; name 'g_node_prepend';
	function  g_node_n_nodes(p_root:PGNode; flags:TGTraverseFlags):guint; name 'g_node_n_nodes';
	function  g_node_get_root(node:PGNode):PGNode; name 'g_node_get_root';
	function  g_node_is_ancestor(node:PGNode; descendant:PGNode):gboolean; name 'g_node_is_ancestor';
	function  g_node_depth(node:PGNode):guint; name 'g_node_depth';
	function  g_node_find(p_root:PGNode; order:TGTraverseType; flags:TGTraverseFlags; data:gpointer):PGNode; name 'g_node_find';
	procedure g_node_traverse(p_root:PGNode; order:TGTraverseType; flags:TGTraverseFlags; max_depth:gint; func:TGNodeTraverseFunc; data:gpointer); name 'g_node_traverse';
	function  g_node_max_height(p_root:PGNode):guint; name 'g_node_max_height';
	procedure g_node_children_foreach(node:PGNode; flags:TGTraverseFlags; func:TGNodeForeachFunc; data:gpointer); name 'g_node_children_foreach';
	procedure g_node_reverse_children(node:PGNode); name 'g_node_reverse_children';
	function  g_node_n_children(node:PGNode):guint; name 'g_node_n_children';
	function  g_node_nth_child(node:PGNode; n:guint):PGNode; name 'g_node_nth_child';
	function  g_node_last_child(node:PGNode):PGNode; name 'g_node_last_child';
	function  g_node_find_child(node:PGNode; flags:TGTraverseFlags; data:gpointer):PGNode; name 'g_node_find_child';
	function  g_node_child_position(node:PGNode; child:PGNode):gint; name 'g_node_child_position';
	function  g_node_child_index(node:PGNode; data:gpointer):gint; name 'g_node_child_index';
	function  g_node_first_sibling(node:PGNode):PGNode; name 'g_node_first_sibling';
	function  g_node_last_sibling(node:PGNode):PGNode; name 'g_node_last_sibling';
	procedure g_hook_list_init(hook_list:PGHookList; hook_size:guint); name 'g_hook_list_init';
	procedure g_hook_list_clear(hook_list:PGHookList); name 'g_hook_list_clear';
	function  g_hook_alloc(hook_list:PGHookList):PGHook; name 'g_hook_alloc';
	procedure g_hook_free(hook_list:PGHookList; hook:PGHook); name 'g_hook_free';
	procedure g_hook_ref(hook_list:PGHookList; hook:PGHook); name 'g_hook_ref';
	procedure g_hook_unref(hook_list:PGHookList; hook:PGHook); name 'g_hook_unref';
	function  g_hook_destroy(hook_list:PGHookList; hook_id:guint):gboolean; name 'g_hook_destroy';
	procedure g_hook_destroy_link(hook_list:PGHookList; hook:PGHook); name 'g_hook_destroy_link';
	procedure g_hook_prepend(hook_list:PGHookList; hook:PGHook); name 'g_hook_prepend';
	procedure g_hook_insert_before(hook_list:PGHookList; sibling:PGHook; hook:PGHook); name 'g_hook_insert_before';
	procedure g_hook_insert_sorted(hook_list:PGHookList; hook:PGHook; func:TGHookCompareFunc); name 'g_hook_insert_sorted';
	function  g_hook_get(hook_list:PGHookList; hook_id:guint):PGHook; name 'g_hook_get';
	function  g_hook_find(hook_list:PGHookList; need_valids:gboolean; func:TGHookFindFunc; data:gpointer):PGHook; name 'g_hook_find';
	function  g_hook_find_data(hook_list:PGHookList; need_valids:gboolean; data:gpointer):PGHook; name 'g_hook_find_data';
	function  g_hook_find_func(hook_list:PGHookList; need_valids:gboolean; func:gpointer):PGHook; name 'g_hook_find_func';
	function  g_hook_find_func_data(hook_list:PGHookList; need_valids:gboolean; func:gpointer; data:gpointer):PGHook; name 'g_hook_find_func_data';
	function  g_hook_first_valid(hook_list:PGHookList; may_be_in_call:gboolean):PGHook; name 'g_hook_first_valid';
	function  g_hook_next_valid(hook_list:PGHookList; hook:PGHook; may_be_in_call:gboolean):PGHook; name 'g_hook_next_valid';
	function  g_hook_compare_ids(new_hook:PGHook; sibling:PGHook):gint; name 'g_hook_compare_ids';
	procedure g_hook_list_invoke(hook_list:PGHookList; may_recurse:gboolean); name 'g_hook_list_invoke';
	procedure g_hook_list_invoke_check(hook_list:PGHookList; may_recurse:gboolean); name 'g_hook_list_invoke_check';
	procedure g_hook_list_marshal(hook_list:PGHookList; may_recurse:gboolean; marshaller:TGHookMarshaller; data:gpointer); name 'g_hook_list_marshal';
	procedure g_hook_list_marshal_check(hook_list:PGHookList; may_recurse:gboolean; marshaller:TGHookCheckMarshaller; data:gpointer); name 'g_hook_list_marshal_check';
	
	procedure g_on_error_query(prg_name:Pgchar); name 'g_on_error_query';
	procedure g_on_error_stack_trace(prg_name:Pgchar); name 'g_on_error_stack_trace';
	
	function  g_log_set_handler(log_domain:Pgchar; log_levels:TGLogLevelFlags; log_func:TGLogFunc; user_data:gpointer):guint; name 'g_log_set_handler';
	procedure g_log_remove_handler(log_domain:Pgchar; handler_id:guint); name 'g_log_remove_handler';
	procedure g_log_default_handler(log_domain:Pgchar; log_level:TGLogLevelFlags; message:Pgchar; unused_data:gpointer); name 'g_log_default_handler';
	function  g_log_set_fatal_mask(log_domain:Pgchar; fatal_mask:TGLogLevelFlags):TGLogLevelFlags; name 'g_log_set_fatal_mask';
	function  g_log_set_always_fatal(fatal_mask:TGLogLevelFlags):TGLogLevelFlags; name 'g_log_set_always_fatal';
	
	function  g_set_printerr_handler(func:TGPrintFunc):TGPrintFunc; name 'g_set_printerr_handler';
	function  g_set_print_handler(func:TGPrintFunc):TGPrintFunc; name 'g_set_print_handler';
	function  g_set_error_handler(func:TGErrorFunc):TGErrorFunc; name 'g_set_error_handler';
	function  g_set_warning_handler(func:TGWarningFunc):TGWarningFunc; name 'g_set_warning_handler';
	function  g_set_message_handler(func:TGPrintFunc):TGPrintFunc; name 'g_set_message_handler';
	
	function  g_malloc(p_size:gulong):gpointer; name 'g_malloc';
	function  g_malloc0(p_size:gulong):gpointer; name 'g_malloc0';
	function  g_realloc(mem:gpointer; p_size:gulong):gpointer; name 'g_realloc';
	procedure g_free(mem:gpointer); name 'g_free';
	procedure g_mem_profile; name 'g_mem_profile';
	procedure g_mem_check(mem:gpointer); name 'g_mem_check';
	
	
	
	function  g_mem_chunk_new(p_name:Pgchar; atom_size:gint; area_size:gulong; thetype:gint):PGMemChunk; name 'g_mem_chunk_new';
	procedure g_mem_chunk_destroy(mem_chunk:PGMemChunk); name 'g_mem_chunk_destroy';
	function  g_mem_chunk_alloc(mem_chunk:PGMemChunk):gpointer; name 'g_mem_chunk_alloc';
	function  g_mem_chunk_alloc0(mem_chunk:PGMemChunk):gpointer; name 'g_mem_chunk_alloc0';
	procedure g_mem_chunk_free(mem_chunk:PGMemChunk; mem:gpointer); name 'g_mem_chunk_free';
	procedure g_mem_chunk_clean(mem_chunk:PGMemChunk); name 'g_mem_chunk_clean';
	procedure g_mem_chunk_reset(mem_chunk:PGMemChunk); name 'g_mem_chunk_reset';
	procedure g_mem_chunk_print(mem_chunk:PGMemChunk); name 'g_mem_chunk_print';
	procedure g_mem_chunk_info; name 'g_mem_chunk_info';
	procedure g_blow_chunks; name 'g_blow_chunks';
	function  g_timer_new:PGTimer; name 'g_timer_new';
	procedure g_timer_destroy(timer:PGTimer); name 'g_timer_destroy';
	procedure g_timer_start(timer:PGTimer); name 'g_timer_start';
	procedure g_timer_stop(timer:PGTimer); name 'g_timer_stop';
	procedure g_timer_reset(timer:PGTimer); name 'g_timer_reset';
	{function  g_timer_elapsed(timer:PGTimer; microseconds:Pgulong):gdouble; name 'g_timer_elapsed';}
	
	
	function  g_strdelimit(thestring:Pgchar; delimiters:Pgchar; new_delimiter:gchar):Pgchar; name 'g_strdelimit';
	{function  g_strtod(nptr:Pgchar; endptr:PPgchar):gdouble; name 'g_strtod';}
	function  g_strerror(errnum:gint):Pgchar; name 'g_strerror';
	function  g_strsignal(signum:gint):Pgchar; name 'g_strsignal';
	function  g_strcasecmp(s1:Pgchar; s2:Pgchar):gint; name 'g_strcasecmp';
	procedure g_strdown(thestring:Pgchar); name 'g_strdown';
	procedure g_strup(thestring:Pgchar); name 'g_strup';
	procedure g_strreverse(thestring:Pgchar); name 'g_strreverse';
	function  g_strdup(str:Pgchar):Pgchar; name 'g_strdup';
	function  g_strndup(str:Pgchar; n:guint):Pgchar; name 'g_strndup';
	function  g_strnfill(length:guint; fill_char:gchar):Pgchar; name 'g_strnfill';
	function  g_strescape(thestring:Pgchar):Pgchar; name 'g_strescape';
	function  g_memdup(mem:gconstpointer; byte_size:guint):gpointer; name 'g_memdup';
	function  g_strsplit(thestring:Pgchar; delimiter:Pgchar; max_tokens:gint):PPgchar; name 'g_strsplit';
	function  g_strjoinv(separator:Pgchar; str_array:PPgchar):Pgchar; name 'g_strjoinv';
	procedure g_strfreev(str_array:PPgchar); name 'g_strfreev';
	function  g_get_user_name:Pgchar; name 'g_get_user_name';
	function  g_get_real_name:Pgchar; name 'g_get_real_name';
	function  g_get_home_dir:Pgchar; name 'g_get_home_dir';
	function  g_get_tmp_dir:Pgchar; name 'g_get_tmp_dir';
	function  g_get_prgname:Pgchar; name 'g_get_prgname';
	procedure g_set_prgname(prgname:Pgchar); name 'g_set_prgname';
	function  g_parse_debug_string(thestring:Pgchar; keys:PGDebugKey; nkeys:guint):guint; name 'g_parse_debug_string';
	function  g_basename(file_name:Pgchar):Pgchar; name 'g_basename';
	function  g_path_is_absolute(file_name:Pgchar):gboolean; name 'g_path_is_absolute';
	function  g_path_skip_root(file_name:Pgchar):Pgchar; name 'g_path_skip_root';
	function  g_dirname(file_name:Pgchar):Pgchar; name 'g_dirname';
	function  g_get_current_dir:Pgchar; name 'g_get_current_dir';
	function  g_getenv(variable:Pgchar):Pgchar; name 'g_getenv';
	procedure g_atexit(func:TGVoidFunc); name 'g_atexit';
	
	function  g_string_chunk_new(p_size:gint):PGStringChunk; name 'g_string_chunk_new';
	procedure g_string_chunk_free(chunk:PGStringChunk); name 'g_string_chunk_free';
	function  g_string_chunk_insert(chunk:PGStringChunk; thestring:Pgchar):Pgchar; name 'g_string_chunk_insert';
	function  g_string_chunk_insert_const(chunk:PGStringChunk; thestring:Pgchar):Pgchar; name 'g_string_chunk_insert_const';
	function  g_string_new(init:Pgchar):PGString; name 'g_string_new';
	function  g_string_sized_new(dfl_size:guint):PGString; name 'g_string_sized_new';
	procedure g_string_free(thestring:PGString; free_segment:gint); name 'g_string_free';
	function  g_string_assign(lval:PGString; rval:Pgchar):PGString; name 'g_string_assign';
	function  g_string_truncate(thestring:PGString; len:gint):PGString; name 'g_string_truncate';
	function  g_string_append(thestring:PGString; val:Pgchar):PGString; name 'g_string_append';
	function  g_string_append_c(thestring:PGString; c:gchar):PGString; name 'g_string_append_c';
	function  g_string_prepend(thestring:PGString; val:Pgchar):PGString; name 'g_string_prepend';
	function  g_string_prepend_c(thestring:PGString; c:gchar):PGString; name 'g_string_prepend_c';
	function  g_string_insert(thestring:PGString; pos:gint; val:Pgchar):PGString; name 'g_string_insert';
	function  g_string_insert_c(thestring:PGString; pos:gint; c:gchar):PGString; name 'g_string_insert_c';
	function  g_string_erase(thestring:PGString; pos:gint; len:gint):PGString; name 'g_string_erase';
	function  g_string_down(thestring:PGString):PGString; name 'g_string_down';
	function  g_string_up(thestring:PGString):PGString; name 'g_string_up';
	function  g_array_new(zero_terminated:gint):PGArray; name 'g_array_new';
	procedure g_array_free(thearray:PGArray; free_segment:gint); name 'g_array_free';
	function  g_array_append_vals(thearray:PGArray; data:gconstpointer; len:guint):PGArray; name 'g_array_append_vals';
	function  g_array_prepend_vals(thearray:PGArray; data:gconstpointer; len:guint):PGArray; name 'g_array_prepend_vals';
	function  g_array_insert_vals(thearray:PGArray; index:guint; data:gconstpointer; len:guint):PGArray; name 'g_array_insert_vals';
	function  g_array_set_size(thearray:PGArray; length:guint):PGArray; name 'g_array_set_size';
	function  g_array_remove_index(thearray:PGArray; index:guint):PGArray; name 'g_array_remove_index';
	function  g_array_remove_index_fast(thearray:PGArray; index:guint):PGArray; name 'g_array_remove_index_fast';
	
	function  g_ptr_array_new:PGPtrArray; name 'g_ptr_array_new';
	procedure g_ptr_array_free(thearray:PGPtrArray; free_seg:gboolean); name 'g_ptr_array_free';
	procedure g_ptr_array_set_size(thearray:PGPtrArray; length:gint); name 'g_ptr_array_set_size';
	function  g_ptr_array_remove_index(thearray:PGPtrArray; index:guint):gpointer; name 'g_ptr_array_remove_index';
	function  g_ptr_array_remove_index_fast(thearray:PGPtrArray; index:guint):gpointer; name 'g_ptr_array_remove_index_fast';
	function  g_ptr_array_remove(thearray:PGPtrArray; data:gpointer):gboolean; name 'g_ptr_array_remove';
	function  g_ptr_array_remove_fast(thearray:PGPtrArray; data:gpointer):gboolean; name 'g_ptr_array_remove_fast';
	procedure g_ptr_array_add(thearray:PGPtrArray; data:gpointer); name 'g_ptr_array_add';
	
	function  g_byte_array_new:PGByteArray; name 'g_byte_array_new';
	procedure g_byte_array_free(thearray:PGByteArray; free_segment:gboolean); name 'g_byte_array_free';
	function  g_byte_array_append(thearray:PGByteArray; data:Pguint8; len:guint):PGByteArray; name 'g_byte_array_append';
	function  g_byte_array_prepend(thearray:PGByteArray; data:Pguint8; len:guint):PGByteArray; name 'g_byte_array_prepend';
	function  g_byte_array_set_size(thearray:PGByteArray; length:guint):PGByteArray; name 'g_byte_array_set_size';
	function  g_byte_array_remove_index(thearray:PGByteArray; index:guint):PGByteArray; name 'g_byte_array_remove_index';
	function  g_byte_array_remove_index_fast(thearray:PGByteArray; index:guint):PGByteArray; name 'g_byte_array_remove_index_fast';
	
	function  g_str_equal(v:gconstpointer; v2:gconstpointer):gint; name 'g_str_equal';
	function  g_str_hash(v:gconstpointer):guint; name 'g_str_hash';
	
	function  g_int_equal(v:gconstpointer; v2:gconstpointer):gint; name 'g_int_equal';
	function  g_int_hash(v:gconstpointer):guint; name 'g_int_hash';
	
	function  g_direct_hash(v:gconstpointer):guint; name 'g_direct_hash';
	function  g_direct_equal(v:gconstpointer; v2:gconstpointer):gint; name 'g_direct_equal';
	
	function  g_quark_try_string(thestring:Pgchar):TGQuark; name 'g_quark_try_string';
	function  g_quark_from_static_string(thestring:Pgchar):TGQuark; name 'g_quark_from_static_string';
	function  g_quark_from_string(thestring:Pgchar):TGQuark; name 'g_quark_from_string';
	function  g_quark_to_string(quark:TGQuark):Pgchar; name 'g_quark_to_string';
	
	procedure g_datalist_init(datalist:PPGData); name 'g_datalist_init';
	procedure g_datalist_clear(datalist:PPGData); name 'g_datalist_clear';
	function  g_datalist_id_get_data(datalist:PPGData; key_id:TGQuark):gpointer; name 'g_datalist_id_get_data';
	procedure g_datalist_id_set_data_full(datalist:PPGData; key_id:TGQuark; data:gpointer; destroy_func:TGDestroyNotify); name 'g_datalist_id_set_data_full';
	procedure g_datalist_id_remove_no_notify(datalist:PPGData; key_id:TGQuark); name 'g_datalist_id_remove_no_notify';
	procedure g_datalist_foreach(datalist:PPGData; func:TGDataForeachFunc; user_data:gpointer); name 'g_datalist_foreach';
	
	procedure g_dataset_destroy(dataset_location:gconstpointer); name 'g_dataset_destroy';
	function  g_dataset_id_get_data(dataset_location:gconstpointer; key_id:TGQuark):gpointer; name 'g_dataset_id_get_data';
	procedure g_dataset_id_set_data_full(dataset_location:gconstpointer; key_id:TGQuark; data:gpointer; destroy_func:TGDestroyNotify); name 'g_dataset_id_set_data_full';
	procedure g_dataset_id_remove_no_notify(dataset_location:gconstpointer; key_id:TGQuark); name 'g_dataset_id_remove_no_notify';
	procedure g_dataset_foreach(dataset_location:gconstpointer; func:TGDataForeachFunc; user_data:gpointer); name 'g_dataset_foreach';
	
	function  g_scanner_new(config_templ:PGScannerConfig):PGScanner; name 'g_scanner_new';
	procedure g_scanner_destroy(scanner:PGScanner); name 'g_scanner_destroy';
	procedure g_scanner_input_file(scanner:PGScanner; input_fd:gint); name 'g_scanner_input_file';
	procedure g_scanner_sync_file_offset(scanner:PGScanner); name 'g_scanner_sync_file_offset';
	procedure g_scanner_input_text(scanner:PGScanner; text:Pgchar; text_len:guint); name 'g_scanner_input_text';
	function  g_scanner_get_next_token(scanner:PGScanner):TGTokenType; name 'g_scanner_get_next_token';
	function  g_scanner_peek_next_token(scanner:PGScanner):TGTokenType; name 'g_scanner_peek_next_token';
	function  g_scanner_cur_token(scanner:PGScanner):TGTokenType; name 'g_scanner_cur_token';
	function  g_scanner_cur_value(scanner:PGScanner):TGTokenValue; name 'g_scanner_cur_value';
	function  g_scanner_cur_line(scanner:PGScanner):guint; name 'g_scanner_cur_line';
	function  g_scanner_cur_position(scanner:PGScanner):guint; name 'g_scanner_cur_position';
	function  g_scanner_eof(scanner:PGScanner):gboolean; name 'g_scanner_eof';
	function  g_scanner_set_scope(scanner:PGScanner; scope_id:guint):guint; name 'g_scanner_set_scope';
	procedure g_scanner_scope_add_symbol(scanner:PGScanner; scope_id:guint; symbol:Pgchar; _value:gpointer); name 'g_scanner_scope_add_symbol';
	procedure g_scanner_scope_remove_symbol(scanner:PGScanner; scope_id:guint; symbol:Pgchar); name 'g_scanner_scope_remove_symbol';
	function  g_scanner_scope_lookup_symbol(scanner:PGScanner; scope_id:guint; symbol:Pgchar):gpointer; name 'g_scanner_scope_lookup_symbol';
	procedure g_scanner_scope_foreach_symbol(scanner:PGScanner; scope_id:guint; func:TGHFunc; user_data:gpointer); name 'g_scanner_scope_foreach_symbol';
	function  g_scanner_lookup_symbol(scanner:PGScanner; symbol:Pgchar):gpointer; name 'g_scanner_lookup_symbol';
	procedure g_scanner_freeze_symbol_table(scanner:PGScanner); name 'g_scanner_freeze_symbol_table';
	procedure g_scanner_thaw_symbol_table(scanner:PGScanner); name 'g_scanner_thaw_symbol_table';
	procedure g_scanner_unexp_token(scanner:PGScanner; expected_token:TGTokenType; identifier_spec:Pgchar; symbol_spec:Pgchar; symbol_name:Pgchar; message:Pgchar; is_error:gint); name 'g_scanner_unexp_token';
	function  g_scanner_stat_mode(filename:Pgchar):gint; name 'g_scanner_stat_mode';
	function  g_completion_new(func:TGCompletionFunc):PGCompletion; name 'g_completion_new';
	procedure g_completion_add_items(cmp:PGCompletion; items:PGList); name 'g_completion_add_items';
	procedure g_completion_remove_items(cmp:PGCompletion; items:PGList); name 'g_completion_remove_items';
	procedure g_completion_clear_items(cmp:PGCompletion); name 'g_completion_clear_items';
	function  g_completion_complete(cmp:PGCompletion; prefix:Pgchar; new_prefix:PPgchar):PGList; name 'g_completion_complete';
	procedure g_completion_free(cmp:PGCompletion); name 'g_completion_free';
	
	
	function  g_date_new:PGDate; name 'g_date_new';
	function  g_date_new_dmy(day:TGDateDay; month:TGDateMonth; year:TGDateYear):PGDate; name 'g_date_new_dmy';
	function  g_date_new_julian(julian_day:guint32):PGDate; name 'g_date_new_julian';
	procedure g_date_free(date:PGDate); name 'g_date_free';
	function  g_date_valid(date:PGDate):gboolean; name 'g_date_valid';
	function  g_date_valid_day(day:TGDateDay):gboolean; name 'g_date_valid_day';
	function  g_date_valid_month(month:TGDateMonth):gboolean; name 'g_date_valid_month';
	function  g_date_valid_year(year:TGDateYear):gboolean; name 'g_date_valid_year';
	function  g_date_valid_weekday(weekday:TGDateWeekday):gboolean; name 'g_date_valid_weekday';
	function  g_date_valid_julian(julian_date:guint32):gboolean; name 'g_date_valid_julian';
	function  g_date_valid_dmy(day:TGDateDay; month:TGDateMonth; year:TGDateYear):gboolean; name 'g_date_valid_dmy';
	function  g_date_weekday(date:PGDate):TGDateWeekday; name 'g_date_weekday';
	function  g_date_month(date:PGDate):TGDateMonth; name 'g_date_month';
	function  g_date_year(date:PGDate):TGDateYear; name 'g_date_year';
	function  g_date_day(date:PGDate):TGDateDay; name 'g_date_day';
	function  g_date_julian(date:PGDate):guint32; name 'g_date_julian';
	function  g_date_day_of_year(date:PGDate):guint; name 'g_date_day_of_year';
	function  g_date_monday_week_of_year(date:PGDate):guint; name 'g_date_monday_week_of_year';
	function  g_date_sunday_week_of_year(date:PGDate):guint; name 'g_date_sunday_week_of_year';
	procedure g_date_clear(date:PGDate; n_dates:guint); name 'g_date_clear';
	procedure g_date_set_parse(date:PGDate; str:Pgchar); name 'g_date_set_parse';
	procedure g_date_set_time(date:PGDate; time:TGTime); name 'g_date_set_time';
	procedure g_date_set_month(date:PGDate; month:TGDateMonth); name 'g_date_set_month';
	procedure g_date_set_day(date:PGDate; day:TGDateDay); name 'g_date_set_day';
	procedure g_date_set_year(date:PGDate; year:TGDateYear); name 'g_date_set_year';
	procedure g_date_set_dmy(date:PGDate; day:TGDateDay; month:TGDateMonth; y:TGDateYear); name 'g_date_set_dmy';
	procedure g_date_set_julian(date:PGDate; julian_date:guint32); name 'g_date_set_julian';
	function  g_date_is_first_of_month(date:PGDate):gboolean; name 'g_date_is_first_of_month';
	function  g_date_is_last_of_month(date:PGDate):gboolean; name 'g_date_is_last_of_month';
	procedure g_date_add_days(date:PGDate; n_days:guint); name 'g_date_add_days';
	procedure g_date_subtract_days(date:PGDate; n_days:guint); name 'g_date_subtract_days';
	procedure g_date_add_months(date:PGDate; n_months:guint); name 'g_date_add_months';
	procedure g_date_subtract_months(date:PGDate; n_months:guint); name 'g_date_subtract_months';
	procedure g_date_add_years(date:PGDate; n_years:guint); name 'g_date_add_years';
	procedure g_date_subtract_years(date:PGDate; n_years:guint); name 'g_date_subtract_years';
	function  g_date_is_leap_year(year:TGDateYear):gboolean; name 'g_date_is_leap_year';
	function  g_date_days_in_month(month:TGDateMonth; year:TGDateYear):guint8; name 'g_date_days_in_month';
	function  g_date_monday_weeks_in_year(year:TGDateYear):guint8; name 'g_date_monday_weeks_in_year';
	function  g_date_sunday_weeks_in_year(year:TGDateYear):guint8; name 'g_date_sunday_weeks_in_year';
	function  g_date_compare(lhs:PGDate; rhs:PGDate):gint; name 'g_date_compare';
	procedure g_date_to_struct_tm(date:PGDate; tm:ptm); name 'g_date_to_struct_tm';
	function  g_date_strftime(s:Pgchar; slen:gsize; format:Pgchar; date:PGDate):gsize; name 'g_date_strftime';
	function  g_relation_new(fields:gint):PGRelation; name 'g_relation_new';
	procedure g_relation_destroy(relation:PGRelation); name 'g_relation_destroy';
	procedure g_relation_index(relation:PGRelation; field:gint; hash_func:TGHashFunc; key_compare_func:TGCompareFunc); name 'g_relation_index';
	function  g_relation_delete(relation:PGRelation; key:gconstpointer; field:gint):gint; name 'g_relation_delete';
	function  g_relation_select(relation:PGRelation; key:gconstpointer; field:gint):PGTuples; name 'g_relation_select';
	function  g_relation_count(relation:PGRelation; key:gconstpointer; field:gint):gint; name 'g_relation_count';
	procedure g_relation_print(relation:PGRelation); name 'g_relation_print';
	procedure g_tuples_destroy(tuples:PGTuples); name 'g_tuples_destroy';
	function  g_tuples_index(tuples:PGTuples; index:gint; field:gint):gpointer; name 'g_tuples_index';
	
	procedure g_io_channel_init(channel:PGIOChannel); name 'g_io_channel_init';
	procedure g_io_channel_ref(channel:PGIOChannel); name 'g_io_channel_ref';
	procedure g_io_channel_unref(channel:PGIOChannel); name 'g_io_channel_unref';
	function  g_io_channel_read(channel:PGIOChannel; buf:Pgchar; p_count:guint; bytes_read:Pguint):TGIOError; name 'g_io_channel_read';
	function  g_io_channel_write(channel:PGIOChannel; buf:Pgchar; p_count:guint; bytes_written:Pguint):TGIOError; name 'g_io_channel_write';
	function  g_io_channel_seek(channel:PGIOChannel; offset:gint; thetype:TGSeekType):TGIOError; name 'g_io_channel_seek';
	procedure g_io_channel_close(channel:PGIOChannel); name 'g_io_channel_close';
	function  g_io_add_watch_full(channel:PGIOChannel; priority:gint; condition:TGIOCondition; func:TGIOFunc; user_data:gpointer; notify:TGDestroyNotify):guint; name 'g_io_add_watch_full';
	function  g_io_add_watch(channel:PGIOChannel; condition:TGIOCondition; func:TGIOFunc; user_data:gpointer):guint; name 'g_io_add_watch';
	
	function  g_source_add(priority:gint; can_recurse:gboolean; funcs:PGSourceFuncs; source_data:gpointer; user_data:gpointer; notify:TGDestroyNotify):guint; name 'g_source_add';
	function  g_source_remove(tag:guint):gboolean; name 'g_source_remove';
	function  g_source_remove_by_user_data(user_data:gpointer):gboolean; name 'g_source_remove_by_user_data';
	function  g_source_remove_by_source_data(source_data:gpointer):gboolean; name 'g_source_remove_by_source_data';
	procedure g_get_current_time(result:PGTimeVal); name 'g_get_current_time';
	function  g_main_new(is_running:gboolean):PGMainLoop; name 'g_main_new';
	procedure g_main_run(loop:PGMainLoop); name 'g_main_run';
	procedure g_main_quit(loop:PGMainLoop); name 'g_main_quit';
	procedure g_main_destroy(loop:PGMainLoop); name 'g_main_destroy';
	function  g_main_is_running(loop:PGMainLoop):gboolean; name 'g_main_is_running';
	function  g_main_iteration(may_block:gboolean):gboolean; name 'g_main_iteration';
	function  g_main_pending:gboolean; name 'g_main_pending';
	function  g_timeout_add_full(priority:gint; interval:guint; thefunction:TGSourceFunc; data:gpointer; notify:TGDestroyNotify):guint; name 'g_timeout_add_full';
	function  g_timeout_add(interval:guint; thefunction:TGSourceFunc; data:gpointer):guint; name 'g_timeout_add';
	function  g_idle_add(thefunction:TGSourceFunc; data:gpointer):guint; name 'g_idle_add';
	function  g_idle_add_full(priority:gint; thefunction:TGSourceFunc; data:gpointer; destroy:TGDestroyNotify):guint; name 'g_idle_add_full';
	function  g_idle_remove_by_data(data:gpointer):gboolean; name 'g_idle_remove_by_data';
	
	procedure g_main_add_poll(fd:PGPollFD; priority:gint); name 'g_main_add_poll';
	procedure g_main_remove_poll(fd:PGPollFD); name 'g_main_remove_poll';
	procedure g_main_set_poll_func(func:TGPollFunc); name 'g_main_set_poll_func';
	function  g_io_channel_unix_new(fd:longint):PGIOChannel; name 'g_io_channel_unix_new';
	function  g_io_channel_unix_get_fd(channel:PGIOChannel):gint; name 'g_io_channel_unix_get_fd';
end;

end public

function  g_list_previous(list : PGlist) : PGlist;
begin
  if list<>nil then
    exit((list as PGList)^.prev)
  else
     exit(nil);
end;

function  g_list_next(list : PGlist) : PGlist;
begin
  if list<>nil then
    exit((list as PGList)^.next)
  else
   exit(nil);
end;

function  g_slist_next(slist : PGSList) : PGSList;
begin
  if slist<>nil then
    exit((slist as PGSList)^.next)
  else
    exit(nil);
end;

function  G_NODE_IS_ROOT(node : PGNode) : boolean;
begin
	exit(false);
  {G_NODE_IS_ROOT:=((((PGNode(node))^.parent) = (nil and (@((PGNode(node))^.prev)))) = (nil and (@((PGNode(node))^.next)))) = nil; false;}
end;

function  G_NODE_IS_LEAF(node : PGNode) : boolean;
begin
  exit(((node as PGNode)^.children) = nil);
end;

function  g_node_append(parent,node : PGNode) : PGNode;
begin
  exit(g_node_insert_before(parent,nil,node));
end;

function  g_node_insert_data(parent: PGNode;position:gint;data:pointer) : PGNode;
begin
  exit(g_node_insert(parent,position,g_node_new(data)));
end;

function  g_node_insert_data_before(parent,sibling : PGNode;data:pointer) : PGNode;
begin
  exit(g_node_insert_before(parent,sibling,g_node_new(data)));
end;

function  g_node_prepend_data(parent:PGNode;data : pointer) : PGNode;
begin
	exit(g_node_prepend(parent,g_node_new(data)));
end;

function  g_node_append_data(parent : PGNode;data:pointer) : PGNode;
begin
	exit(g_node_insert_before(parent,nil,g_node_new(data)));
end;

function  g_node_prev_sibling(node : PGnode) : PGNode;
begin
  if node<>nil then
    exit((node as PGNode)^.prev)
  else
    exit(nil);
end;

function  g_node_next_sibling(node : PGNode) : PGNode;
begin
  if node<>nil then
   	exit((node as PGNode)^.next)
  else
		exit(nil);
end;

function  g_node_first_child(node : PGNode) : PGNode;
begin
  if node<>nil then
		exit((node as PGNode)^.children)
  else
    exit(nil);
end;

function G_HOOK_DEFERRED_DESTROY : TGHookFreeFunc;
begin
	exit(($01 as long) as TGHookFreeFunc);
end;

function  is_setup(var a : TGHookList) : guint;
begin
	exit((a.flag0 and bm_TGHookList_is_setup) shr bp_TGHookList_is_setup);
end;

procedure set_is_setup(var a : TGHookList; __is_setup : guint);
begin
         a.flag0:=a.flag0 or ((__is_setup shl bp_TGHookList_is_setup) and bm_TGHookList_is_setup);
end;

function  G_HOOK_ACTIVE(hook : PGHook) : boolean;
begin
  exit((hook^.flags and  (G_HOOK_FLAG_ACTIVE as long)) <> 0);
end;

function  G_HOOK_IN_CALL(hook : PGHook) : boolean;
begin
	exit(((hook^.flags) and (G_HOOK_FLAG_IN_CALL as long)) <> 0);
end;

function  G_HOOK_IS_VALID(hook : PGHook) : boolean;
begin
	exit((hook^.hook_id<>0) and G_HOOK_ACTIVE(hook));
end;

function  G_HOOK_IS_UNLINKED(hook : PGHook) : boolean;
begin
	exit((hook^.next=nil) and (hook^.prev=nil) and (hook^.hook_id=0) and (hook^.ref_count = 0));
end;

procedure g_hook_append(hook_list:PGhooklist;hook : PGHook);
begin
  g_hook_insert_before(hook_list,nil,hook);
end;

{$ifndef gtkwin}
{function  g_strstrip(thestring : Pgchar) : Pgchar;
begin
  exit(g_strchomp(g_strchug(thestring)));
end;}
{$endif}

function  g_array_append_val(a:PGArray;v : longint) : PGarray;
begin
 exit(g_array_append_vals(a,@(v),1));
end;

function  g_array_prepend_val(a:PGArray;v : longint) : PGarray;
begin
  exit(g_array_prepend_vals(a,@(v),1));
end;

function  g_array_insert_val(a:PGArray;i:guint;v : longint) : PGarray;
begin
  exit(g_array_insert_vals(a,i,@(v),1));
end;

procedure g_datalist_id_set_data(dl:PPGdata;q:TGQuark;d : pointer);
begin
  g_datalist_id_set_data_full(dl,q,d,nil);
end;

procedure g_datalist_id_remove_data(dl:PPGData;q:TGQuark);
begin
  g_datalist_id_set_data(dl,q,nil);
end;

function  g_datalist_Get_data(dl:PPGData;k : Pgchar):gpointer;
begin
  exit(g_datalist_id_get_data(dl,g_quark_try_string(k)));
end;

procedure g_datalist_set_data_full(dl:PPGData;k:Pgchar;d:gpointer;f : TGdestroynotify);
begin
  g_datalist_id_set_data_full(dl,g_quark_from_string(k),d,f);
end;


procedure g_datalist_remove_no_notify(dl:PPGdata;k : Pgchar);
begin
  g_datalist_id_remove_no_notify(dl,g_quark_try_string(k));
end;

procedure g_datalist_set_data(dl:PPGdata;k:Pgchar;d : pointer);
begin
  g_datalist_set_data_full(dl,k,d,nil);
end;

procedure g_datalist_remove_data(dl:PPGdata;k : Pgchar);
begin
  g_datalist_id_set_data(dl,g_quark_try_string(k),nil);
end;

procedure g_dataset_id_set_data(l:gconstpointer;k:TGQuark;d : gconstpointer);
begin
  g_dataset_id_set_data_full(l,k,d,nil);
end;

procedure g_dataset_id_remove_data(l : gconstpointer;k:TGQuark);
begin
  g_dataset_id_set_data(l,k,nil);
end;

function  g_dataset_get_data(l : gconstpointer;k:Pgchar) : gconstpointer;
begin
  exit(g_dataset_id_get_data(l,g_quark_try_string(k)));
end;

procedure g_dataset_set_data_full(l:gconstpointer;k:Pgchar;d:pointer;f : TGDestroynotify);
begin
  g_dataset_id_set_data_full(l,g_quark_from_string(k),d,f);
end;

procedure g_dataset_remove_no_notify(l : gconstpointer;k:Pgchar);
begin
  g_dataset_id_remove_no_notify(l,g_quark_try_string(k));
end;

procedure g_dataset_set_data(l:gconstpointer;k:Pgchar;d:pointer);
begin
  g_dataset_set_data_full(l,k,d,nil);
end;

procedure g_dataset_remove_data(l : gconstpointer;k:Pgchar);
begin
  g_dataset_id_set_data(l,g_quark_try_string(k),nil);
end;

function  case_sensitive(var a : TGScannerConfig) : guint;
      begin
         exit((a.flag0 and bm_TGScannerConfig_case_sensitive) shr bp_TGScannerConfig_case_sensitive);
      end;

procedure set_case_sensitive(var a : TGScannerConfig; __case_sensitive : guint);
      begin
         a.flag0:=a.flag0 or ((__case_sensitive shl bp_TGScannerConfig_case_sensitive) and bm_TGScannerConfig_case_sensitive);
      end;

function  skip_comment_multi(var a : TGScannerConfig) : guint;
      begin
         exit((a.flag0 and bm_TGScannerConfig_skip_comment_multi) shr bp_TGScannerConfig_skip_comment_multi);
      end;

procedure set_skip_comment_multi(var a : TGScannerConfig; __skip_comment_multi : guint);
      begin
         a.flag0:=a.flag0 or ((__skip_comment_multi shl bp_TGScannerConfig_skip_comment_multi) and bm_TGScannerConfig_skip_comment_multi);
      end;

function  skip_comment_single(var a : TGScannerConfig) : guint;
      begin
      	exit((a.flag0 and bm_TGScannerConfig_skip_comment_single) shr bp_TGScannerConfig_skip_comment_single);
      end;

procedure set_skip_comment_single(var a : TGScannerConfig; __skip_comment_single : guint);
      begin
         a.flag0:=a.flag0 or ((__skip_comment_single shl bp_TGScannerConfig_skip_comment_single) and bm_TGScannerConfig_skip_comment_single);
      end;

function  scan_comment_multi(var a : TGScannerConfig) : guint;
      begin
        exit((a.flag0 and bm_TGScannerConfig_scan_comment_multi) shr bp_TGScannerConfig_scan_comment_multi);
      end;

procedure set_scan_comment_multi(var a : TGScannerConfig; __scan_comment_multi : guint);
      begin
         a.flag0:=a.flag0 or ((__scan_comment_multi shl bp_TGScannerConfig_scan_comment_multi) and bm_TGScannerConfig_scan_comment_multi);
      end;

function  scan_identifier(var a : TGScannerConfig) : guint;
      begin
      	exit((a.flag0 and bm_TGScannerConfig_scan_identifier) shr bp_TGScannerConfig_scan_identifier);
      end;

procedure set_scan_identifier(var a : TGScannerConfig; __scan_identifier : guint);
      begin
         a.flag0:=a.flag0 or ((__scan_identifier shl bp_TGScannerConfig_scan_identifier) and bm_TGScannerConfig_scan_identifier);
      end;

function  scan_identifier_1char(var a : TGScannerConfig) : guint;
      begin
         exit((a.flag0 and bm_TGScannerConfig_scan_identifier_1char) shr bp_TGScannerConfig_scan_identifier_1char);
      end;

procedure set_scan_identifier_1char(var a : TGScannerConfig; __scan_identifier_1char : guint);
      begin
         a.flag0:=a.flag0 or ((__scan_identifier_1char shl bp_TGScannerConfig_scan_identifier_1char) and bm_TGScannerConfig_scan_identifier_1char);
      end;

function  scan_identifier_NULL(var a : TGScannerConfig) : guint;
begin
         exit((a.flag0 and bm_TGScannerConfig_scan_identifier_NULL) shr bp_TGScannerConfig_scan_identifier_NULL);
end;

procedure set_scan_identifier_NULL(var a : TGScannerConfig; __scan_identifier_NULL : guint);
begin
   a.flag0:=a.flag0 or ((__scan_identifier_NULL shl bp_TGScannerConfig_scan_identifier_NULL) and bm_TGScannerConfig_scan_identifier_NULL);
end;

function  scan_symbols(var a : TGScannerConfig) : guint;
begin
	exit((a.flag0 and bm_TGScannerConfig_scan_symbols) shr bp_TGScannerConfig_scan_symbols);
end;

procedure set_scan_symbols(var a : TGScannerConfig; __scan_symbols : guint);
begin
         a.flag0:=a.flag0 or ((__scan_symbols shl bp_TGScannerConfig_scan_symbols) and bm_TGScannerConfig_scan_symbols);
end;

function  scan_binary(var a : TGScannerConfig) : guint;
begin
	exit((a.flag0 and bm_TGScannerConfig_scan_binary) shr bp_TGScannerConfig_scan_binary);
end;

procedure set_scan_binary(var a : TGScannerConfig; __scan_binary : guint);
begin
         a.flag0:=a.flag0 or ((__scan_binary shl bp_TGScannerConfig_scan_binary) and bm_TGScannerConfig_scan_binary);
end;

function  scan_octal(var a : TGScannerConfig) : guint;
begin
	exit((a.flag0 and bm_TGScannerConfig_scan_octal) shr bp_TGScannerConfig_scan_octal);
end;

procedure set_scan_octal(var a : TGScannerConfig; __scan_octal : guint);
      begin
         a.flag0:=a.flag0 or ((__scan_octal shl bp_TGScannerConfig_scan_octal) and bm_TGScannerConfig_scan_octal);
      end;

function  scan_float(var a : TGScannerConfig) : guint;
begin
   exit((a.flag0 and bm_TGScannerConfig_scan_float) shr bp_TGScannerConfig_scan_float);
end;

procedure set_scan_float(var a : TGScannerConfig; __scan_float : guint);
begin
	a.flag0:=a.flag0 or ((__scan_float shl bp_TGScannerConfig_scan_float) and bm_TGScannerConfig_scan_float);
end;

function  scan_hex(var a : TGScannerConfig) : guint;
begin
	exit((a.flag0 and bm_TGScannerConfig_scan_hex) shr bp_TGScannerConfig_scan_hex);
end;

procedure set_scan_hex(var a : TGScannerConfig; __scan_hex : guint);
      begin
         a.flag0:=a.flag0 or ((__scan_hex shl bp_TGScannerConfig_scan_hex) and bm_TGScannerConfig_scan_hex);
      end;

function  scan_hex_dollar(var a : TGScannerConfig) : guint;
      begin
         exit((a.flag0 and bm_TGScannerConfig_scan_hex_dollar) shr bp_TGScannerConfig_scan_hex_dollar);
      end;

procedure set_scan_hex_dollar(var a : TGScannerConfig; __scan_hex_dollar : guint);
      begin
         a.flag0:=a.flag0 or ((__scan_hex_dollar shl bp_TGScannerConfig_scan_hex_dollar) and bm_TGScannerConfig_scan_hex_dollar);
      end;

function  scan_string_sq(var a : TGScannerConfig) : guint;
      begin
         exit((a.flag0 and bm_TGScannerConfig_scan_string_sq) shr bp_TGScannerConfig_scan_string_sq);
      end;

procedure set_scan_string_sq(var a : TGScannerConfig; __scan_string_sq : guint);
      begin
         a.flag0:=a.flag0 or ((__scan_string_sq shl bp_TGScannerConfig_scan_string_sq) and bm_TGScannerConfig_scan_string_sq);
      end;

function  scan_string_dq(var a : TGScannerConfig) : guint;
      begin
         exit((a.flag0 and bm_TGScannerConfig_scan_string_dq) shr bp_TGScannerConfig_scan_string_dq);
      end;

procedure set_scan_string_dq(var a : TGScannerConfig; __scan_string_dq : guint);
      begin
         a.flag0:=a.flag0 or ((__scan_string_dq shl bp_TGScannerConfig_scan_string_dq) and bm_TGScannerConfig_scan_string_dq);
      end;

function  numbers_2_int(var a : TGScannerConfig) : guint;
      begin
         exit((a.flag0 and bm_TGScannerConfig_numbers_2_int) shr bp_TGScannerConfig_numbers_2_int);
      end;

procedure set_numbers_2_int(var a : TGScannerConfig; __numbers_2_int : guint);
      begin
         a.flag0:=a.flag0 or ((__numbers_2_int shl bp_TGScannerConfig_numbers_2_int) and bm_TGScannerConfig_numbers_2_int);
      end;

function  int_2_float(var a : TGScannerConfig) : guint;
      begin
         exit((a.flag0 and bm_TGScannerConfig_int_2_float) shr bp_TGScannerConfig_int_2_float);
      end;

procedure set_int_2_float(var a : TGScannerConfig; __int_2_float : guint);
      begin
         a.flag0:=a.flag0 or ((__int_2_float shl bp_TGScannerConfig_int_2_float) and bm_TGScannerConfig_int_2_float);
      end;

function  identifier_2_string(var a : TGScannerConfig) : guint;
      begin
         exit((a.flag0 and bm_TGScannerConfig_identifier_2_string) shr bp_TGScannerConfig_identifier_2_string);
      end;

procedure set_identifier_2_string(var a : TGScannerConfig; __identifier_2_string : guint);
      begin
         a.flag0:=a.flag0 or ((__identifier_2_string shl bp_TGScannerConfig_identifier_2_string) and bm_TGScannerConfig_identifier_2_string);
      end;


function  char_2_token(var a : TGScannerConfig) : guint;
      begin
         exit((a.flag0 and bm_TGScannerConfig_char_2_token) shr bp_TGScannerConfig_char_2_token);
      end;



procedure set_char_2_token(var a : TGScannerConfig; __char_2_token : guint);
      begin
         a.flag0:=a.flag0 or ((__char_2_token shl bp_TGScannerConfig_char_2_token) and bm_TGScannerConfig_char_2_token);
      end;

function  symbol_2_token(var a : TGScannerConfig) : guint;
      begin
         exit((a.flag0 and bm_TGScannerConfig_symbol_2_token) shr bp_TGScannerConfig_symbol_2_token);
      end;

procedure set_symbol_2_token(var a : TGScannerConfig; __symbol_2_token : guint);
      begin
         a.flag0:=a.flag0 or ((__symbol_2_token shl bp_TGScannerConfig_symbol_2_token) and bm_TGScannerConfig_symbol_2_token);
      end;

function  scope_0_fallback(var a : TGScannerConfig) : guint;
      begin
      	exit((a.flag0 and bm_TGScannerConfig_scope_0_fallback) shr bp_TGScannerConfig_scope_0_fallback);
      end;

procedure set_scope_0_fallback(var a : TGScannerConfig; __scope_0_fallback : guint);
      begin
         a.flag0:=a.flag0 or ((__scope_0_fallback shl bp_TGScannerConfig_scope_0_fallback) and bm_TGScannerConfig_scope_0_fallback);
      end;

function  julian_days(var a : TGDate) : guint;
     begin
      	exit((a.flag0 and bm_TGDate_julian_days) shr bp_TGDate_julian_days);
     end;

procedure set_julian_days(var a : TGDate; __julian_days : guint);
      begin
         a.flag0:=a.flag0 or ((__julian_days shl bp_TGDate_julian_days) and bm_TGDate_julian_days);
      end;

function  julian(var a : TGDate) : guint;
      begin
       	exit((a.flag0 and bm_TGDate_julian) shr bp_TGDate_julian);
      end;

procedure set_julian(var a : TGDate; __julian : guint);
      begin
         a.flag0:=a.flag0 or ((__julian shl bp_TGDate_julian) and bm_TGDate_julian);
      end;

function  dmy(var a : TGDate) : guint;
      begin
         exit((a.flag0 and bm_TGDate_dmy) shr bp_TGDate_dmy);
      end;

procedure set_dmy(var a : TGDate; __dmy : guint);
      begin
         a.flag0:=a.flag0 or ((__dmy shl bp_TGDate_dmy) and bm_TGDate_dmy);
      end;

function  day(var a : TGDate) : guint;
      begin
         exit((a.flag0 and bm_TGDate_day) shr bp_TGDate_day);
      end;

procedure set_day(var a : TGDate; __day : guint);
      begin
         a.flag0:=a.flag0 or ((__day shl bp_TGDate_day) and bm_TGDate_day);
      end;

function  month(var a : TGDate) : guint;
      begin
         exit((a.flag0 and bm_TGDate_month) shr bp_TGDate_month);
      end;

procedure set_month(var a : TGDate; __month : guint);
begin
	a.flag0:=a.flag0 or ((__month shl bp_TGDate_month) and bm_TGDate_month);
end;

function  year(var a : TGDate) : guint;
begin
	exit((a.flag0 and bm_TGDate_year) shr bp_TGDate_year);
end;

procedure set_year(var a : TGDate; __year : guint);
      begin
         a.flag0:=a.flag0 or ((__year shl bp_TGDate_year) and bm_TGDate_year);
      end;

end.

