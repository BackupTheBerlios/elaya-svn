unit;
	uses glib,gdk;

public

  
  const
    gtkdll='gtk';
 
 
     GTK_MAJOR_VERSION_CONST = 1;
     GTK_MINOR_VERSION_CONST = 2;
     GTK_MICRO_VERSION_CONST = 5;
     GTK_BINARY_AGE_CONST = 2;
     GTK_INTERFACE_AGE_CONST = 0;
function  GTK_CHECK_VERSION(major,minor,micro:longint):boolean;
 
 
 
 
type
     PGtkArrowType = ptr TGtkArrowType;
     TGtkArrowType = longint;
const
     GTK_ARROW_UP = 0;
     GTK_ARROW_DOWN = 1;
     GTK_ARROW_LEFT = 2;
     GTK_ARROW_RIGHT = 3;
type
     PGtkAttachOptions = ptr TGtkAttachOptions;
     TGtkAttachOptions = longint;
const
     GTK_EXPAND = 1 shl 0;
     GTK_SHRINK = 1 shl 1;
     GTK_FILL = 1 shl 2;
type
     PGtkButtonBoxStyle = ptr TGtkButtonBoxStyle;
     TGtkButtonBoxStyle = longint;
const
     GTK_BUTTONBOX_DEFAULT_STYLE = 0;
     GTK_BUTTONBOX_SPREAD = 1;
     GTK_BUTTONBOX_EDGE = 2;
     GTK_BUTTONBOX_START = 3;
     GTK_BUTTONBOX_END =4;
type
     PGtkCurveType = ptr TGtkCurveType;
     TGtkCurveType = longint;
const
     GTK_CURVE_TYPE_LINEAR = 0;
     GTK_CURVE_TYPE_SPLINE = 1;
     GTK_CURVE_TYPE_FREE = 2;
type
     PGtkDirectionType = ptr TGtkDirectionType;
     TGtkDirectionType = longint;
const
     GTK_DIR_TAB_FORWARD = 0;
     GTK_DIR_TAB_BACKWARD = 1;
     GTK_DIR_UP = 2;
     GTK_DIR_DOWN = 3;
     GTK_DIR_LEFT = 4;
     GTK_DIR_RIGHT = 5;
type
     PGtkJustification = ptr TGtkJustification;
     TGtkJustification = longint;
const
     GTK_JUSTIFY_LEFT = 0;
     GTK_JUSTIFY_RIGHT = 1;
     GTK_JUSTIFY_CENTER = 2;
     GTK_JUSTIFY_FILL = 3;
type
     PGtkMatchType = ptr TGtkMatchType;
     TGtkMatchType = longint;
const
     GTK_MATCH_ALL = 0;
     GTK_MATCH_ALL_TAIL = 1;
     GTK_MATCH_HEAD = 2;
     GTK_MATCH_TAIL = 3;
     GTK_MATCH_EXACT = 4;
     GTK_MATCH_LAST = 5;
type
     PGtkMenuDirectionType = ptr TGtkMenuDirectionType;
     TGtkMenuDirectionType = longint;
const
     GTK_MENU_DIR_PARENT = 0;
     GTK_MENU_DIR_CHILD = 1;
     GTK_MENU_DIR_NEXT = 2;
     GTK_MENU_DIR_PREV = 3;
type
     PGtkMenuFactoryType = ptr TGtkMenuFactoryType;
     TGtkMenuFactoryType = longint;
const
     GTK_MENU_FACTORY_MENU = 0;
     GTK_MENU_FACTORY_MENU_BAR = 1;
     GTK_MENU_FACTORY_OPTION_MENU = 2;
type
     PGtkMetricType = ptr TGtkMetricType;
     TGtkMetricType = longint;
const
     GTK_PIXELS = 0;
     GTK_INCHES = 1;
     GTK_CENTIMETERS = 2;
type
     PGtkOrientation = ptr TGtkOrientation;
     TGtkOrientation = longint;
const
     GTK_ORIENTATION_HORIZONTAL = 0;
     GTK_ORIENTATION_VERTICAL = 1;
type
     PGtkCornerType = ptr TGtkCornerType;
     TGtkCornerType = longint;
const
     GTK_CORNER_TOP_LEFT = 0;
     GTK_CORNER_BOTTOM_LEFT = 1;
     GTK_CORNER_TOP_RIGHT = 2;
     GTK_CORNER_BOTTOM_RIGHT =3;
type
     PGtkPackType = ptr TGtkPackType;
     TGtkPackType = longint;
const
     GTK_PACK_START = 0;
     GTK_PACK_END = 1;
type
     PGtkPathPriorityType = ptr TGtkPathPriorityType;
     TGtkPathPriorityType = longint;
const
     GTK_PATH_PRIO_LOWEST = 0;
     GTK_PATH_PRIO_GTK = 4;
     GTK_PATH_PRIO_APPLICATION = 8;
     GTK_PATH_PRIO_RC = 12;
     GTK_PATH_PRIO_HIGHEST = 15;
     GTK_PATH_PRIO_MASK = GTK_PATH_PRIO_HIGHEST;
type
     PGtkPathType = ptr TGtkPathType;
     TGtkPathType = longint;
const
     GTK_PATH_WIDGET = 0;
     GTK_PATH_WIDGET_CLASS = 1;
     GTK_PATH_CLASS = 2;
type
     PGtkPolicyType = ptr TGtkPolicyType;
     TGtkPolicyType = longint;
const
     GTK_POLICY_ALWAYS = 0;
     GTK_POLICY_AUTOMATIC = 1;
     GTK_POLICY_NEVER = 2;
type
     PGtkPositionType = ptr TGtkPositionType;
     TGtkPositionType = longint;
const
     GTK_POS_LEFT = 0;
     GTK_POS_RIGHT = 1;
     GTK_POS_TOP = 2;
     GTK_POS_BOTTOM = 3;
type
     PGtkPreviewType = ptr TGtkPreviewType;
     TGtkPreviewType = longint;
const
     GTK_PREVIEW_COLOR = 0;
     GTK_PREVIEW_GRAYSCALE = 1;
type
     PGtkReliefStyle = ptr TGtkReliefStyle;
     TGtkReliefStyle = longint;
const
     GTK_RELIEF_NORMAL = 0;
     GTK_RELIEF_HALF = 1;
     GTK_RELIEF_NONE = 2;
type
     PGtkResizeMode = ptr TGtkResizeMode;
     TGtkResizeMode = longint;
const
     GTK_RESIZE_PARENT = 0;
     GTK_RESIZE_QUEUE = 1;
     GTK_RESIZE_IMMEDIATE = 2;
type
     PGtkSignalRunType = ptr TGtkSignalRunType;
     TGtkSignalRunType = longint;
const
     GTK_RUN_FIRST = 1 shl 0;
     GTK_RUN_LAST = 1 shl 1;
     GTK_RUN_BOTH = 3;
     GTK_RUN_NO_RECURSE = 1 shl 2;
     GTK_RUN_ACTION = 1 shl 3;
     GTK_RUN_NO_HOOKS = 1 shl 4;
type
     PGtkScrollType = ptr TGtkScrollType;
     TGtkScrollType = longint;
const
     GTK_SCROLL_NONE = 0;
     GTK_SCROLL_STEP_BACKWARD = 1;
     GTK_SCROLL_STEP_FORWARD = 2;
     GTK_SCROLL_PAGE_BACKWARD = 3;
     GTK_SCROLL_PAGE_FORWARD = 4;
     GTK_SCROLL_JUMP = 5;
type
     PGtkSelectionMode = ptr TGtkSelectionMode;
     TGtkSelectionMode = longint;
const
     GTK_SELECTION_SINGLE = 0;
     GTK_SELECTION_BROWSE = 1;
     GTK_SELECTION_MULTIPLE = 2;
     GTK_SELECTION_EXTENDED = 3;
type
     PGtkShadowType = ptr TGtkShadowType;
     TGtkShadowType = longint;
const
     GTK_SHADOW_NONE = 0;
     GTK_SHADOW_IN = 1;
     GTK_SHADOW_OUT = 2;
     GTK_SHADOW_ETCHED_IN = 3;
     GTK_SHADOW_ETCHED_OUT = 4;
type
     PGtkStateType = ptr TGtkStateType;
     TGtkStateType = longint;
const
     GTK_STATE_NORMAL = 0;
     GTK_STATE_ACTIVE = 1;
     GTK_STATE_PRELIGHT = 2;
     GTK_STATE_SELECTED = 3;
     GTK_STATE_INSENSITIVE = 4;
type
     PGtkSubmenuDirection = ptr TGtkSubmenuDirection;
     TGtkSubmenuDirection = longint;
const
     GTK_DIRECTION_LEFT = 0;
     GTK_DIRECTION_RIGHT = 1;
type
     PGtkSubmenuPlacement = ptr TGtkSubmenuPlacement;
     TGtkSubmenuPlacement = longint;
const
     GTK_TOP_BOTTOM = 0;
     GTK_LEFT_RIGHT = 1;
type
     PGtkToolbarStyle = ptr TGtkToolbarStyle;
     TGtkToolbarStyle = longint;
const
     GTK_TOOLBAR_ICONS = 0;
     GTK_TOOLBAR_TEXT = 1;
     GTK_TOOLBAR_BOTH = 2;
type
     PGtkTroughType = ptr TGtkTroughType;
     TGtkTroughType = longint;
const
     GTK_TROUGH_NONE = 0;
     GTK_TROUGH_START = 1;
     GTK_TROUGH_END = 2;
     GTK_TROUGH_JUMP = 3;
type
     PGtkUpdateType = ptr TGtkUpdateType;
     TGtkUpdateType = longint;
const
     GTK_UPDATE_CONTINUOUS = 0;
     GTK_UPDATE_DISCONTINUOUS = 1;
     GTK_UPDATE_DELAYED = 2;
type
     PGtkVisibility = ptr TGtkVisibility;
     TGtkVisibility = longint;
const
     GTK_VISIBILITY_NONE = 0;
     GTK_VISIBILITY_PARTIAL = 1;
     GTK_VISIBILITY_FULL = 2;
type
     PGtkWindowPosition = ptr TGtkWindowPosition;
     TGtkWindowPosition = longint;
const
     GTK_WIN_POS_NONE = 0;
     GTK_WIN_POS_CENTER = 1;
     GTK_WIN_POS_MOUSE = 2;
type
     PGtkWindowType = ptr TGtkWindowType;
     TGtkWindowType = longint;
const
     GTK_WINDOW_TOPLEVEL = 0;
     GTK_WINDOW_DIALOG = 1;
     GTK_WINDOW_POPUP = 2;
type
     PGtkSortType = ptr TGtkSortType;
     TGtkSortType = longint;
const
     GTK_SORT_ASCENDING = 0;
     GTK_SORT_DESCENDING = 1;
 
 
 
   type


       TGtkType = guint;
       PGtkType = ptr TGtkType;
       PGtkArg = ptr TGtkArg;
       PGtkTypeClass = ptr TGtkTypeClass;
       PGtkObject = ptr TGtkObject;
       PGtkObjectClass = ptr TGtkObjectClass;

       TGtkClassInitFunc = procedure (klass:gpointer);cdecl;
       TGtkObjectInitFunc = procedure (theobject:gpointer; klass:gpointer);cdecl;
       TGtkSignalFunc = procedure ;cdecl;
       TGtkfunction = function (data:gpointer):gint;cdecl;
       TGtkDestroyNotify = procedure (data:gpointer);cdecl;
       TGtkCallbackMarshal = procedure (theobject:PGtkObject; data:gpointer; n_args:guint; args:PGtkArg);cdecl;
       TGtkSignalMarshaller = procedure (theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg);cdecl;
       TGtkArgGetFunc = procedure (_para1:PGtkObject; _para2:PGtkArg; _para3:guint);cdecl;
       TGtkArgSetFunc = procedure (_para1:PGtkObject; _para2:PGtkArg; _para3:guint);cdecl;

 
       GTK_SIGNAL_FUNC = TGtkSignalFunc;
       PGtkTypeObject = ptr TGtkTypeObject;
       TGtkTypeObject = record
            klass : PGtkTypeClass;
       end;
       TGtkTypeClass = record
            thetype : TGtkType;
         end;
       TGtkArg = record
            thetype : TGtkType;
            ArgName : Pgchar;
            d :union
                    char_data : gchar;
                    uchar_data : guchar;
                   bool_data : gboolean;
                   int_data : gint;
                   uint_data : guint;
                   long_data : glong;
                   ulong_data : gulong;
                   float_data : gfloat;
                   double_data : gdouble;
                   string_data : Pgchar;
                   pointer_data : gpointer;
                   object_data : PGtkObject;
                   signal_data : record
                        f : TGtkSignalFunc;
                        d : gpointer;
                   end;
                   args_data : record
                        n_args : gint;
                        args : PGtkArg;
                    end ;
                    callback_data : record
                        marshal : TGtkCallbackMarshal;
                        data : gpointer;
                        notify : TGtkDestroyNotify;
                     end ;
                   c_callback_data : record
                        func : TGtkfunction;
                        func_data : gpointer;
                     end;
                   foreign_data : record
                        data : gpointer;
                        notify : TGtkDestroyNotify;
                     end ;
                end;
         end;
 
     PGtkArgInfo = ptr TGtkArgInfo;
     PPGtkArgInfo = ptr PGtkArgInfo;
     TGtkArgInfo = record
          class_type : TGtkType;
          ArgName : Pgchar;
          _type : TGtkType;
          arg_flags : guint;
          full_name : Pgchar;
          arg_id : guint;
          seq_id : guint;
       end;
 
       TGtkObject = record
            klass : PGtkObjectClass;
            flags : guint32;
            ref_count : guint;
            object_data : PGData;
         end;
       TGtkObjectClass = record
            thetype : TGtkType;
            signals : Pguint;
            nsignals : guint;
            n_args : guint;
            construct_args : PGSList;
            set_arg : procedure (theobject:PGtkObject; arg:PGtkArg; arg_id:guint);cdecl;
            get_arg : procedure (theobject:PGtkObject; arg:PGtkArg; arg_id:guint);cdecl;
            shutdown : procedure (theobject:PGtkObject);cdecl;
            destroy : procedure (theobject:PGtkObject);cdecl;
            finalize : procedure (theobject:PGtkObject);cdecl;
         end;
     TGtkObjectFlags = longint;

const
     GTK_DESTROYED = 1 shl 0;
     GTK_FLOATING = 1 shl 1;
     GTK_CONNECTED = 1 shl 2;
     GTK_CONSTRUCTED = 1 shl 3;
Type
  GTK_OBJECT = PGtkObject;
  GTK_OBJECT_CLASS = PGtkObjectClass;
function  GTK_OBJECT_TYPE(obj : PGtkobject) : TGtkType;
function  GTK_OBJECT_SIGNALS(obj : PGtkobject) : Pguint;
function  GTK_OBJECT_NSIGNALS(obj : PGtkobject) : guint;
function  GTK_OBJECT_FLAGS(obj : PGtkobject) : longint;
function  GTK_OBJECT_DESTROYED(obj : PGtkobject) : boolean;
function  GTK_OBJECT_FLOATING(obj : PGtkobject) : boolean;
function  GTK_OBJECT_CONNECTED(obj : PGtkobject) : boolean;
function  GTK_OBJECT_IS_CONSTRUCTED(obj : PGtkobject) : boolean;
function  GTK_IS_OBJECT(obj:pointer):boolean;
function  GTK_IS_OBJECT_CLASS(klass:pointer):boolean;
 
 
 
 
 
  type
     PGtkFlagValue = pointer;
     TGtkFundamentalType = longint;
const
     GTK_TYPE_INVALID = 0;
     GTK_TYPE_NONE = 1;
     GTK_TYPE_CHAR = 2;
       GTK_TYPE_UCHAR = 3;
       GTK_TYPE_BOOL = 4;
       GTK_TYPE_INT = 5;
       GTK_TYPE_UINT = 6;
       GTK_TYPE_LONG = 7;
       GTK_TYPE_ULONG = 8;
       GTK_TYPE_FLOAT = 9;
       GTK_TYPE_DOUBLE = 10;
       GTK_TYPE_STRING = 11;
       GTK_TYPE_ENUM = 12;
       GTK_TYPE_FLAGS = 13;
       GTK_TYPE_BOXED = 14;
       GTK_TYPE_POINTER = 15;
       GTK_TYPE_SIGNAL = 16;
       GTK_TYPE_ARGS = 17;
       GTK_TYPE_CALLBACK = 18;
       GTK_TYPE_C_CALLBACK = 19;
       GTK_TYPE_FOREIGN = 20;
       GTK_TYPE_OBJECT = 21;
 
  const
     GTK_TYPE_FLAT_FIRST = GTK_TYPE_CHAR;
     GTK_TYPE_FLAT_LAST = GTK_TYPE_POINTER;
     GTK_TYPE_STRUCTURED_FIRST = GTK_TYPE_SIGNAL;
     GTK_TYPE_STRUCTURED_LAST = GTK_TYPE_FOREIGN;
     GTK_TYPE_FUNDAMENTAL_LAST = GTK_TYPE_OBJECT;
     GTK_TYPE_FUNDAMENTAL_MAX = 32;
function  GTK_CHECK_CLASS_TYPE(type_class:PGtkTypeClass;otype:TGtkType) : boolean;cdecl;

function  GTK_IS_IDENTIFIER(obj:pointer):boolean;
function  GTK_IS_IDENTIFIER_CLASS(klass:pointer):boolean;
function  GTK_TYPE_MAKE(parent_t,seqno:TGtkType):TGtkType;
function  GTK_FUNDAMENTAL_TYPE(thetype : TGtkType) : TGtkFundamentalType;
function  GTK_TYPE_SEQNO(thetype : TGtkType) : TGtkType;
function  GTK_VALUE_CHAR(const a : TGtkArg) : gchar;
function  GTK_VALUE_UCHAR(const a : TGtkArg) : guchar;
function  GTK_VALUE_BOOL(const a : TGtkArg) : gboolean;
function  GTK_VALUE_INT(const a : TGtkArg) : gint;
function  GTK_VALUE_UINT(const a : TGtkArg) : guint;
function  GTK_VALUE_LONG(const a : TGtkArg) : glong;
function  GTK_VALUE_ULONG(const a : TGtkArg) : gulong;
function  GTK_VALUE_FLOAT(const a : TGtkArg) : gfloat;
function  GTK_VALUE_DOUBLE(const a : TGtkArg) : gdouble;
function  GTK_VALUE_ENUM(const a : TGtkArg) : longint;
function  GTK_VALUE_FLAGS(const a : TGtkArg) : longint;
function  GTK_VALUE_BOXED(const a : TGtkArg) : gpointer;
function  GTK_VALUE_POINTER(const a : TGtkArg) : gpointer;
function  GTK_VALUE_OBJECT(const a : TGtkArg): gpointer;
 
function  GTK_RETLOC_CHAR(const a : TGtkArg) : Pgchar;
function  GTK_RETLOC_UCHAR(const a : TGtkArg) : Pguchar;
function  GTK_RETLOC_BOOL(const a : TGtkArg) : Pgboolean;
function  GTK_RETLOC_INT(const a : TGtkArg) : Pgint;
function  GTK_RETLOC_UINT(const a : TGtkArg) : Pguint;
function  GTK_RETLOC_LONG(const a : TGtkArg) : Pglong;
function  GTK_RETLOC_ULONG(const a : TGtkArg) : Pgulong;
function  GTK_RETLOC_FLOAT(const a : TGtkArg) : Pgfloat;
function  GTK_RETLOC_DOUBLE(const a : TGtkArg) : Pgdouble;
function  GTK_RETLOC_ENUM(const a : TGtkArg) : Pgint;
function  GTK_RETLOC_FLAGS(const a : TGtkArg) : Pguint;
function  GTK_RETLOC_BOXED(const a : TGtkArg) : Pgpointer;
    type
       PGtkTypeInfo = ptr TGtkTypeInfo;
       TGtkTypeInfo = record
            type_name : Pgchar;
            object_size : guint;
            class_size : guint;
            class_init_func : TGtkClassInitFunc;
            object_init_func : TGtkObjectInitFunc;
            reserved_1 : gpointer;
            reserved_2 : gpointer;
            base_class_init_func : TGtkClassInitFunc;
         end;
       PGtkTypeQuery = ptr TGtkTypeQuery;
       TGtkTypeQuery = record
            thetype : TGtkType;
            type_name : Pgchar;
            object_size : guint;
            class_size : guint;
         end;
       PGtkEnumValue = ptr TGtkEnumValue;
       TGtkEnumValue = record
            _value : guint;
            value_name : Pgchar;
            value_nick : Pgchar;
         end;

 
 
 
 
    type
       PGtkData = ptr TGtkData;
       TGtkData = record
            theobject : TGtkObject;
         end;
       DisconnectProc  = procedure (data : PGtkdata);cdecl;
       PGtkDataClass = ptr TGtkDataClass;
       TGtkDataClass = record
            parent_class : TGtkObjectClass;
            disconnect : disconnectproc;
         end;
Type
  GTK_DATA=PGtkData;
  GTK_DATA_CLASS=PGtkDataClass;

 
 
 
 
   type
     PGtkAdjustment = ptr TGtkAdjustment;
     TGtkAdjustment = record
          data : TGtkData;
          lower : gfloat;
          upper : gfloat;
          _value : gfloat;
          step_increment : gfloat;
          page_increment : gfloat;
          page_size : gfloat;
       end;
     AdjustProc = procedure (adjustment:PGtkAdjustment);cdecl;
     PGtkAdjustmentClass = ptr TGtkAdjustmentClass;
     TGtkAdjustmentClass = record
          parent_class : TGtkDataClass;
          changed : AdjustProc;
          value_changed : AdjustProc;
       end;
  GTK_ADJUSTMENT=PGtkAdjustment;
  GTK_ADJUSTMENT_CLASS=PGtkAdjustmentClass;
 
 
 
 
     TGtkAccelFlags =enum
       GTK_ACCEL_VISIBLE := 1 shl 0;
       GTK_ACCEL_SIGNAL_VISIBLE := 1 shl 1;
       GTK_ACCEL_LOCKED := 1 shl 2;
       GTK_ACCEL_MASK := $07;
     end;
     PGtkAccelGroup = ptr TGtkAccelGroup;
     TGtkAccelGroup = record
          ref_count : guint;
          lock_count : guint;
          modifier_mask : TGdkModifierType;
          attach_objects : PGSList;
       end;
     PGtkAccelEntry = ptr TGtkAccelEntry;
     TGtkAccelEntry = record
          accel_group : PGtkAccelGroup;
          accelerator_key : guint;
          accelerator_mods : TGdkModifierType;
          accel_flags : TGtkAccelFlags;
          _object : PGtkObject;
          signal_id : guint;
       end;
 
 
 
 
  Type
     GtkWidgetFlags = longint;
  const
       GTK_TOPLEVEL = 1 shl 4;
       GTK_NO_WINDOW = 1 shl 5;
       GTK_REALIZED = 1 shl 6;
       GTK_MAPPED = 1 shl 7;
       GTK_VISIBLE = 1 shl 8;
       GTK_SENSITIVE = 1 shl 9;
       GTK_PARENT_SENSITIVE = 1 shl 10;
       GTK_CAN_FOCUS = 1 shl 11;
       GTK_HAS_FOCUS = 1 shl 12;
       GTK_CAN_DEFAULT = 1 shl 13;
       GTK_HAS_DEFAULT = 1 shl 14;
       GTK_HAS_GRAB = 1 shl 15;
       GTK_RC_STYLE = 1 shl 16;
       GTK_COMPOSITE_CHILD = 1 shl 17;
       GTK_NO_REPARENT = 1 shl 18;
       GTK_APP_PAINTABLE = 1 shl 19;
       GTK_RECEIVES_DEFAULT = 1 shl 20;
    type
       TGtkRcFlags = longint;
    const
       GTK_RC_FG = 1;
       GTK_RC_BG = 2;
       GTK_RC_TEXT = 4;
       GTK_RC_BASE = 8;
    type
       PGtkRequisition = ptr TGtkRequisition;
       TGtkRequisition = record
            width : gint16;
            height : gint16;
         end;
       PGtkAllocation = ptr TGtkAllocation;
       TGtkAllocation = record
            x : gint16;
            y : gint16;
            width : guint16;
            height : guint16;
         end;
       PGtkSelectionData = ptr TGtkSelectionData;
       TGtkSelectionData = record
            selection : TGdkAtom;
            target : TGdkAtom;
            thetype : TGdkAtom;
            format : gint;
            data : Pguchar;
            length : gint;
         end;
       PGtkStyle = ptr TGtkStyle;
       PGtkWidget = ptr TGtkWidget;
       PPGtkWidget = ptr PGTKWidget;
       TGtkWidget = record
            theobject :TGtkObject;
            private_flags : guint16;
            state : guint8;
            saved_state : guint8;
            WidgetName : Pgchar;
            thestyle : pointer;  
            requisition : TGtkRequisition;
            allocation : TGtkAllocation;
            window : PGdkWindow;
            parent : PGtkWidget;
         end;
       PGtkWidgetClass = ptr TGtkWidgetClass;
       TGtkWidgetClass = record
            parent_class :TGtkObjectClass;
            activate_signal : guint;
            set_scroll_adjustments_signal : guint;
            show : procedure (widget:PGtkWidget); cdecl;
            show_all : procedure (widget:PGtkWidget); cdecl;
            hide : procedure (widget:PGtkWidget); cdecl;
            hide_all : procedure (widget:PGtkWidget); cdecl;
            map : procedure (widget:PGtkWidget); cdecl;
            unmap : procedure (widget:PGtkWidget); cdecl;
            realize : procedure (widget:PGtkWidget); cdecl;
            unrealize : procedure (widget:PGtkWidget); cdecl;
            draw : procedure (widget:PGtkWidget; area:PGdkRectangle); cdecl;
            draw_focus : procedure (widget:PGtkWidget); cdecl;
            draw_default : procedure (widget:PGtkWidget); cdecl;
            size_request : procedure (widget:PGtkWidget; requisition:PGtkRequisition); cdecl;
            size_allocate : procedure (widget:PGtkWidget; allocation:PGtkAllocation); cdecl;
            state_changed : procedure (widget:PGtkWidget; previous_state:TGtkStateType); cdecl;
            parent_set : procedure (widget:PGtkWidget; previous_parent:PGtkWidget); cdecl;
            style_set : procedure (widget:PGtkWidget; previous_style:pointer ); cdecl;
            add_accelerator : function (widget:PGtkWidget; accel_signal_id:guint; accel_group:PGtkAccelGroup; accel_key:guint; accel_mods:TGdkModifierType; accel_flags:TGtkAccelFlags):gint; cdecl;
            remove_accelerator : procedure (widget:PGtkWidget; accel_group:PGtkAccelGroup; accel_key:guint; accel_mods:TGdkModifierType);cdecl;
            grab_focus : procedure (widget:PGtkWidget);cdecl;
            event : function (widget:PGtkWidget; event:PGdkEvent):gint; cdecl;
            button_press_event : function (widget:PGtkWidget; event:PGdkEventButton):gint; cdecl;
            button_release_event : function (widget:PGtkWidget; event:PGdkEventButton):gint; cdecl;
            motion_notify_event : function (widget:PGtkWidget; event:PGdkEventMotion):gint; cdecl;
            delete_event : function (widget:PGtkWidget; event:PGdkEventAny):gint; cdecl;
            destroy_event : function (widget:PGtkWidget; event:PGdkEventAny):gint; cdecl;
            expose_event : function (widget:PGtkWidget; event:PGdkEventExpose):gint; cdecl;
            key_press_event : function (widget:PGtkWidget; event:PGdkEventKey):gint; cdecl;
            key_release_event : function (widget:PGtkWidget; event:PGdkEventKey):gint; cdecl;
            enter_notify_event : function (widget:PGtkWidget; event:PGdkEventCrossing):gint; cdecl;
            leave_notify_event : function (widget:PGtkWidget; event:PGdkEventCrossing):gint; cdecl;
            configure_event : function (widget:PGtkWidget; event:PGdkEventConfigure):gint; cdecl;
            focus_in_event : function (widget:PGtkWidget; event:PGdkEventFocus):gint; cdecl;
            focus_out_event : function (widget:PGtkWidget; event:PGdkEventFocus):gint; cdecl;
            map_event : function (widget:PGtkWidget; event:PGdkEventAny):gint; cdecl;
            unmap_event : function (widget:PGtkWidget; event:PGdkEventAny):gint; cdecl;
            property_notify_event : function (widget:PGtkWidget; event:PGdkEventProperty):gint; cdecl;
            selection_clear_event : function (widget:PGtkWidget; event:PGdkEventSelection):gint; cdecl;
            selection_request_event : function (widget:PGtkWidget; event:PGdkEventSelection):gint; cdecl;
            selection_notify_event : function (widget:PGtkWidget; event:PGdkEventSelection):gint; cdecl;
            proximity_in_event : function (widget:PGtkWidget; event:PGdkEventProximity):gint; cdecl;
            proximity_out_event : function (widget:PGtkWidget; event:PGdkEventProximity):gint; cdecl;
            visibility_notify_event : function (widget:PGtkWidget; event:PGdkEventVisibility):gint;cdecl;
            client_event : function (widget:PGtkWidget; event:PGdkEventClient):gint;cdecl;
            no_expose_event : function (widget:PGtkWidget; event:PGdkEventAny):gint;cdecl;
            selection_get : procedure (widget:PGtkWidget; selection_data:PGtkSelectionData; info:guint; time:guint);cdecl;
            selection_received : procedure (widget:PGtkWidget; selection_data:PGtkSelectionData; time:guint);cdecl;
            drag_begin : procedure (widget:PGtkWidget; context:PGdkDragContext);cdecl;
            drag_end : procedure (widget:PGtkWidget; context:PGdkDragContext);cdecl;
            drag_data_get : procedure (widget:PGtkWidget; context:PGdkDragContext; selection_data:PGtkSelectionData; info:guint; time:guint);cdecl;
            drag_data_delete : procedure (widget:PGtkWidget; context:PGdkDragContext);cdecl;
            drag_leave : procedure (widget:PGtkWidget; context:PGdkDragContext; time:guint);cdecl;
            drag_motion : function (widget:PGtkWidget; context:PGdkDragContext; x:gint; y:gint; time:guint):gboolean;cdecl;
            drag_drop : function (widget:PGtkWidget; context:PGdkDragContext; x:gint; y:gint; time:guint):gboolean;cdecl;
            drag_data_received : procedure (widget:PGtkWidget; context:PGdkDragContext; x:gint; y:gint; selection_data:PGtkSelectionData; info:guint; time:guint);cdecl;
            debug_msg : procedure (widget:PGtkWidget; thestring:Pgchar);cdecl;
            pad1 :TGtkfunction;
            pad2 :TGtkfunction;
            pad3 :TGtkfunction;
            pad4 :TGtkfunction;
         end;
       PGtkWidgetAuxInfo = ptr TGtkWidgetAuxInfo;
       TGtkWidgetAuxInfo = record
            x : gint16;
            y : gint16;
            width : gint16;
            height : gint16;
         end;
       PGtkWidgetShapeInfo = ptr TGtkWidgetShapeInfo;
       TGtkWidgetShapeInfo = record
            offset_x : gint16;
            offset_y : gint16;
            shape_mask : PGdkBitmap;
         end;
       TGTKCallBack = procedure (Widget : PGTKwidget; data : gpointer); cdecl;
 
     PGtkThemeEngine = ptr TGtkThemeEngine;
     PGtkRcStyle = ptr TGtkRcStyle;
     TGtkRcStyle = record
          StyleName : Pgchar;
          font_name : Pgchar;
          fontset_name : Pgchar;
          bg_pixmap_name : array[0 to 4] of Pgchar;
          color_flags : array[0 to 4] of TGtkRcFlags;
          fg : array[0 to 4] of TGdkColor;
          bg : array[0 to 4] of TGdkColor;
          text : array[0 to 4] of TGdkColor;
          base : array[0 to 4] of TGdkColor;
          engine : PGtkThemeEngine;
          engine_data : gpointer;
       end;
 
     TGtkThemeEngine = record
          parse_rc_style : function (scanner:PGScanner; rc_style:PGtkRcStyle):guint;cdecl;
          merge_rc_style : procedure (dest:PGtkRcStyle; src:PGtkRcStyle);cdecl;
          rc_style_to_style : procedure (style:PGtkStyle; rc_style:PGtkRcStyle);cdecl;
          duplicate_style : procedure (dest:PGtkStyle; src:PGtkStyle);cdecl;
          realize_style : procedure (new_style:PGtkStyle);cdecl;
          unrealize_style : procedure (new_style:PGtkStyle);cdecl;
          destroy_rc_style : procedure (rc_style:PGtkRcStyle);cdecl;
          destroy_style : procedure (style:PGtkStyle);cdecl;
          set_background : procedure (style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType);cdecl;
       end;
 
       PGtkStyleClass = ptr TGtkStyleClass;
       TGtkStyle = record
            klass : PGtkStyleClass;
            fg : array[0 to 4] of TGdkColor;
            bg : array[0 to 4] of TGdkColor;
            light : array[0 to 4] of TGdkColor;
            dark : array[0 to 4] of TGdkColor;
            mid : array[0 to 4] of TGdkColor;
            text : array[0 to 4] of TGdkColor;
            base : array[0 to 4] of TGdkColor;
            black : TGdkColor;
            white : TGdkColor;
            font : PGdkFont;
            fg_gc : array[0 to 4] of PGdkGC;
            bg_gc : array[0 to 4] of PGdkGC;
            light_gc : array[0 to 4] of PGdkGC;
            dark_gc : array[0 to 4] of PGdkGC;
            mid_gc : array[0 to 4] of PGdkGC;
            text_gc : array[0 to 4] of PGdkGC;
            base_gc : array[0 to 4] of PGdkGC;
            black_gc : PGdkGC;
            white_gc : PGdkGC;
            bg_pixmap : array[0 to 4] of PGdkPixmap;
            ref_count : gint;
            attach_count : gint;
            depth : gint;
            colormap : PGdkColormap;
            engine : PGtkThemeEngine;
            engine_data : gpointer;
            rc_style : PGtkRcStyle;
            styles : PGSList;
         end;

       TGtkStyleClass = record
          xthickness : gint;
          ythickness : gint;
          draw_hline : procedure (style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x1:gint; x2:gint; y:gint);cdecl;
          draw_vline : procedure (style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; y1:gint; y2:gint; x:gint);cdecl;
          draw_shadow : procedure (style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint);cdecl;
          draw_polygon : procedure (style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; point:PGdkPoint; npoints:gint; fill:gboolean);cdecl;
          draw_arrow : procedure (style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; arrow_type:TGtkArrowType; fill:gboolean; x:gint; y:gint; width:gint; height:gint);cdecl;
          draw_diamond : procedure (style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint);cdecl;
          draw_oval : procedure (style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint);cdecl;
          draw_string : procedure (style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; thestring:Pgchar);cdecl;
          draw_box : procedure (style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint);cdecl;
          draw_flat_box : procedure (style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint);cdecl;
          draw_check : procedure (style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint);cdecl;
          draw_option : procedure (style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint);cdecl;
          draw_cross : procedure (style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint);cdecl;
          draw_ramp : procedure (style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; arrow_type:TGtkArrowType; x:gint; y:gint; width:gint; height:gint);cdecl;
          draw_tab : procedure (style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint);cdecl;
          draw_shadow_gap : procedure (style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint; gap_side:TGtkPositionType; gap_x:gint; gap_width:gint);cdecl;
          draw_box_gap : procedure (style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint; gap_side:TGtkPositionType; gap_x:gint; gap_width:gint);cdecl;
          draw_extension : procedure (style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint; gap_side:TGtkPositionType);cdecl;
          draw_focus : procedure (style:PGtkStyle; window:PGdkWindow; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint);cdecl;
          draw_slider : procedure (style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint; orientation:TGtkOrientation);cdecl;
          draw_handle : procedure (style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint; orientation:TGtkOrientation);cdecl;
        end;
 
function  GTK_WIDGET_STATE(wid : PGtkwidget) : longint;
function  GTK_WIDGET_SAVED_STATE(wid : PGtkwidget) : longint;
function  GTK_WIDGET_FLAGS(wid : PGtkwidget) : longint;
function  GTK_WIDGET_TOPLEVEL(wid : PGtkwidget) : boolean;
function  GTK_WIDGET_NO_WINDOW(wid : PGtkwidget) : boolean;
function  GTK_WIDGET_REALIZED(wid : PGtkwidget) : boolean;
function  GTK_WIDGET_MAPPED(wid : PGtkwidget) : boolean;
function  GTK_WIDGET_VISIBLE(wid : PGtkwidget) : boolean;
function  GTK_WIDGET_DRAWABLE(wid : PGtkwidget) : boolean;
function  GTK_WIDGET_SENSITIVE(wid : PGtkwidget) : boolean;
function  GTK_WIDGET_PARENT_SENSITIVE(wid : PGtkwidget) : boolean;
function  GTK_WIDGET_IS_SENSITIVE(wid : PGtkwidget) : boolean;
function  GTK_WIDGET_CAN_FOCUS(wid : PGtkwidget) : boolean;
function  GTK_WIDGET_HAS_FOCUS(wid : PGtkwidget) : boolean;
function  GTK_WIDGET_CAN_DEFAULT(wid : PGtkwidget) : boolean;
function  GTK_WIDGET_HAS_DEFAULT(wid : PGtkwidget) : boolean;
function  GTK_WIDGET_HAS_GRAB(wid : PGtkwidget) : boolean;
function  GTK_WIDGET_RC_STYLE(wid : PGtkwidget) : boolean;
function  GTK_WIDGET_COMPOSITE_CHILD(wid : PGtkWidget) : boolean;
function  GTK_WIDGET_APP_PAINTABLE(wid : PGtkWidget) : boolean;
function  GTK_WIDGET_RECEIVES_DEFAULT(wid : PGtkWidget) : boolean;
procedure GTK_WIDGET_SET_FLAGS(wid : PGtkwidget;flag:longint);
procedure GTK_WIDGET_UNSET_FLAGS(wid : PGtkwidget;flag:longint);
Type
  GTK_WIDGET=PGtkWidget;
  GTK_WIDGET_CLASS=PGtkWidgetClass;
 
 
 
 
 
    const
       GTK_STYLE_NUM_STYLECOLORS = 35;
 
 
 
 
    type
       PGtkMisc = ptr TGtkMisc;
       TGtkMisc = record
            widget : TGtkWidget;
            xalign : gfloat;
            yalign : gfloat;
            xpad : guint16;
            ypad : guint16;
         end;
       PGtkMiscClass = ptr TGtkMiscClass;
       TGtkMiscClass = record
            parent_class : TGtkWidgetClass;
         end;
Type
  GTK_MISC=PGtkMisc;
  GTK_MISC_CLASS=PGtkMiscClass;
 
 
 
 
    type
       PGtkLabelWord = pointer;
       PGtkLabel = ptr TGtkLabel;
       TGtkLabel = record
          misc : TGtkMisc;
          thelabel : Pgchar;
          label_wc : PGdkWChar;
          pattern : Pgchar;
          words : PGtkLabelWord;
          flag0 : longint;
          wrap : gboolean;
        end;
  const
     bm_TGtkLabel_max_width = $FFFF;
     bp_TGtkLabel_max_width = 0;
     bm_TGtkLabel_jtype = $30000;
     bp_TGtkLabel_jtype = 16;
function  max_width(var a : TGtkLabel) : guint;
procedure set_max_width(var a : TGtkLabel; __max_width : guint);
function  jtype(var a : TGtkLabel) : guint;
procedure set_jtype(var a : TGtkLabel; __jtype : guint);
    type
       PGtkLabelClass = ptr TGtkLabelClass;
       TGtkLabelClass = record
            parent_class : TGtkMiscClass;
         end;
Type
  GTK_LABEL=PGtkLabel;
  GTK_LABEL_CLASS=PGtkLabelClass;


 
 
 
 
type
     TGtkPrivateFlags = longint;
const
     PRIVATE_GTK_USER_STYLE = 1 shl 0;
     PRIVATE_GTK_REDRAW_PENDING = 1 shl 1;
     PRIVATE_GTK_RESIZE_PENDING = 1 shl 2;
     PRIVATE_GTK_RESIZE_NEEDED = 1 shl 3;
     PRIVATE_GTK_LEAVE_PENDING = 1 shl 4;
     PRIVATE_GTK_HAS_SHAPE_MASK = 1 shl 5;
     PRIVATE_GTK_IN_REPARENT = 1 shl 6;
     PRIVATE_GTK_IS_OFFSCREEN = 1 shl 7;
function  GTK_PRIVATE_FLAGS(wid : PGtkWidget) : longint;
function  GTK_WIDGET_USER_STYLE(obj : PGtkWidget) : boolean;
function  GTK_WIDGET_REDRAW_PENDING(obj : PGtkWidget) : boolean;
function  GTK_CONTAINER_RESIZE_PENDING(obj : PGtkWidget) : boolean;
function  GTK_WIDGET_RESIZE_NEEDED(obj : PGtkWidget) : boolean;
function  GTK_WIDGET_LEAVE_PENDING(obj : PGtkWidget) : boolean;
function  GTK_WIDGET_HAS_SHAPE_MASK(obj : PGtkWidget) : boolean;
function  GTK_WIDGET_IN_REPARENT(obj : PGtkWidget) : boolean;
function  GTK_WIDGET_IS_OFFSCREEN(obj : PGtkWidget) : boolean;
 
 
 
 
  type
     PGtkAccelLabel = ptr TGtkAccelLabel;
     TGtkAccelLabel = record
          _label : TGtkLabel;
          queue_id : guint;
          accel_padding : guint;
          accel_widget : PGtkWidget;
          accel_string : Pgchar;
          accel_string_width : guint16;
       end;
     PGtkAccelLabelClass = ptr TGtkAccelLabelClass;
     TGtkAccelLabelClass = record
          parent_class : TGtkLabelClass;
          signal_quote1 : Pgchar;
          signal_quote2 : Pgchar;
          mod_name_shift : Pgchar;
          mod_name_control : Pgchar;
          mod_name_alt : Pgchar;
          mod_separator : Pgchar;
          accel_seperator : Pgchar;
          flag0 : word ;{Todo win32 :longint}
       end;
const
  bm_TGtkAccelLabelClass_latin1_to_char = $1;
  bp_TGtkAccelLabelClass_latin1_to_char = 0;
type
  GTK_ACCEL_LABEL=PGtkAccelLabel;
  GTK_ACCEL_LABEL_CLASS=PGtkAccelLabelClass;
 
 
 
 
  const
     GTK_PRIORITY_REDRAW = G_PRIORITY_HIGH_IDLE + 20;
     GTK_PRIORITY_RESIZE = G_PRIORITY_HIGH_IDLE + 10;
     GTK_PRIORITY_HIGH = G_PRIORITY_HIGH;
     GTK_PRIORITY_INTERNAL = GTK_PRIORITY_REDRAW;
     GTK_PRIORITY_DEFAULT = G_PRIORITY_DEFAULT_IDLE;
     GTK_PRIORITY_LOW = G_PRIORITY_LOW;
  type
     TGtkModuleInitFunc = procedure (argc:Pgint; argv:pPPgchar);cdecl;
     TGtkKeySnoopFunc = function (grab_widget:PGtkWidget;event:PGdkEventKey;func_data:gpointer):gint;cdecl;
{    var
       gtk_major_version : guint;external gtkdll name 'gtk_major_version';
       gtk_minor_version : guint;external gtkdll name 'gtk_minor_version';
       gtk_micro_version : guint;external gtkdll name 'gtk_micro_version';
       gtk_binary_age : guint;external gtkdll name 'gtk_binary_age';
       gtk_interface_age : guint;external gtkdll name 'gtk_interface_age';
}{todo}
 
 
 
 
  type
     PGtkDrawingArea = ptr TGtkDrawingArea;
     TGtkDrawingArea = record
          widget : TGtkWidget;
          draw_data : gpointer;
       end;
     PGtkDrawingAreaClass = ptr TGtkDrawingAreaClass;
     TGtkDrawingAreaClass = record
          parent_class : TGtkWidgetClass;
       end;
Type
  GTK_DRAWING_AREA=PGtkDrawingArea;
  GTK_DRAWING_AREA_CLASS=PGtkDrawingAreaClass;
 
 
 
    type
       PGtkContainer = ptr TGtkContainer;
       TGtkContainer = record
            widget : TGtkWidget;
            focus_child : PGtkWidget;
            flag0 : longint;
            resize_widgets : PGSList;
         end;
  const
     bm_TGtkContainer_border_width = $FFFF;
     bp_TGtkContainer_border_width = 0;
     bm_TGtkContainer_need_resize = $10000;
     bp_TGtkContainer_need_resize = 16;
     bm_TGtkContainer_resize_mode = $60000;
     bp_TGtkContainer_resize_mode = 17;
function  border_width(var a : TGtkContainer) : guint;
procedure set_border_width(var a : TGtkContainer; __border_width : guint);
function  need_resize(var a : TGtkContainer) : guint;
procedure set_need_resize(var a : TGtkContainer; __need_resize : guint);
function  resize_mode(var a : TGtkContainer) : guint;
procedure set_resize_mode(var a : TGtkContainer; __resize_mode : guint);
    type
       PGtkContainerClass = ptr TGtkContainerClass;
       TGtkContainerClass = record
          parent_class : TGtkWidgetClass;
          n_child_args : guint;
          add : procedure (container:PGtkContainer; widget:PGtkWidget); cdecl;
          remove : procedure (container:PGtkContainer; widget:PGtkWidget); cdecl;
          check_resize : procedure (container:PGtkContainer);cdecl;
          forall : procedure (container:PGtkContainer; include_internals:gboolean; callback:TGtkCallback; callbabck_data:gpointer);cdecl;
          focus : function (container:PGtkContainer; direction:TGtkDirectionType):gint; cdecl;
          set_focus_child : procedure (container:PGtkContainer; widget:PGtkWidget);cdecl;
          child_type : function (container:PGtkContainer):TGtkType;cdecl;
          set_child_arg : procedure (container:PGtkContainer; child:PGtkWidget; arg:PGtkArg; arg_id:guint);cdecl;
          get_child_arg : procedure (container:PGtkContainer; child:PGtkWidget; arg:PGtkArg; arg_id:guint);cdecl;
          composite_name : function (container:PGtkContainer; child:PGtkWidget):Pgchar;cdecl;
          pad1 : TGtkfunction;
          pad2 : TGtkfunction;
        end;
Type
  GTK_CONTAINER = PGtkContainer;
  GTK_CONTAINER_CLASS = PGtkContainerClass;
function  GTK_IS_CONTAINER(obj:pointer):boolean;
function  GTK_IS_CONTAINER_CLASS(klass:pointer):boolean;
 
 
 
 
    type
       PGtkBin = ptr TGtkBin;
       TGtkBin = record
            container : TGtkContainer;
            child : PGtkWidget;
         end;
       PGtkBinClass = ptr TGtkBinClass;
       TGtkBinClass = record
            parent_class : TGtkContainerClass;
         end;
Type
  GTK_BIN=PGtkBin;
  GTK_BIN_CLASS=PGtkBinClass;
function  GTK_IS_BIN(obj:pointer):boolean;
function  GTK_IS_BIN_CLASS(klass:pointer):boolean;
 
 
 
 
    type
       TGtkSignalMarshal = procedure(theobject:PGtkObject;data:gpointer;nparams:guint;args:PGtkArg;arg_types:PGtkType; return_type:TGtkType);cdecl;
       TGtkSignalDestroy = procedure(data:gpointer);cdecl;
       TGtkEmissionHook = function (theobject:PGtkObject; signal_id:guint; n_params:guint; params:PGtkArg; data:gpointer):gboolean;cdecl;
       PGtkSignalQuery = ptr TGtkSignalQuery;
       TGtkSignalQuery = record
            object_type : TGtkType;
            signal_id : guint;
            signal_name : Pgchar;
            flag0 :word ; {Todo: win32=longint}
            signal_flags : TGtkSignalRunType;
            return_val : TGtkType;
            nparams : guint;
            params : PGtkType;
         end;
    const
       bm_TGtkSignalQuery_is_user_signal = $1;
       bp_TGtkSignalQuery_is_user_signal = 0;
function  is_user_signal(var a : TGtkSignalQuery) : guint;
procedure set_is_user_signal(var a : TGtkSignalQuery; __is_user_signal : guint);
 
 
 
 
    type
       PGtkItem = ptr TGtkItem;
       TGtkItem = record
            bin : TGtkBin;
         end;
       PGtkItemClass = ptr TGtkItemClass;
       TGtkItemClass = record
            parent_class : TGtkBinClass;
            select : procedure (item:PGtkItem); cdecl;
            deselect : procedure (item:PGtkItem); cdecl;
            toggle : procedure (item:PGtkItem); cdecl;
         end;
Type
  GTK_ITEM=PGtkItem;
  GTK_ITEM_CLASS=PGtkItemClass;

function  GTK_IS_ITEM(obj:pointer):boolean;
function  GTK_IS_ITEM_CLASS(klass:pointer):boolean;
 
 
 
 
  type
     PGtkPatternSpec = ptr TGtkPatternSpec;
     TGtkPatternSpec = record
          match_type : TGtkMatchType;
          pattern_length : guint;
          pattern : Pgchar;
          pattern_reversed : Pgchar;
          user_data : gpointer;
          seq_id : guint;
       end;
  type
     PGtkBindingSet = ptr TGtkBindingSet;
     PGtkBindingEntry = ptr TGtkBindingEntry;
     PGtkBindingSignal = ptr TGtkBindingSignal;
     PGtkBindingArg = ptr TGtkBindingArg;
     TGtkBindingSet = record
          set_name : Pgchar;
          priority : gint;
          widget_path_pspecs : PGSList;
          widget_class_pspecs : PGSList;
          class_branch_pspecs : PGSList;
          entries : PGtkBindingEntry;
          current : PGtkBindingEntry;
       end;
     TGtkBindingEntry = record
          keyval : guint;
          modifiers : guint;
          binding_set : PGtkBindingSet;
          flag0 : word; {Todo win32:longint}
          set_next : PGtkBindingEntry;
          hash_next : PGtkBindingEntry;
          signals : PGtkBindingSignal;
       end;
     TGtkBindingSignal = record
          next : PGtkBindingSignal;
          signal_name : Pgchar;
          n_args : guint;
          args : PGtkBindingArg;
       end;
     TGtkBindingArg = record
          arg_type : TGtkType;
          d : union
                  long_data : glong;
                  double_data : gdouble;
                  string_data : Pgchar;
              end;
       end;
  const
     bm_TGtkBindingEntry_destroyed = $1;
     bp_TGtkBindingEntry_destroyed = 0;
     bm_TGtkBindingEntry_in_emission = $2;
     bp_TGtkBindingEntry_in_emission = 1;
function  destroyed(var a : TGtkBindingEntry) : guint;
procedure set_destroyed(var a : TGtkBindingEntry; __destroyed : guint);
function  in_emission(var a : TGtkBindingEntry) : guint;
procedure set_in_emission(var a : TGtkBindingEntry; __in_emission : guint);
 
 
 
  type
     PGtkInvisible = ptr TGtkInvisible;
     TGtkInvisible = record
          bin : TGtkBin;
       end;
     PGtkInvisibleClass = ptr TGtkInvisibleClass;
     TGtkInvisibleClass = record
          parent_class : TGtkBinClass;
       end;
type
  GTK_INVISIBLE=PGtkInvisible;
  GTK_INVISIBLE_CLASS=PGtkInvisibleClass;
function  GTK_IS_INVISIBLE(obj:pointer):boolean;
function  GTK_IS_INVISIBLE_CLASS(klass:pointer):boolean;
 
 
 
 
    type
       PGtkAlignment = ptr TGtkAlignment;
       TGtkAlignment = record
            bin : TGtkBin;
            xalign : gfloat;
            yalign : gfloat;
            xscale : gfloat;
            yscale : gfloat;
         end;
       PGtkAlignmentClass = ptr TGtkAlignmentClass;
       TGtkAlignmentClass = record
            parent_class : TGtkBinClass;
         end;
Type
  GTK_ALIGNMENT=PGtkAlignment;
  GTK_ALIGNMENT_CLASS=PGtkAlignmentClass;
function  GTK_IS_ALIGNMENT(obj:pointer):boolean;
function  GTK_IS_ALIGNMENT_CLASS(klass:pointer):boolean;
 
 
 
 
    type
       PGtkWindow = ptr TGtkWindow;
       TGtkWindow = record
            bin : TGtkBin;
            title : Pgchar;
            wmclass_name : Pgchar;
            wmclass_class : Pgchar;
            thetype : TGtkWindowType;
            focus_widget : PGtkWidget;
            default_widget : PGtkWidget;
            transient_parent : PGtkWindow;
            resize_count : gushort;
            flag0 :word ;{Todo Windows :longint}
         end;
    const
       bm_modal = 1;
       bp_modal = 0;
       bm_allow_shrink = 2;
       bp_allow_shrink = 1;
       bm_allow_grow = 4;
       bp_allow_grow = 2;
       bm_auto_shrink = 8;
       bp_auto_shrink = 3;
       bm_handling_resize = 16;
       bp_handling_resize = 4;
       bm_position = 96;
       bp_position = 5;
       bm_use_uposition = 128;
       bp_use_uposition = 7;
function  modal(var a : TGtkWindow) : guint;
procedure set_modal(var a : TGtkWindow; __modal : guint);
function  allow_shrink(var a : TGtkWindow) : guint;
procedure set_allow_shrink(var a : TGtkWindow; __allow_shrink : guint);
function  allow_grow(var a : TGtkWindow) : guint;
procedure set_allow_grow(var a : TGtkWindow; __allow_grow : guint);
function  auto_shrink(var a : TGtkWindow) : guint;
procedure set_auto_shrink(var a : TGtkWindow; __auto_shrink : guint);
function  handling_resize(var a : TGtkWindow) : guint;cdecl;
procedure set_handling_resize(var a : TGtkWindow; __handling_resize : guint);cdecl;
function  position(var a : TGtkWindow) : guint;
procedure set_position(var a : TGtkWindow; __position : guint);
function  use_uposition(var a : TGtkWindow) : guint;
procedure set_use_uposition(var a : TGtkWindow; __use_uposition : guint);
    type
       PGtkWindowClass = ptr TGtkWindowClass;
       TGtkWindowClass = record
            parent_class : TGtkBinClass;
            set_focus : procedure (window:PGtkWindow; focus:PGtkWidget);cdecl;
         end;
Type
  GTK_WINDOW = PGtkWindow;
  GTK_WINDOW_CLASS = PGtkWindowClass;
function  GTK_IS_WINDOW(obj:pointer):boolean;
function  GTK_IS_WINDOW_CLASS(klass:pointer):boolean;
 
 
 
 
  type
     PGtkPlug = ptr TGtkPlug;
     TGtkPlug = record
          window : TGtkWindow;
          socket_window : PGdkWindow;
          same_app : gint;
       end;
     PGtkPlugClass = ptr TGtkPlugClass;
     TGtkPlugClass = record
          parent_class : TGtkWindowClass;
       end;
type
  GTK_PLUG=PGtkPlug;
  GTK_PLUG_CLASS=PGtkPlugClass;
 
 
 
 
  type
     PGtkSocket = ptr TGtkSocket;
     TGtkSocket = record
          container : TGtkContainer;
          request_width : guint16;
          request_height : guint16;
          current_width : guint16;
          current_height : guint16;
          plug_window : PGdkWindow;
          flag0 :word ; {Todo  win32 longint}
       end;
  const
     bm_TGtkSocket_same_app = $1;
     bp_TGtkSocket_same_app = 0;
     bm_TGtkSocket_focus_in = $2;
     bp_TGtkSocket_focus_in = 1;
     bm_TGtkSocket_have_size = $4;
     bp_TGtkSocket_have_size = 2;
     bm_TGtkSocket_need_map = $8;
     bp_TGtkSocket_need_map = 3;
function  same_app(var a : TGtkSocket) : guint;
procedure set_same_app(var a : TGtkSocket; __same_app : guint);
function  focus_in(var a : TGtkSocket) : guint;
procedure set_focus_in(var a : TGtkSocket; __focus_in : guint);
function  have_size(var a : TGtkSocket) : guint;
procedure set_have_size(var a : TGtkSocket; __have_size : guint);
function  need_map(var a : TGtkSocket) : guint;
procedure set_need_map(var a : TGtkSocket; __need_map : guint);
  type
     PGtkSocketClass = ptr TGtkSocketClass;
     TGtkSocketClass = record
          parent_class : TGtkContainerClass;
       end;
type
  GTK_SOCKET=PGtkSocket;
  GTK_SOCKET_CLASS=PGtkSocket;

 
 
 
type
     TGtkPackerOptions = longint;
const
     GTK_PACK_EXPAND = 1 shl 0;
     GTK_FILL_X = 1 shl 1;
     GTK_FILL_Y = 1 shl 2;
type
     TGtkSideType = longint;
const
     GTK_SIDE_TOP = 0;
     GTK_SIDE_BOTTOM = 1;
     GTK_SIDE_LEFT = 2;
     GTK_SIDE_RIGHT = 3;
type
     TGtkAnchorType = longint;
const
       GTK_ANCHOR_CENTER = 0;
       GTK_ANCHOR_NORTH = 1;
       GTK_ANCHOR_NORTH_WEST = 2;
       GTK_ANCHOR_NORTH_EAST = 3;
       GTK_ANCHOR_SOUTH = 4;
       GTK_ANCHOR_SOUTH_WEST = 5;
       GTK_ANCHOR_SOUTH_EAST = 6;
       GTK_ANCHOR_WEST = 7;
       GTK_ANCHOR_EAST = 8;
       GTK_ANCHOR_N = GTK_ANCHOR_NORTH;
       GTK_ANCHOR_NW = GTK_ANCHOR_NORTH_WEST;
       GTK_ANCHOR_NE = GTK_ANCHOR_NORTH_EAST;
       GTK_ANCHOR_S = GTK_ANCHOR_SOUTH;
       GTK_ANCHOR_SW = GTK_ANCHOR_SOUTH_WEST;
       GTK_ANCHOR_SE = GTK_ANCHOR_SOUTH_EAST;
       GTK_ANCHOR_W = GTK_ANCHOR_WEST;
       GTK_ANCHOR_E = GTK_ANCHOR_EAST;
type
     PGtkPackerChild = ptr TGtkPackerChild;
     TGtkPackerChild = record
          widget : PGtkWidget;
          anchor : TGtkAnchorType;
          side : TGtkSideType;
          options : TGtkPackerOptions;
          flag0 : longint;
          flag1 : longint;
          flag2 : word;{Todo: win32 longint}
       end;
     PGtkPacker = ptr TGtkPacker;
     TGtkPacker = record
          parent : TGtkContainer;
          children : PGList;
          spacing : guint;
          flag0 : longint;
          flag1 : longint;
          flag2 : word;{Todo: win32 longint}
      end;
     PGtkPackerClass = ptr TGtkPackerClass;
     TGtkPackerClass = record
          parent_class : TGtkContainerClass;
       end;
type
  GTK_PACKER=PGtkPacker;
  GTK_PACKER_CLASS=PGtkPackerClass;
function  GTK_IS_PACKER(obj:pointer):boolean;
function  GTK_IS_PACKER_CLASS(klass:pointer):boolean;
 
 
 
 
  type
     PGtkLayout = ptr TGtkLayout;
     TGtkLayout = record
          container : TGtkContainer;
          children : PGList;
          width : guint;
          height : guint;
          xoffset : guint;
          yoffset : guint;
          hadjustment : PGtkAdjustment;
          vadjustment : PGtkAdjustment;
          bin_window : PGdkWindow;
          visibility : TGdkVisibilityState;
          configure_serial : gulong;
          scroll_x : gint;
          scroll_y : gint;
          freeze_count : guint;
       end;
     PGtkLayoutClass = ptr TGtkLayoutClass;
     TGtkLayoutClass = record
          parent_class : TGtkContainerClass;
          set_scroll_adjustments : procedure (layout:PGtkLayout; hadjustment:PGtkAdjustment; vadjustment:PGtkAdjustment);cdecl;
       end;
type
  GTK_LAYOUT=PGtkLayout;
  GTK_LAYOUT_CLASS=PGtkLayoutClass;
function  GTK_IS_LAYOUT(obj:pointer):boolean;
function  GTK_IS_LAYOUT_CLASS(klass:pointer):boolean;
 
 
 
 
    type
       PGtkFrame = ptr TGtkFrame;
       TGtkFrame = record
            bin : TGtkBin;
            thelabel : Pgchar;
            shadow_type : gint16;
            label_width : gint16;
            label_height : gint16;
            label_xalign : gfloat;
            label_yalign : gfloat;
         end;
       PGtkFrameClass = ptr TGtkFrameClass;
       TGtkFrameClass = record
            parent_class : TGtkBinClass;
         end;
Type
  GTK_FRAME=PGtkFrame;
  GTK_FRAME_CLASS=PGtkFrameClass;
function  GTK_IS_FRAME(obj:pointer):boolean;
function  GTK_IS_FRAME_CLASS(klass:pointer):boolean;
 
 
 
 
    type
       PGtkAspectFrame = ptr TGtkAspectFrame;
       TGtkAspectFrame = record
            frame : TGtkFrame;
            xalign : gfloat;
            yalign : gfloat;
            ratio : gfloat;
            obey_child : gint;
            center_allocation : TGtkAllocation;
         end;
       PGtkAspectFrameClass = ptr TGtkAspectFrameClass;
       TGtkAspectFrameClass = record
            parent_class : TGtkBinClass;
         end;
Type
  GTK_ASPECT_FRAME=PGtkAspectFrame;
  GTK_ASPECT_FRAME_CLASS=PGtkAspectFrameClass;
function  GTK_IS_ASPECT_FRAME(obj:pointer):boolean;
function  GTK_IS_ASPECT_FRAME_CLASS(klass:pointer):boolean;

 
 
 
 
  type
     PGtkViewport = ptr TGtkViewport;
     TGtkViewport = record
          bin : TGtkBin;
          shadow_type : TGtkShadowType;
          view_window : PGdkWindow;
          bin_window : PGdkWindow;
          hadjustment : PGtkAdjustment;
          vadjustment : PGtkAdjustment;
       end;
     PGtkViewportClass = ptr TGtkViewportClass;
     TGtkViewportClass = record
          parent_class : TGtkBinClass;
          set_scroll_adjustments : procedure (viewport:PGtkViewport; hadjustment:PGtkAdjustment; vadjustment:PGtkAdjustment);cdecl;
       end;
Type
  GTK_VIEWPORT = PGtkViewport;
  GTK_VIEWPORT_CLASS = PGtkViewportClass;
function  GTK_IS_VIEWPORT(obj:pointer):boolean;
function  GTK_IS_VIEWPORT_CLASS(klass:pointer):boolean;
 
 
 
 
    type
       PGtkRange = ptr TGtkRange;
       TGtkRange = record
            widget : TGtkWidget;
            trough : PGdkWindow;
            slider : PGdkWindow;
            step_forw : PGdkWindow;
            step_back : PGdkWindow;
            x_click_point : gint16;
            y_click_point : gint16;
            button : guint8;
            digits : gint8;
            flag0 : word;{Todo: win32 longint}
            timer : guint32;
            old_value : gfloat;
            old_lower : gfloat;
            old_upper : gfloat;
            old_page_size : gfloat;
            adjustment : PGtkAdjustment;
         end;
    const
       bm_policy = 3;
       bp_policy = 0;
       bm_scroll_type = 28;
       bp_scroll_type = 2;
       bm_in_child = 224;
       bp_in_child = 5;
       bm_click_child = 1792;
       bp_click_child = 8;
       bm_need_timer = 2048;
       bp_need_timer = 11;
function  policy(var a : TGtkRange) : guint;
procedure set_policy(var a : TGtkRange; __policy : guint);
function  scroll_type(var a : TGtkRange) : guint;
procedure set_scroll_type(var a : TGtkRange; __scroll_type : guint);
function  in_child(var a : TGtkRange) : guint;overload;
procedure set_in_child(var a : TGtkRange; __in_child : guint);overload;
function  click_child(var a : TGtkRange) : guint;overload;
procedure set_click_child(var a : TGtkRange; __click_child : guint);overload;
function  need_timer(var a : TGtkRange) : guint;overload;
procedure set_need_timer(var a : TGtkRange; __need_timer : guint);overload;
    type
       PGtkRangeClass = ptr TGtkRangeClass;
       TGtkRangeClass = record
            parent_class : TGtkWidgetClass;
            slider_width : gint;
            stepper_size : gint;
            stepper_slider_spacing : gint;
            min_slider_size : gint;
            trough : guint8;
            slider : guint8;
            step_forw : guint8;
            step_back : guint8;
            draw_background : procedure (range:PGtkRange); cdecl;
            clear_background : procedure (range:PGtkRange);cdecl;
            draw_trough : procedure (range:PGtkRange); cdecl;
            draw_slider : procedure (range:PGtkRange); cdecl;
            draw_step_forw : procedure (range:PGtkRange); cdecl;
            draw_step_back : procedure (range:PGtkRange); cdecl;
            slider_update : procedure (range:PGtkRange); cdecl;
            trough_click : function (range:PGtkRange; x:gint; y:gint; jump_perc:Pgfloat):gint; cdecl;
            trough_keys : function (range:PGtkRange; key:PGdkEventKey; scroll:PGtkScrollType; trough:PGtkTroughType):gint; cdecl;
            motion : procedure (range:PGtkRange; xdelta:gint; ydelta:gint); cdecl;
            timer : function (range:PGtkRange):gint; cdecl;
         end;
Type
  GTK_RANGE=PGtkRange;
  GTK_RANGE_CLASS=PGtkRangeClass;
function  GTK_IS_RANGE(obj:pointer):boolean;
function  GTK_IS_RANGE_CLASS(klass:pointer):boolean;
  type
     TGtkImageLoader = function (window:PGdkWindow; colormap:PGdkColormap; mask:PPGdkBitmap; transparent_color:PGdkColor; filename:Pgchar):PGdkPixmap;cdecl;
  type
     TGtkRcTokenType = enum
		GTK_RC_TOKEN_INVALID := G_TOKEN_LAST;
		GTK_RC_TOKEN_INCLUDE;
      GTK_RC_TOKEN_NORMAL;
		GTK_RC_TOKEN_ACTIVE;
      GTK_RC_TOKEN_PRELIGHT;
		GTK_RC_TOKEN_SELECTED;
      GTK_RC_TOKEN_INSENSITIVE;
		GTK_RC_TOKEN_FG;
      GTK_RC_TOKEN_BG;
		GTK_RC_TOKEN_BASE;
		GTK_RC_TOKEN_TEXT;
      GTK_RC_TOKEN_FONT;
		GTK_RC_TOKEN_FONTSET;
      GTK_RC_TOKEN_BG_PIXMAP;
		GTK_RC_TOKEN_PIXMAP_PATH;
      GTK_RC_TOKEN_STYLE;
		GTK_RC_TOKEN_BINDING;
      GTK_RC_TOKEN_BIND;
		GTK_RC_TOKEN_WIDGET;
      GTK_RC_TOKEN_WIDGET_CLASS;
		GTK_RC_TOKEN_CLASS;
      GTK_RC_TOKEN_LOWEST;
		GTK_RC_TOKEN_GTK;
      GTK_RC_TOKEN_APPLICATION;
		GTK_RC_TOKEN_RC;
      GTK_RC_TOKEN_HIGHEST;
		GTK_RC_TOKEN_ENGINE;
      GTK_RC_TOKEN_MODULE_PATH;
		GTK_RC_TOKEN_LAST;
     end;
 
 
 
 
  type
     PGtkEditable = ptr TGtkEditable;
     TGtkEditable = record
          widget : TGtkWidget;
          current_pos : guint;
          selection_start_pos : guint;
          selection_end_pos : guint;
          flag0 : word;{Todo win32:Longint}
          ic : PGdkIC;
          ic_attr : PGdkICAttr;
          clipboard_text : Pgchar;
       end;
     TGtkTextfunction = procedure (editable:PGtkEditable; time:guint32); cdecl;
  const
     bm_TGtkEditable_has_selection = $1;
     bp_TGtkEditable_has_selection = 0;
     bm_TGtkEditable_editable = $2;
     bp_TGtkEditable_editable = 1;
     bm_TGtkEditable_visible = $4;
     bp_TGtkEditable_visible = 2;
function  has_selection(var a : TGtkEditable) : guint;
procedure set_has_selection(var a : TGtkEditable; __has_selection : guint);
function  editable(var a : TGtkEditable) : guint;
procedure set_editable(var a : TGtkEditable; __editable : guint);
function  visible(var a : TGtkEditable) : guint;overload;
procedure set_visible(var a : TGtkEditable; __visible : guint);overload;
  type
     PGtkEditableClass = ptr TGtkEditableClass;
     TGtkEditableClass = record
          parent_class : TGtkWidgetClass;
          changed : procedure (editable:PGtkEditable);cdecl;
          insert_text : procedure (editable:PGtkEditable; thetext:Pgchar; length:gint; position:Pgint); cdecl;
          delete_text : procedure (editable:PGtkEditable; start_pos:gint; end_pos:gint); cdecl;
          activate : procedure (editable:PGtkEditable);cdecl;
          set_editable : procedure (editable:PGtkEditable; is_editable:gboolean);cdecl;
          move_cursor : procedure (editable:PGtkEditable; x:gint; y:gint);cdecl;
          move_word : procedure (editable:PGtkEditable; n:gint);cdecl;
          move_page : procedure (editable:PGtkEditable; x:gint; y:gint);cdecl;
          move_to_row : procedure (editable:PGtkEditable; row:gint);cdecl;
          move_to_column : procedure (editable:PGtkEditable; row:gint);cdecl;
          kill_char : procedure (editable:PGtkEditable; direction:gint);cdecl;
          kill_word : procedure (editable:PGtkEditable; direction:gint);cdecl;
          kill_line : procedure (editable:PGtkEditable; direction:gint);cdecl;
          cut_clipboard : procedure (editable:PGtkEditable);cdecl;
          copy_clipboard : procedure (editable:PGtkEditable);cdecl;
          paste_clipboard : procedure (editable:PGtkEditable);cdecl;
          update_text : procedure (editable:PGtkEditable; start_pos:gint; end_pos:gint); cdecl;
          get_chars : function (editable:PGtkEditable; start_pos:gint; end_pos:gint):Pgchar; cdecl;
          set_selection : procedure (editable:PGtkEditable; start_pos:gint; end_pos:gint); cdecl;
          set_position : procedure (editable:PGtkEditable; position:gint);cdecl;
       end;
Type
  GTK_EDITABLE=PGtkEditable;
  GTK_EDITABLE_CLASS=PGtkEditableClass;
function  GTK_IS_EDITABLE(obj:pointer):boolean;
function  GTK_IS_EDITABLE_CLASS(klass:pointer):boolean;
 
 
 
 
  type
     PGtkTextFont = pointer;
     PGtkPropertyMark = ptr TGtkPropertyMark;
     TGtkPropertyMark = record
          theproperty : PGList;
          theoffset : guint;
          theindex : guint;
       end;
     PGtkText = ptr TGtkText;
     TGtkText = record
          editable : TGtkEditable;
          text_area : PGdkWindow;
          hadj : PGtkAdjustment;
          vadj : PGtkAdjustment;
          gc : PGdkGC;
          line_wrap_bitmap : PGdkPixmap;
          line_arrow_bitmap : PGdkPixmap;
          text : union
                 wc : PGdkWChar ;
                 ch : Pguchar ;
              end;
          text_len : guint;
          gap_position : guint;
          gap_size : guint;
          text_end : guint;
          line_start_cache : PGList;
          first_line_start_index : guint;
          first_cut_pixels : guint;
          first_onscreen_hor_pixel : guint;
          first_onscreen_ver_pixel : guint;
          flag0 : word;{Todo win32:longint}
          freeze_count : guint;
          text_properties : PGList;
          text_properties_end : PGList;
          point : TGtkPropertyMark;
          scratch_buffer :union
                 wc : PGdkWChar;
                 ch : Pguchar ;
              end;
          scratch_buffer_len : guint;
          last_ver_value : gint;
          cursor_pos_x : gint;
          cursor_pos_y : gint;
          cursor_mark : TGtkPropertyMark;
          cursor_char : TGdkWChar;
          cursor_char_offset : gchar;
          cursor_virtual_x : gint;
          cursor_drawn_level : gint;
          current_line : PGList;
          tab_stops : PGList;
          default_tab_width : gint;
          current_font : PGtkTextFont;
          timer : gint;
          button : guint;
          bg_gc : PGdkGC;
       end;
  const
     bm_TGtkText_line_wrap = $1;
     bp_TGtkText_line_wrap = 0;
     bm_TGtkText_word_wrap = $2;
     bp_TGtkText_word_wrap = 1;
     bm_TGtkText_use_wchar = $4;
     bp_TGtkText_use_wchar = 2;
function  line_wrap(var a : TGtkText) : guint;
procedure set_line_wrap(var a : TGtkText; __line_wrap : guint);
function  word_wrap(var a : TGtkText) : guint;
procedure set_word_wrap(var a : TGtkText; __word_wrap : guint);
function  use_wchar(var a : TGtkText) : guint; overload;
procedure set_use_wchar(var a : TGtkText; __use_wchar : guint);overload;
  type
     PGtkTextClass = ptr TGtkTextClass;
     TGtkTextClass = record
          parent_class : TGtkEditableClass;
          set_scroll_adjustments : procedure (text:PGtkText; hadjustment:PGtkAdjustment; vadjustment:PGtkAdjustment);cdecl;
       end;
Type
  GTK_TEXT=PGtkText;
  GTK_TEXT_CLASS=PGtkTextClass;
function  GTK_TEXT_INDEX(t:PGtkText; index:longint):char;
function  GTK_IS_TEXT(obj:pointer):boolean;
function  GTK_IS_TEXT_CLASS(klass:pointer):boolean;
 
    type
       PGtkArrow = ptr TGtkArrow;
       TGtkArrow = record
            misc : TGtkMisc;
            arrow_type : gint16;
            shadow_type : gint16;
         end;
       PGtkArrowClass = ptr TGtkArrowClass;
       TGtkArrowClass = record
            parent_class : TGtkMiscClass;
         end;
Type
  GTK_ARROW = PGtkArrow;
  GTK_ARROW_CLASS = PGtkArrowClass;
 
 
 
  type
     PGtkPixmap = ptr TGtkPixmap;
     TGtkPixmap = record
          misc : TGtkMisc;
          pixmap : PGdkPixmap;
          mask : PGdkBitmap;
          pixmap_insensitive : PGdkPixmap;
          flag0 : word;{Todo win32:longint}
       end;
  const
     bm_TGtkPixmap_build_insensitive = $1;
     bp_TGtkPixmap_build_insensitive = 0;
function  build_insensitive(var a : TGtkPixmap) : guint;
procedure set_build_insensitive(var a : TGtkPixmap; __build_insensitive : guint);
  type
     PGtkPixmapClass = ptr TGtkPixmapClass;
     TGtkPixmapClass = record
          parent_class : TGtkMiscClass;
       end;
Type
  GTK_PIXMAP=PGtkPixmap;
  GTK_PIXMAP_CLASS=PGtkPixmapClass;
function  GTK_IS_PIXMAP(obj:pointer):boolean;
function  GTK_IS_PIXMAP_CLASS(klass:pointer):boolean;
 
 
 
 
    type
       PGtkButton = ptr TGtkButton;
       TGtkButton = record
            bin : TGtkBin;
            child : PGtkWidget;
            flag0 : word;{Todo win32 : longint}
         end;
    const
       bm_in_button = 1;
       bp_in_button = 0;
       bm_button_down = 2;
       bp_button_down = 1;
       bm_relief = 4;
       bp_relief = 2;
function  in_button(var a : TGtkButton) : guint;overload;
procedure set_in_button(var a : TGtkButton; __in_button : guint);overload;
function  button_down(var a : TGtkButton) : guint;
procedure set_button_down(var a : TGtkButton; __button_down : guint);
function  relief(var a : TGtkButton) : guint;
procedure set_relief(var a : TGtkButton; __button_down : guint);
    type
       PGtkButtonClass = ptr TGtkButtonClass;
       TGtkButtonClass = record
            parent_class : TGtkBinClass;
            pressed : procedure (button:PGtkButton); cdecl;
            released : procedure (button:PGtkButton); cdecl;
            clicked : procedure (button:PGtkButton); cdecl;
            enter : procedure (button:PGtkButton); cdecl;
            _leave : procedure (button:PGtkButton); cdecl;{TODO}
         end;
Type
  GTK_BUTTON=PGtkButton;
  GTK_BUTTON_CLASS=PGtkButtonClass;
function  GTK_IS_BUTTON(obj:pointer):boolean;
function  GTK_IS_BUTTON_CLASS(klass:pointer):boolean;
 
 
 
 
    type
       PGtkToggleButton = ptr TGtkToggleButton;
       TGtkToggleButton = record
          button : TGtkButton;
          flag0 : longint;
          event_window : PGdkWindow;
        end;
  const
     bm_TGtkToggleButton_active = $1;
     bp_TGtkToggleButton_active = 0;
     bm_TGtkToggleButton_draw_indicator = $2;
     bp_TGtkToggleButton_draw_indicator = 1;
function  active(var a : TGtkToggleButton) : guint;overload;
procedure set_active(var a : TGtkToggleButton; __active : guint);overload;
function  draw_indicator(var a : TGtkToggleButton) : guint;
procedure set_draw_indicator(var a : TGtkToggleButton; __draw_indicator : guint);
    type
       PGtkToggleButtonClass = ptr TGtkToggleButtonClass;
       TGtkToggleButtonClass = record
            parent_class : TGtkButtonClass;
            toggled : procedure (toggle_button:PGtkToggleButton); cdecl;
         end;
Type
  GTK_TOGGLE_BUTTON=PGtkToggleButton;
  GTK_TOGGLE_BUTTON_CLASS=PGtkToggleButtonClass;
function  GTK_IS_TOGGLE_BUTTON(obj:pointer):boolean;
function  GTK_IS_TOGGLE_BUTTON_CLASS(klass:pointer):boolean;

 
 
 
 
    type
       PGtkCheckButton = ptr TGtkCheckButton;
       TGtkCheckButton = record
            toggle_button : TGtkToggleButton;
         end;
       PGtkCheckButtonClass = ptr TGtkCheckButtonClass;
       TGtkCheckButtonClass = record
            parent_class : TGtkToggleButtonClass;
            indicator_size : guint16;
            indicator_spacing : guint16;
            draw_indicator : procedure (check_button:PGtkCheckButton; area:PGdkRectangle); cdecl;
         end;
Type
  GTK_CHECK_BUTTON=PGtkCheckButton;
  GTK_CHECK_BUTTON_CLASS=PGtkCheckButtonClass;
function  GTK_IS_CHECK_BUTTON(obj:pointer):boolean;
function  GTK_IS_CHECK_BUTTON_CLASS(klass:pointer):boolean;
 
 
 
 
    type
       PGtkMenuItem = ptr TGtkMenuItem;
       TGtkMenuItem = record
            item : TGtkItem;
            submenu : PGtkWidget;
            accelerator_signal : guint;
            toggle_size : guint16;
            accelerator_width : guint16;
            flag0 : word;{Todo:win32 longint}
            timer : guint;
         end;
    const
       bm_show_toggle_indicator = 1;
       bp_show_toggle_indicator = 0;
       bm_show_submenu_indicator = 2;
       bp_show_submenu_indicator = 1;
       bm_submenu_placement = 4;
       bp_submenu_placement = 2;
       bm_submenu_direction = 8;
       bp_submenu_direction = 3;
       bm_right_justify = 16;
       bp_right_justify = 4;
function  show_toggle_indicator(var a : TGtkMenuItem) : guint;
procedure set_show_toggle_indicator(var a : TGtkMenuItem; __show_toggle_indicator : guint);
function  show_submenu_indicator(var a : TGtkMenuItem) : guint;
procedure set_show_submenu_indicator(var a : TGtkMenuItem; __show_submenu_indicator : guint);
function  submenu_placement(var a : TGtkMenuItem) : guint;overload;
procedure set_submenu_placement(var a : TGtkMenuItem; __submenu_placement : guint);overload;
function  submenu_direction(var a : TGtkMenuItem) : guint;
procedure set_submenu_direction(var a : TGtkMenuItem; __submenu_direction : guint);
function  right_justify(var a : TGtkMenuItem) : guint;
procedure set_right_justify(var a : TGtkMenuItem; __right_justify : guint);
    type
       PGtkMenuItemClass = ptr TGtkMenuItemClass;
       TGtkMenuItemClass = record
          parent_class : TGtkItemClass;
          toggle_size : guint;
          flag0 : word;{Todo : win32 longint}
          activate : procedure (menu_item:PGtkMenuItem);cdecl;
          activate_item : procedure (menu_item:PGtkMenuItem);cdecl;
        end;
Type
  GTK_MENU_ITEM=PGtkMenuItem;
  GTK_MENU_ITEM_CLASS=PGtkMenuItemClass;
function  GTK_IS_MENU_ITEM(obj:pointer):boolean;
function  GTK_IS_MENU_ITEM_CLASS(klass:pointer):boolean;
 
 
 
 
    type
       PGtkCheckMenuItem = ptr TGtkCheckMenuItem;
       TGtkCheckMenuItem = record
            menu_item : TGtkMenuItem;
            flag0 : longint;
         end;
    const
       bm_checkmenuitem_active = 1;
       bp_checkmenuitem_active = 0;
       bm_checkmenuitem_always_show_toggle = 2;
       bp_checkmenuitem_always_show_toggle = 1;

function  active(var a : TGtkCheckMenuItem) : guint;overload;
procedure set_active(var a : TGtkCheckMenuItem; __active : guint);overload;
function  always_show_toggle(var a : TGtkCheckMenuItem) : guint;
procedure set_always_show_toggle(var a : TGtkCheckMenuItem; __always_show_toggle : guint);
    type
       PGtkCheckMenuItemClass = ptr TGtkCheckMenuItemClass;
       TGtkCheckMenuItemClass = record
            parent_class : TGtkMenuItemClass;
            toggled : procedure (check_menu_item:PGtkCheckMenuItem); cdecl;
            draw_indicator : procedure (check_menu_item:PGtkCheckMenuItem; area:PGdkRectangle); cdecl;
         end;
Type
  GTK_CHECK_MENU_ITEM=PGtkCheckMenuItem;
  GTK_CHECK_MENU_ITEM_CLASS=PGtkCheckMenuItemClass;
function  GTK_IS_CHECK_MENU_ITEM(obj:pointer):boolean;
function  GTK_IS_CHECK_MENU_ITEM_CLASS(klass:pointer):boolean;

 
 
 
 
  type
     PGtkTearoffMenuItem = ptr TGtkTearoffMenuItem;
     TGtkTearoffMenuItem = record
          menu_item : TGtkMenuItem;
          flag0 : longint;
       end;
  const
     bm_TGtkTearoffMenuItem_torn_off = $1;
     bp_TGtkTearoffMenuItem_torn_off = 0;
function  torn_off(var a : TGtkTearoffMenuItem) : guint;overload;
procedure set_torn_off(var a : TGtkTearoffMenuItem; __torn_off : guint);overload;
  type
     PGtkTearoffMenuItemClass = ptr TGtkTearoffMenuItemClass;
     TGtkTearoffMenuItemClass = record
          parent_class : TGtkMenuItemClass;
       end;
type
  GTK_TEAROFF_MENU_ITEM=PGtkTearoffMenuItem;
  GTK_TEAROFF_MENU_ITEM_CLASS=PGtkTearoffMenuItemClass;
function  GTK_IS_TEAROFF_MENU_ITEM(obj:pointer):boolean;
function  GTK_IS_TEAROFF_MENU_ITEM_CLASS(klass:pointer):boolean;

 
 
 
  type
     Tgfloatarray = Array[0 to 1] of gfloat;
     PgfloatArray = ptr TgfloatArray;
     PGtkCurve = ptr TGtkCurve;
     TGtkCurve = record
          graph : TGtkDrawingArea;
          cursor_type : gint;
          min_x : gfloat;
          max_x : gfloat;
          min_y : gfloat;
          max_y : gfloat;
          pixmap : PGdkPixmap;
          curve_type : TGtkCurveType;
          height : gint;
          grab_point : gint;
          last : gint;
          num_points : gint;
          point : PGdkPoint;
          num_ctlpoints : gint;
          ctlpoint : PgfloatArray;
       end;
     PGtkCurveClass = ptr TGtkCurveClass;
     TGtkCurveClass = record
          parent_class : TGtkDrawingAreaClass;
          curve_type_changed : procedure (curve:PGtkCurve); cdecl;
       end;
Type
  GTK_CURVE=PGtkCurve;
  GTK_CURVE_CLASS=PGtkCurveClass;

function  GTK_IS_CURVE(obj:pointer):boolean;
function  GTK_IS_CURVE_CLASS(klass:pointer):boolean;




function  GTK_IS_DIALOG(obj:pointer):boolean;
function  GTK_IS_DIALOG_CLASS(klass:pointer):boolean;


  type
     PGtkDialog = ptr TGtkDialog;
     TGtkDialog = record
          window : TGtkWindow;
          vbox : PGtkWidget;
          action_area : PGtkWidget;
       end;
     PGtkDialogClass = ptr TGtkDialogClass;
     TGtkDialogClass = record
          parent_class : TGtkWindowClass;
       end;
Type
  GTK_DIALOG=PGtkDialog;
  GTK_DIALOG_CLASS=PGtkDialogClass;
 
 
 
 
  type
     PGtkEntry = ptr TGtkEntry;
     TGtkEntry = record
          editable : TGtkEditable;
          text_area : PGdkWindow;
          backing_pixmap : PGdkPixmap;
          cursor : PGdkCursor;
          text : PGdkWChar;
          text_size : guint16;
          text_length : guint16;
          text_max_length : guint16;
          scroll_offset : gint;
          flag0 : word;{todo win32:longint}
          timer : guint32;
          button : guint;
          char_offset : Pgint;
          text_mb : Pgchar;
          flag1 : word;{todo win32:longint}
       end;
  const
     bm_TGtkEntry_visible = $1;
     bp_TGtkEntry_visible = 0;
     bm_TGtkEntry_text_mb_dirty = $1;
     bp_TGtkEntry_text_mb_dirty = 0;
     bm_TGtkEntry_use_wchar = $2;
     bp_TGtkEntry_use_wchar = 1;
function  visible(var a : TGtkEntry) : guint;overload;
procedure set_visible(var a : TGtkEntry; __visible : guint);overload;
function  text_mb_dirty(var a : TGtkEntry) : guint;
procedure set_text_mb_dirty(var a : TGtkEntry; __text_mb_dirty : guint);
function  use_wchar(var a : TGtkEntry) : guint;overload;
procedure set_use_wchar(var a : TGtkEntry; __use_wchar : guint);overload;
  type
     PGtkEntryClass = ptr TGtkEntryClass;
     TGtkEntryClass = record
          parent_class : TGtkEditableClass;
       end;
Type
  GTK_ENTRY=PGtkEntry;
  GTK_ENTRY_CLASS=PGtkEntryClass;
function  GTK_IS_ENTRY(obj:pointer):boolean;
function  GTK_IS_ENTRY_CLASS(klass:pointer):boolean;
 
 
 
 
  type
     PGtkEventBox = ptr TGtkEventBox;
     TGtkEventBox = record
          bin : TGtkBin;
       end;
     PGtkEventBoxClass = ptr TGtkEventBoxClass;
     TGtkEventBoxClass = record
          parent_class : TGtkBinClass;
       end;
Type
  GTK_EVENT_BOX=PGtkEventBox;
  GTK_EVENT_BOX_CLASS=PGtkEventBoxClass;

function  GTK_IS_EVENT_BOX(obj:pointer):boolean;
function  GTK_IS_EVENT_BOX_CLASS(klass:pointer):boolean;

 
 
 
 
  type
     PGtkFileSelection = ptr TGtkFileSelection;
     TGtkFileSelection = record
          window : TGtkWindow;
          dir_list : PGtkWidget;
          file_list : PGtkWidget;
          selection_entry : PGtkWidget;
          selection_text : PGtkWidget;
          main_vbox : PGtkWidget;
          ok_button : PGtkWidget;
          cancel_button : PGtkWidget;
          help_button : PGtkWidget;
          history_pulldown : PGtkWidget;
          history_menu : PGtkWidget;
          history_list : PGList;
          fileop_dialog : PGtkWidget;
          fileop_entry : PGtkWidget;
          fileop_file : ptr gchar;
          cmpl_state : gpointer;
          fileop_c_dir : PGtkWidget;
          fileop_del_file : PGtkWidget;
          fileop_ren_file : PGtkWidget;
          button_area : PGtkWidget;
          action_area : PGtkWidget;
       end;
     PGtkFileSelectionClass = ptr TGtkFileSelectionClass;
     TGtkFileSelectionClass = record
          parent_class : TGtkWindowClass;
       end;
Type
  GTK_FILE_SELECTION=PGtkFileSelection;
  GTK_FILE_SELECTION_CLASS=PGtkFileSelectionClass;

function  GTK_IS_FILE_SELECTION(obj:pointer):boolean;
function  GTK_IS_FILE_SELECTION_CLASS(klass:pointer):boolean;

 
 
 
 
  type
     PGtkFixed = ptr TGtkFixed;
     TGtkFixed = record
          container : TGtkContainer;
          children : PGList;
       end;
     PGtkFixedClass = ptr TGtkFixedClass;
     TGtkFixedClass = record
          parent_class : TGtkContainerClass;
       end;
     PGtkFixedChild = ptr TGtkFixedChild;
     TGtkFixedChild = record
          widget : PGtkWidget;
          x : gint16;
          y : gint16;
       end;
Type
  GTK_FIXED=PGtkFixed;
  GTK_FIXED_CLASS=PGtkFixedClass;

function  GTK_IS_FIXED(obj:pointer):boolean;
function  GTK_IS_FIXED_CLASS(klass:pointer):boolean;


 
 
 
 
  type
     PGtkHandleBox = ptr TGtkHandleBox;
     TGtkHandleBox = record
          bin : TGtkBin;
          bin_window : PGdkWindow;
          float_window : PGdkWindow;
          shadow_type : TGtkShadowType;
          flag0 : word;{todo win32:Longint}
          deskoff_x : gint;
          deskoff_y : gint;
          attach_allocation : TGtkAllocation;
          float_allocation : TGtkAllocation;
       end;
  const
     bm_TGtkHandleBox_handle_position = $3;
     bp_TGtkHandleBox_handle_position = 0;
     bm_TGtkHandleBox_float_window_mapped = $4;
     bp_TGtkHandleBox_float_window_mapped = 2;
     bm_TGtkHandleBox_child_detached = $8;
     bp_TGtkHandleBox_child_detached = 3;
     bm_TGtkHandleBox_in_drag = $10;
     bp_TGtkHandleBox_in_drag = 4;
     bm_TGtkHandleBox_shrink_on_detach = $20;
     bp_TGtkHandleBox_shrink_on_detach = 5;
     bm_TGtkHandleBox_snap_edge = $1C0;
     bp_TGtkHandleBox_snap_edge = 6;
function  handle_position(var a : TGtkHandleBox) : guint;
procedure set_handle_position(var a : TGtkHandleBox; __handle_position : guint);
function  float_window_mapped(var a : TGtkHandleBox) : guint;
procedure set_float_window_mapped(var a : TGtkHandleBox; __float_window_mapped : guint);
function  child_detached(var a : TGtkHandleBox) : guint;
procedure set_child_detached(var a : TGtkHandleBox; __child_detached : guint);
function  in_Drag(var a : TGtkHandleBox) : guint;overload;
procedure set_in_drag(var a : TGtkHandleBox; __in_drag : guint);overload;
function  shrink_on_detach(var a : TGtkHandleBox) : guint;
procedure set_shrink_on_detach(var a : TGtkHandleBox; __shrink_on_detach : guint);
function  snap_edge(var a : TGtkHandleBox) : gint;
procedure set_snap_edge(var a : TGtkHandleBox; __snap_edge : gint);
  type
     PGtkHandleBoxClass = ptr TGtkHandleBoxClass;
     TGtkHandleBoxClass = record
          parent_class : TGtkBinClass;
          child_attached : procedure (handle_box:PGtkHandleBox; child:PGtkWidget); cdecl;
          child_detached : procedure (handle_box:PGtkHandleBox; child:PGtkWidget); cdecl;
       end;
Type
  GTK_HANDLE_BOX=PGtkHandleBox;
  GTK_HANDLE_BOX_CLASS=PGtkHandleBoxClass;

function  GTK_IS_HANDLE_BOX(obj:pointer):boolean;
function  GTK_IS_HANDLE_BOX_CLASS(klass:pointer):boolean;

 
 
 
 
  type
     PGtkImage = ptr TGtkImage;
     TGtkImage = record
          misc : TGtkMisc;
          image : PGdkImage;
          mask : PGdkBitmap;
       end;
     PGtkImageClass = ptr TGtkImageClass;
     TGtkImageClass = record
          parent_class : TGtkMiscClass;
       end;
Type
  GTK_IMAGE=PGtkImage;
  GTK_IMAGE_CLASS=PGtkImageClass;
function  GTK_IS_IMAGE(obj:pointer):boolean;
function  GTK_IS_IMAGE_CLASS(klass:pointer):boolean;

 
 
 
  type
     PGtkInputDialog = ptr TGtkInputDialog;
     TGtkInputDialog = record
          dialog : TGtkDialog;
          axis_list : PGtkWidget;
          axis_listbox : PGtkWidget;
          mode_optionmenu : PGtkWidget;
          close_button : PGtkWidget;
          save_button : PGtkWidget;
          axis_items : array[0 to GDK_AXIS_LAST-1] of PGtkWidget;
          current_device : guint32;
          keys_list : PGtkWidget;
          keys_listbox : PGtkWidget;
       end;
     PGtkInputDialogClass = ptr TGtkInputDialogClass;
     TGtkInputDialogClass = record
          parent_class : TGtkWindowClass;
          enable_device : procedure (inputd:PGtkInputDialog; devid:guint32);cdecl;
          disable_device : procedure (inputd:PGtkInputDialog; devid:guint32);cdecl;
       end;
Type
  GTK_INPUT_DIALOG=PGtkInputDialog;
  GTK_INPUT_DIALOG_CLASS=PGtkInputDialogClass;
function  GTK_IS_INPUT_DIALOG(obj:pointer):boolean;


 
 
function  GTK_IS_INPUT_DIALOG_CLASS(klass:pointer):boolean;
 
 
  type
     PGtkList = ptr TGtkList;
     TGtkList = record
          container : TGtkContainer;
          children : PGList;
          selection : PGList;
          undo_selection : PGList;
          undo_unselection : PGList;
          last_focus_child : PGtkWidget;
          undo_focus_child : PGtkWidget;
          htimer : guint;
          vtimer : guint;
          anchor : gint;
          drag_pos : gint;
          anchor_state : TGtkStateType;
          flag0 : word; {Todo win32 : longint}
       end;
  const
     bm_TGtkList_selection_mode = $3;
     bp_TGtkList_selection_mode = 0;
     bm_TGtkList_drag_selection = $4;
     bp_TGtkList_drag_selection = 2;
     bm_TGtkList_add_mode = $8;
     bp_TGtkList_add_mode = 3;
function  selection_mode(var a : TGtkList) : guint;overload;
procedure set_selection_mode(var a : TGtkList; __selection_mode : guint);overload;
function  drag_selection(var a : TGtkList) : guint;cdecl;
procedure set_drag_selection(var a : TGtkList; __drag_selection : guint);cdecl;
function  add_mode(var a : TGtkList) : guint;
procedure set_add_mode(var a : TGtkList; __add_mode : guint);
  type
     PGtkListClass = ptr TGtkListClass;
     TGtkListClass = record
          parent_class : TGtkContainerClass;
          selection_changed : procedure (list:PGtkList); cdecl;
          select_child : procedure (list:PGtkList; child:PGtkWidget); cdecl;
          unselect_child : procedure (list:PGtkList; child:PGtkWidget); cdecl;
       end;
Type
  GTK_LIST=PGtkList;
  GTK_LIST_CLASS=PGtkListClass;

function  GTK_IS_LIST(obj:pointer):boolean;
function  GTK_IS_LIST_CLASS(klass:pointer):boolean;

 
 
 
 
  type
     PGtkListItem = ptr TGtkListItem;
     TGtkListItem = record
          item : TGtkItem;
       end;
     PGtkListItemClass = ptr TGtkListItemClass;
     TGtkListItemClass = record
          parent_class : TGtkItemClass;
          toggle_focus_row : procedure (list_item:PGtkListItem);cdecl;
          select_all : procedure (list_item:PGtkListItem);cdecl;
          unselect_all : procedure (list_item:PGtkListItem);cdecl;
          undo_selection : procedure (list_item:PGtkListItem);cdecl;
          start_selection : procedure (list_item:PGtkListItem);cdecl;
          end_selection : procedure (list_item:PGtkListItem);cdecl;
          extend_selection : procedure (list_item:PGtkListItem; scroll_type:TGtkScrollType; position:gfloat; auto_start_selection:gboolean);cdecl;
          scroll_horizontal : procedure (list_item:PGtkListItem; scroll_type:TGtkScrollType; position:gfloat);cdecl;
          scroll_vertical : procedure (list_item:PGtkListItem; scroll_type:TGtkScrollType; position:gfloat);cdecl;
          toggle_add_mode : procedure (list_item:PGtkListItem);cdecl;
       end;
Type
  GTK_LIST_ITEM=PGtkListItem;
  GTK_LIST_ITEM_CLASS=PGtkListItemClass;

function  GTK_IS_LIST_ITEM(obj:pointer):boolean;
function  GTK_IS_LIST_ITEM_CLASS(klass:pointer):boolean;

 
 
  type
     PGtkMenuShell = ptr TGtkMenuShell;
     TGtkMenuShell = record
          container : TGtkContainer;
          children : PGList;
          active_menu_item : PGtkWidget;
          parent_menu_shell : PGtkWidget;
          flag0 : word;{Todo win32:longint}
          activate_time : guint32;
       end;
  const
     bm_TGtkMenuShell_active = $1;
     bp_TGtkMenuShell_active = 0;
     bm_TGtkMenuShell_have_grab = $2;
     bp_TGtkMenuShell_have_grab = 1;
     bm_TGtkMenuShell_have_xgrab = $4;
     bp_TGtkMenuShell_have_xgrab = 2;
     bm_TGtkMenuShell_button = $18;
     bp_TGtkMenuShell_button = 3;
     bm_TGtkMenuShell_ignore_leave = $20;
     bp_TGtkMenuShell_ignore_leave = 5;
     bm_TGtkMenuShell_menu_flag = $40;
     bp_TGtkMenuShell_menu_flag = 6;
     bm_TGtkMenuShell_ignore_enter = $80;
     bp_TGtkMenuShell_ignore_enter = 7;
function  active(var a : TGtkMenuShell) : guint;overload;
procedure set_active(var a : TGtkMenuShell; __active : guint);overload;
function  have_grab(var a : TGtkMenuShell) : guint;
procedure set_have_grab(var a : TGtkMenuShell; __have_grab : guint);
function  have_xgrab(var a : TGtkMenuShell) : guint;
procedure set_have_xgrab(var a : TGtkMenuShell; __have_xgrab : guint);
function  button(var a : TGtkMenuShell) : guint;overload;
procedure set_button(var a : TGtkMenuShell; __button : guint);overload;
function  ignore_leave(var a : TGtkMenuShell) : guint;
procedure set_ignore_leave(var a : TGtkMenuShell; __ignore_leave : guint);
function  menu_flag(var a : TGtkMenuShell) : guint;
procedure set_menu_flag(var a : TGtkMenuShell; __menu_flag : guint);
function  ignore_enter(var a : TGtkMenuShell) : guint;
procedure set_ignore_enter(var a : TGtkMenuShell; __ignore_enter : guint);
  type
     PGtkMenuShellClass = ptr TGtkMenuShellClass;
     TGtkMenuShellClass = record
          parent_class : TGtkContainerClass;
          flag0 : word;{Todo win32 longint}
          deactivate : procedure (menu_shell:PGtkMenuShell); cdecl;
          selection_done : procedure (menu_shell:PGtkMenuShell);cdecl;
          move_current : procedure (menu_shell:PGtkMenuShell; direction:TGtkMenuDirectionType);cdecl;
          activate_current : procedure (menu_shell:PGtkMenuShell; force_hide:gboolean);cdecl;
          cancel : procedure (menu_shell:PGtkMenuShell);cdecl;
       end;
  const
     bm_TGtkMenuShellClass_submenu_placement = $1;
     bp_TGtkMenuShellClass_submenu_placement = 0;
function  submenu_placement(var a : TGtkMenuShellClass) : guint;overload;
procedure set_submenu_placement(var a : TGtkMenuShellClass; __submenu_placement : guint);overload;
Type
  GTK_MENU_SHELL=PGtkMenuShell;
  GTK_MENU_SHELL_CLASS=PGtkMenuShellClass;

function  GTK_IS_MENU_SHELL(obj:pointer):boolean;
function  GTK_IS_MENU_SHELL_CLASS(klass:pointer):boolean;

 
 
 
 
  type
     TGtkMenuCallback = procedure (widget:PGtkWidget; user_data:gpointer); cdecl;
     PGtkMenuEntry = ptr TGtkMenuEntry;
     TGtkMenuEntry = record
          path : Pgchar;
          accelerator : Pgchar;
          callback : TGtkMenuCallback;
          callback_data : gpointer;
          widget : PGtkWidget;
       end;
     PGtkMenuPath = ptr TGtkMenuPath;
     TGtkMenuPath = record
          path : Pgchar;
          widget : PGtkWidget;
       end;
     PGtkMenuFactory = ptr TGtkMenuFactory;
     TGtkMenuFactory = record
          path : Pgchar;
          thetype : TGtkMenuFactoryType;
          accel_group :  PGtkAccelGroup;
          widget : PGtkWidget;
          subfactories : PGList;
       end;

 
 
 
 
  type
     PGtkMenu = ptr TGtkMenu;
     TGtkMenuPositionFunc = procedure (menu:PGtkMenu; x:Pgint; y:Pgint; user_data:gpointer); cdecl;
     TGtkMenuDetachFunc = procedure (attach_widget:PGtkWidget; menu:PGtkMenu); cdecl;
     TGtkMenu = record
          menu_shell : TGtkMenuShell;
          parent_menu_item : PGtkWidget;
          old_active_menu_item : PGtkWidget;
          accel_group : PGtkAccelGroup;
          position_func : TGtkMenuPositionFunc;
          position_func_data : gpointer;
          toplevel : PGtkWidget;
          tearoff_window : PGtkWidget;
          flag0 : word;{Todo win32:Longint}
       end;
  const
     bm_TGtkMenu_torn_off = $1;
     bp_TGtkMenu_torn_off = 0;

function  torn_off(var a : TGtkMenu) : guint;overload;
procedure set_torn_off(var a : TGtkMenu; __torn_off : guint);overload;
type
     PGtkMenuClass = ptr TGtkMenuClass;
     TGtkMenuClass = record
          parent_class : TGtkMenuShellClass;
       end;
Type
  GTK_MENU = PGtkMenu;
  GTK_MENU_CLASS = PGtkMenuClass;

function  GTK_IS_MENU(obj:pointer):boolean;
function  GTK_IS_MENU_CLASS(klass:pointer):boolean;

 
 
 
 
  type
     PGtkMenuBar = ptr TGtkMenuBar;
     TGtkMenuBar = record
          menu_shell : TGtkMenuShell;
          shadow_type : TGtkShadowType;
       end;
     PGtkMenuBarClass = ptr TGtkMenuBarClass;
     TGtkMenuBarClass = record
          parent_class : TGtkMenuShellClass;
       end;
Type
  GTK_MENU_BAR=PGtkMenuBar;
  GTK_MENU_BAR_CLASS=PGtkMenuBarClass;
function  GTK_IS_MENU_BAR(obj:pointer):boolean;
function  GTK_IS_MENU_BAR_CLASS(klass:pointer):boolean;
 
 
 
 
  type
     PGtkOptionMenu = ptr TGtkOptionMenu;
     TGtkOptionMenu = record
          button : TGtkButton;
          menu : PGtkWidget;
          menu_item : PGtkWidget;
          width : guint16;
          height : guint16;
       end;
     PGtkOptionMenuClass = ptr TGtkOptionMenuClass;
     TGtkOptionMenuClass = record
          parent_class : TGtkButtonClass;
       end;
Type
  GTK_OPTION_MENU=PGtkOptionMenu;
  GTK_OPTION_MENU_CLASS=PGtkOptionMenuClass;

function  GTK_IS_OPTION_MENU(obj:pointer):boolean;
function  GTK_IS_OPTION_MENU_CLASS(klass:pointer):boolean;

 
 
 
 
  type
     PGtkPreview = ptr TGtkPreview;
     TGtkPreview = record
          widget : TGtkWidget;
          buffer : Pguchar;
          buffer_width : guint16;
          buffer_height : guint16;
          bpp : guint16;
          rowstride : guint16;
          dither : TGdkRgbDither;
          flag0 : word;{Todo win32:Longint}
       end;
  const
     bm_TGtkPreview_type = $1;
     bp_TGtkPreview_type = 0;
     bm_TGtkPreview_expand = $2;
     bp_TGtkPreview_expand = 1;
function  thetype(var a : TGtkPreview) : guint;
procedure set_thetype(var a : TGtkPreview; __type : guint);
function  expand(var a : TGtkPreview) : guint;overload;
procedure set_expand(var a : TGtkPreview; __expand : guint);overload;
  type
     PGtkPreviewInfo = ptr TGtkPreviewInfo;
     PGtkDitherInfo = ptr TGtkDitherInfo;
     TGtkPreviewInfo = record
          visual : PGdkVisual;
          cmap : PGdkColormap;
          lookup : Pguchar;
          gamma : gdouble;
       end;
     TGtkDitherInfo = union
             s : array[0 to 1] of gushort;
             c : array[0 to 3] of guchar;
         end;
     PGtkPreviewClass = ptr TGtkPreviewClass;
     TGtkPreviewClass = record
          parent_class : TGtkWidgetClass;
          info : TGtkPreviewInfo;
       end;
Type
  GTK_PREVIEW=PGtkPreview;
  GTK_PREVIEW_CLASS=PGtkPreviewClass;
function  GTK_IS_PREVIEW(obj:pointer):boolean;
function  GTK_IS_PREVIEW_CLASS(klass:pointer):boolean;

 
 
 
 
  type
     TGtkPrintFunc = procedure (func_data:gpointer; str:Pgchar);cdecl;
     TGtkTranslateFunc = function (path:Pgchar; func_data:gpointer):Pgchar;cdecl;
     TGtkItemFactoryCallback = procedure ;cdecl;
     TGtkItemFactoryCallback1 = procedure (callback_data:gpointer; callback_action:guint; widget:PGtkWidget);cdecl;
     TGtkItemFactoryCallback2 = procedure (widget:PGtkWidget; callback_data:gpointer; callback_action:guint);cdecl;
     PGtkItemFactory = ptr TGtkItemFactory;
     TGtkItemFactory = record
          theobject : TGtkObject;
          path : Pgchar;
          accel_group : PGtkAccelGroup;
          widget : PGtkWidget;
          items : PGSList;
          translate_func : TGtkTranslateFunc;
          translate_data : gpointer;
          translate_notify : TGtkDestroyNotify;
       end;
     PGtkItemFactoryClass = ptr TGtkItemFactoryClass;
     TGtkItemFactoryClass = record
          object_class : TGtkObjectClass;
          cpair_comment_single : Pgchar;
          item_ht : PGHashTable;
          dummy : gpointer;
       end;
     PGtkItemFactoryEntry = ptr TGtkItemFactoryEntry;
     TGtkItemFactoryEntry = record
          path : Pgchar;
          accelerator : Pgchar;
          callback : TGtkItemFactoryCallback;
          callback_action : guint;
          item_type : Pgchar;
       end;
     PGtkItemFactoryItem = ptr TGtkItemFactoryItem;
     TGtkItemFactoryItem = record
          path : Pgchar;
          accelerator_key : guint;
          accelerator_mods : guint;
          flag0 :word ;{Todo win32:longinnt}
          dummy : Pgchar;
          widgets : PGSList;
       end;
  const
     bm_TGtkItemFactoryItem_modified = $1;
     bp_TGtkItemFactoryItem_modified = 0;
     bm_TGtkItemFactoryItem_in_propagation = $2;
     bp_TGtkItemFactoryItem_in_propagation = 1;
function  modified(var a : TGtkItemFactoryItem) : guint;
procedure set_modified(var a : TGtkItemFactoryItem; __modified : guint);
function  in_propagation(var a : TGtkItemFactoryItem) : guint;
procedure set_in_propagation(var a : TGtkItemFactoryItem; __in_propagation : guint);
type
  GTK_ITEM_FACTORY=TGtkItemFactory;
  GTK_ITEM_FACTORY_CLASS=TGtkItemFactoryClass;
function  GTK_IS_ITEM_FACTORY(obj:pointer):boolean;
function  GTK_IS_ITEM_FACTORY_CLASS(klass:pointer):boolean;

 
 
 
  type
     PGtkProgress = ptr TGtkProgress;
     TGtkProgress = record
          widget : TGtkWidget;
          adjustment : PGtkAdjustment;
          offscreen_pixmap : PGdkPixmap;
          format : Pgchar;
          x_align : gfloat;
          y_align : gfloat;
          flag0 :word ; {Todo win32:longint}
       end;
  const
     bm_TGtkProgress_show_text = $1;
     bp_TGtkProgress_show_text = 0;
     bm_TGtkProgress_activity_mode = $2;
     bp_TGtkProgress_activity_mode = 1;
function  show_text(var a : TGtkProgress) : guint;
procedure set_show_text(var a : TGtkProgress; __show_text : guint);
function  activity_mode(var a : TGtkProgress) : guint;
procedure set_activity_mode(var a : TGtkProgress; __activity_mode : guint);
  type
     PGtkProgressClass = ptr TGtkProgressClass;
     TGtkProgressClass = record
          parent_class : TGtkWidgetClass;
          paint : procedure (progress:PGtkProgress);cdecl;
          update : procedure (progress:PGtkProgress);cdecl;
          act_mode_enter : procedure (progress:PGtkProgress);cdecl;
       end;
type
  GTK_PROGRESS=PGtkProgress;
  GTK_PROGRESS_CLASS=PGtkProgressClass;
function  GTK_IS_PROGRESS(obj:pointer):boolean;
function  GTK_IS_PROGRESS_CLASS(klass:pointer):boolean;

 
 
 
 
 
  type
     TGtkProgressBarStyle = enum
			GTK_PROGRESS_CONTINUOUS;
			GTK_PROGRESS_DISCRETE;
     end;

     TGtkProgressBarOrientation = enum
			GTK_PROGRESS_LEFT_TO_RIGHT;
			GTK_PROGRESS_RIGHT_TO_LEFT;
       	GTK_PROGRESS_BOTTOM_TO_TOP;
			GTK_PROGRESS_TOP_TO_BOTTOM;
     end;
     PGtkProgressBar = ptr TGtkProgressBar;
     TGtkProgressBar = record
          progress : TGtkProgress;
          bar_style : TGtkProgressBarStyle;
          orientation : TGtkProgressBarOrientation;
          blocks : guint;
          in_block : gint;
          activity_pos : gint;
          activity_step : guint;
          activity_blocks : guint;
          flag0 :word ;{Todo win32:Longint}
       end;
  const
     bm_TGtkProgressBar_activity_dir = $1;
     bp_TGtkProgressBar_activity_dir = 0;
function  activity_dir(var a : TGtkProgressBar) : guint;
procedure set_activity_dir(var a : TGtkProgressBar; __activity_dir : guint);
  type
     PGtkProgressBarClass = ptr TGtkProgressBarClass;
     TGtkProgressBarClass = record
          parent_class : TGtkProgressClass;
       end;
Type
  GTK_PROGRESS_BAR=PGtkProgressBar;
  GTK_PROGRESS_BAR_CLASS=PGtkProgressBarClass;
function  GTK_IS_PROGRESS_BAR(obj:pointer):boolean;
function  GTK_IS_PROGRESS_BAR_CLASS(klass:pointer):boolean;
 
 
 
 
  type
     PGtkRadioButton = ptr TGtkRadioButton;
     TGtkRadioButton = record
          check_button : TGtkCheckButton;
          group : PGSList;
       end;
     PGtkRadioButtonClass = ptr TGtkRadioButtonClass;
     TGtkRadioButtonClass = record
          parent_class : TGtkCheckButtonClass;
       end;
Type
  GTK_RADIO_BUTTON=PGtkRadioButton;
  GTK_RADIO_BUTTON_CLASS=PGtkRadioButtonClass;
function  GTK_IS_RADIO_BUTTON(obj:pointer):boolean;
function  GTK_IS_RADIO_BUTTON_CLASS(klass:pointer):boolean;
 
 
 
 
  type
     PGtkRadioMenuItem = ptr TGtkRadioMenuItem;
     TGtkRadioMenuItem = record
          check_menu_item : TGtkCheckMenuItem;
          group : PGSList;
       end;
     PGtkRadioMenuItemClass = ptr TGtkRadioMenuItemClass;
     TGtkRadioMenuItemClass = record
          parent_class : TGtkCheckMenuItemClass;
       end;
Type
  GTK_RADIO_MENU_ITEM=PGtkRadioMenuItem;
  GTK_RADIO_MENU_ITEM_CLASS=PGtkRadioMenuItemClass;
function  GTK_IS_RADIO_MENU_ITEM(obj:pointer):boolean;
function  GTK_IS_RADIO_MENU_ITEM_CLASS(klass:pointer):boolean;
 
 
 
 
  type
     PGtkScrolledWindow = ptr TGtkScrolledWindow;
     TGtkScrolledWindow = record
          container : TGtkBin;
          hscrollbar : PGtkWidget;
          vscrollbar : PGtkWidget;
          flag0 :word ;{Todo win32:longint}
       end;
  const
     bm_TGtkScrolledWindow_hscrollbar_policy = $3;
     bp_TGtkScrolledWindow_hscrollbar_policy = 0;
     bm_TGtkScrolledWindow_vscrollbar_policy = $C;
     bp_TGtkScrolledWindow_vscrollbar_policy = 2;
     bm_TGtkScrolledWindow_hscrollbar_visible = $10;
     bp_TGtkScrolledWindow_hscrollbar_visible = 4;
     bm_TGtkScrolledWindow_vscrollbar_visible = $20;
     bp_TGtkScrolledWindow_vscrollbar_visible = 5;
     bm_TGtkScrolledWindow_window_placement = $C0;
     bp_TGtkScrolledWindow_window_placement = 6;
function  hscrollbar_policy(var a : TGtkScrolledWindow) : guint;
procedure set_hscrollbar_policy(var a : TGtkScrolledWindow; __hscrollbar_policy : guint);
function  vscrollbar_policy(var a : TGtkScrolledWindow) : guint;
procedure set_vscrollbar_policy(var a : TGtkScrolledWindow; __vscrollbar_policy : guint);
function  hscrollbar_visible(var a : TGtkScrolledWindow) : guint;
procedure set_hscrollbar_visible(var a : TGtkScrolledWindow; __hscrollbar_visible : guint);
function  vscrollbar_visible(var a : TGtkScrolledWindow) : guint;
procedure set_vscrollbar_visible(var a : TGtkScrolledWindow; __vscrollbar_visible : guint);
function  window_placement(var a : TGtkScrolledWindow) : guint;
procedure set_window_placement(var a : TGtkScrolledWindow; __window_placement : guint);
  type
     PGtkScrolledWindowClass = ptr TGtkScrolledWindowClass;
     TGtkScrolledWindowClass = record
          parent_class : TGtkBinClass;
          scrollbar_spacing : gint;
       end;
Type
  GTK_SCROLLED_WINDOW=PGtkScrolledWindow;
  GTK_SCROLLED_WINDOW_CLASS=PGtkScrolledWindowClass;
function  GTK_IS_SCROLLED_WINDOW(obj:pointer):boolean;
function  GTK_IS_SCROLLED_WINDOW_CLASS(klass:pointer):boolean;
 
 
 
 
  type
     PGtkTargetEntry = ptr TGtkTargetEntry;
     TGtkTargetEntry = record
          target : Pgchar;
          flags : guint;
          info : guint;
       end;
     PGtkTargetList = ptr TGtkTargetList;
     TGtkTargetList = record
          list : PGList;
          ref_count : guint;
       end;
     PGtkTargetPair = ptr TGtkTargetPair;
     TGtkTargetPair = record
          target : TGdkAtom;
          flags : guint;
          info : guint;
       end;
  type
     TGtkDestDefaults = enum
			GTK_DEST_DEFAULT_MOTION := 1 shl 0;
			GTK_DEST_DEFAULT_HIGHLIGHT := 1 shl 1;
	      GTK_DEST_DEFAULT_DROP := 1 shl 2;
			GTK_DEST_DEFAULT_ALL := $07;
     end;

     TGtkTargetFlags = enum
			GTK_TARGET_SAME_APP := 1 shl 0;
			GTK_TARGET_SAME_WIDGET := 1 shl 1;
     end;
 
 
     TGtkSpinButtonUpdatePolicy = enum
			GTK_UPDATE_ALWAYS;
			GTK_UPDATE_IF_VALID;
		end;

     TGtkSpinType = enum
			GTK_SPIN_STEP_FORWARD;
			GTK_SPIN_STEP_BACKWARD;
       	GTK_SPIN_PAGE_FORWARD;
			GTK_SPIN_PAGE_BACKWARD;
       	GTK_SPIN_HOME;
			GTK_SPIN_END;
			GTK_SPIN_USER_DEFINED;
      end;
     PGtkSpinButton = ptr TGtkSpinButton;
     TGtkSpinButton = record
          entry : TGtkEntry;
          adjustment : PGtkAdjustment;
          panel : PGdkWindow;
          shadow_type : TGtkShadowType;
          timer : guint32;
          ev_time : guint32;
          climb_rate : gfloat;
          timer_step : gfloat;
          update_policy : TGtkSpinButtonUpdatePolicy;
          flag0 :word ;{Todo win32:Longint}
       end;
  const
     bm_TGtkSpinButton_in_child = $3;
     bp_TGtkSpinButton_in_child = 0;
     bm_TGtkSpinButton_click_child = $C;
     bp_TGtkSpinButton_click_child = 2;
     bm_TGtkSpinButton_button = $30;
     bp_TGtkSpinButton_button = 4;
     bm_TGtkSpinButton_need_timer = $40;
     bp_TGtkSpinButton_need_timer = 6;
     bm_TGtkSpinButton_timer_calls = $380;
     bp_TGtkSpinButton_timer_calls = 7;
     bm_TGtkSpinButton_digits = $1C00;
     bp_TGtkSpinButton_digits = 10;
     bm_TGtkSpinButton_numeric = $2000;
     bp_TGtkSpinButton_numeric = 13;
     bm_TGtkSpinButton_wrap = $4000;
     bp_TGtkSpinButton_wrap = 14;
     bm_TGtkSpinButton_snap_to_ticks = $8000;
     bp_TGtkSpinButton_snap_to_ticks = 15;
function  in_child(var a : TGtkSpinButton) : guint;overload;
procedure set_in_child(var a : TGtkSpinButton; __in_child : guint);overload;
function  click_child(var a : TGtkSpinButton) : guint;overload;
procedure set_click_child(var a : TGtkSpinButton; __click_child : guint);overload;
function  button(var a : TGtkSpinButton) : guint;overload;
procedure set_button(var a : TGtkSpinButton; __button : guint);overload;
function  need_timer(var a : TGtkSpinButton) : guint;overload;
procedure set_need_timer(var a : TGtkSpinButton; __need_timer : guint);overload;
function  timer_calls(var a : TGtkSpinButton) : guint;
procedure set_timer_calls(var a : TGtkSpinButton; __timer_calls : guint);
function  digits(var a : TGtkSpinButton) : guint;
procedure set_digits(var a : TGtkSpinButton; __digits : guint);
function  numeric(var a : TGtkSpinButton) : guint;
procedure set_numeric(var a : TGtkSpinButton; __numeric : guint);
function  wrap(var a : TGtkSpinButton) : guint;
procedure set_wrap(var a : TGtkSpinButton; __wrap : guint);
function  snap_to_ticks(var a : TGtkSpinButton) : guint;
procedure set_snap_to_ticks(var a : TGtkSpinButton; __snap_to_ticks : guint);
  type
     PGtkSpinButtonClass = ptr TGtkSpinButtonClass;
     TGtkSpinButtonClass = record
          parent_class : TGtkEntryClass;
       end;
Type
  GTK_SPIN_BUTTON = PGtkSpinButton;
  GTK_SPIN_BUTTON_CLASS = PGtkSpinButtonClass;
function  GTK_IS_SPIN_BUTTON(obj:pointer):boolean;
function  GTK_IS_SPIN_BUTTON_CLASS(klass:pointer):boolean;
 
 
 
 
  type
     PGtkTable = ptr TGtkTable;
     PGtkTableClass = ptr TGtkTableClass;
     PGtkTableRowCol = ptr TGtkTableRowCol;
     PGtkTableChild = ptr TGtkTableChild;
     TGtkTable = record
          container : TGtkContainer;
          children : PGList;
          rows : PGtkTableRowCol;
          cols : PGtkTableRowCol;
          nrows : guint16;
          ncols : guint16;
          column_spacing : guint16;
          row_spacing : guint16;
          flag0 : word;{Todo win32:Longint}
       end;
     TGtkTableClass = record
          parent_class : TGtkContainerClass;
       end;
     TGtkTableChild = record
          widget : PGtkWidget;
          left_attach : guint16;
          right_attach : guint16;
          top_attach : guint16;
          bottom_attach : guint16;
          xpadding : guint16;
          ypadding : guint16;
          flag0 :word ;{Todo win32:Longint}
       end;
     TGtkTableRowCol = record
          requisition : guint16;
          allocation : guint16;
          spacing : guint16;
          flag0 : word; {Todo win32:longint}
       end;
  const
     bm_TGtkTable_homogeneous = $1;
     bp_TGtkTable_homogeneous = 0;

function  homogeneous(var a : TGtkTable) : guint;overload;
procedure set_homogeneous(var a : TGtkTable; __homogeneous : guint);overload;
  const
     bm_TGtkTableChild_xexpand = $1;
     bp_TGtkTableChild_xexpand = 0;
     bm_TGtkTableChild_yexpand = $2;
     bp_TGtkTableChild_yexpand = 1;
     bm_TGtkTableChild_xshrink = $4;
     bp_TGtkTableChild_xshrink = 2;
     bm_TGtkTableChild_yshrink = $8;
     bp_TGtkTableChild_yshrink = 3;
     bm_TGtkTableChild_xfill = $10;
     bp_TGtkTableChild_xfill = 4;
     bm_TGtkTableChild_yfill = $20;
     bp_TGtkTableChild_yfill = 5;
function  xexpand(var a : TGtkTableChild) : guint;
procedure set_xexpand(var a : TGtkTableChild; __xexpand : guint);
function  yexpand(var a : TGtkTableChild) : guint;
procedure set_yexpand(var a : TGtkTableChild; __yexpand : guint);
function  xshrink(var a : TGtkTableChild) : guint;
procedure set_xshrink(var a : TGtkTableChild; __xshrink : guint);
function  yshrink(var a : TGtkTableChild) : guint;
procedure set_yshrink(var a : TGtkTableChild; __yshrink : guint);
function  xfill(var a : TGtkTableChild) : guint;
procedure set_xfill(var a : TGtkTableChild; __xfill : guint);
function  yfill(var a : TGtkTableChild) : guint;
procedure set_yfill(var a : TGtkTableChild; __yfill : guint);
  const
     bm_TGtkTableRowCol_need_expand = $1;
     bp_TGtkTableRowCol_need_expand = 0;
     bm_TGtkTableRowCol_need_shrink = $2;
     bp_TGtkTableRowCol_need_shrink = 1;
     bm_TGtkTableRowCol_expand = $4;
     bp_TGtkTableRowCol_expand = 2;
     bm_TGtkTableRowCol_shrink = $8;
     bp_TGtkTableRowCol_shrink = 3;
     bm_TGtkTableRowCol_empty = $10;
     bp_TGtkTableRowCol_empty = 4;
function  need_expand(var a : TGtkTableRowCol) : guint;
procedure set_need_expand(var a : TGtkTableRowCol; __need_expand : guint);
function  need_shrink(var a : TGtkTableRowCol) : guint;
procedure set_need_shrink(var a : TGtkTableRowCol; __need_shrink : guint);
function  expand(var a : TGtkTableRowCol) : guint;overload;
procedure set_expand(var a : TGtkTableRowCol; __expand : guint);overload;
function  shrink(var a : TGtkTableRowCol) : guint;
procedure set_shrink(var a : TGtkTableRowCol; __shrink : guint);
function  empty(var a : TGtkTableRowCol) : guint;
procedure set_empty(var a : TGtkTableRowCol; __empty : guint);
Type
  GTK_TABLE=PGtkTable;
  GTK_TABLE_CLASS=PGtkTableClass;
function  GTK_IS_TABLE(obj:pointer):boolean;
function  GTK_IS_TABLE_CLASS(klass:pointer):boolean;
 
 
 
 
  type
     PGtkTipsQuery = ptr TGtkTipsQuery;
     TGtkTipsQuery = record
          thelabel : TGtkLabel;
          flag0 : word;{Todo win32:Longint}
          label_inactive : Pgchar;
          label_no_tip : Pgchar;
          caller : PGtkWidget;
          last_crossed : PGtkWidget;
          query_cursor : PGdkCursor;
       end;
  const
     bm_TGtkTipsQuery_emit_always = $1;
     bp_TGtkTipsQuery_emit_always = 0;
     bm_TGtkTipsQuery_in_query = $2;
     bp_TGtkTipsQuery_in_query = 1;
function  emit_always(var a : TGtkTipsQuery) : guint;
procedure set_emit_always(var a : TGtkTipsQuery; __emit_always : guint);
function  in_query(var a : TGtkTipsQuery) : guint;
procedure set_in_query(var a : TGtkTipsQuery; __in_query : guint);
  type
     PGtkTipsQueryClass = ptr TGtkTipsQueryClass;
     TGtkTipsQueryClass = record
          parent_class : TGtkLabelClass;
          start_query : procedure (tips_query:PGtkTipsQuery); cdecl;
          stop_query : procedure (tips_query:PGtkTipsQuery); cdecl;
          widget_entered : procedure (tips_query:PGtkTipsQuery; widget:PGtkWidget; tip_text:Pgchar; tip_private:Pgchar); cdecl;
          widget_selected : function (tips_query:PGtkTipsQuery; widget:PGtkWidget; tip_text:Pgchar; tip_private:Pgchar; event:PGdkEventButton):gint; cdecl;
       end;
Type
  GTK_TIPS_QUERY=PGtkTipsQuery;
  GTK_TIPS_QUERY_CLASS=PGtkTipsQueryClass;
function  GTK_IS_TIPS_QUERY(obj:pointer):boolean;
function  GTK_IS_TIPS_QUERY_CLASS(klass:pointer):boolean;
 
 
 
 
  type
     PGtkTooltipsData = ptr TGtkTooltipsData;
     PGtkTooltips = ptr TGtkTooltips;
     TGtkTooltipsData = record
          tooltips : PGtkTooltips;
          widget : PGtkWidget;
          tip_text : Pgchar;
          tip_private : Pgchar;
          font : PGdkFont;
          width : gint;
          row : PGList;
       end;
     TGtkTooltips = record
          data : TGtkData;
          tip_window : PGtkWidget;
          active_tips_data : PGtkTooltipsData;
          tips_data_list : PGList;
          gc : PGdkGC;
          foreground : PGdkColor;
          background : PGdkColor;
          flag0 : longint;
          timer_tag : gint;
       end;
  const
     bm_TGtkTooltips_delay = $3FFFFFFF;
     bp_TGtkTooltips_delay = 0;
     bm_TGtkTooltips_enabled = $40000000;
     bp_TGtkTooltips_enabled = 30;
function  delay(var a : TGtkTooltips) : guint;
procedure set_delay(var a : TGtkTooltips; __delay : guint);
function  enabled(var a : TGtkTooltips) : guint;
procedure set_enabled(var a : TGtkTooltips; __enabled : guint);
  type
     PGtkTooltipsClass = ptr TGtkTooltipsClass;
     TGtkTooltipsClass = record
          parent_class : TGtkDataClass;
       end;
Type
  GTK_TOOLTIPS=PGtkTooltips;
  GTK_TOOLTIPS_CLASS=PGtkTooltipsClass;
function  GTK_IS_TOOLTIPS(obj:pointer):boolean;
function  GTK_IS_TOOLTIPS_CLASS(klass:pointer):boolean;

 
 
 
 
  type
     TGtkToolbarChildType = longint;
  const
     GTK_TOOLBAR_CHILD_SPACE = 0;
     GTK_TOOLBAR_CHILD_BUTTON = 1;
     GTK_TOOLBAR_CHILD_TOGGLEBUTTON = 2;
     GTK_TOOLBAR_CHILD_RADIOBUTTON = 3;
     GTK_TOOLBAR_CHILD_WIDGET = 4;
  type
     TGtkToolbarSpaceStyle = longint;
  const
     GTK_TOOLBAR_SPACE_EMPTY = 0;
     GTK_TOOLBAR_SPACE_LINE = 1;
  type
     PGtkToolbarChild = ptr TGtkToolbarChild;
     TGtkToolbarChild = record
          thetype : TGtkToolbarChildType;
          widget : PGtkWidget;
          icon : PGtkWidget;
          thelabel : PGtkWidget;
       end;
     PGtkToolbar = ptr TGtkToolbar;
     TGtkToolbar = record
          container : TGtkContainer;
          num_children : gint;
          children : PGList;
          orientation : TGtkOrientation;
          style : TGtkToolbarStyle;
          space_size : gint;
          space_style : TGtkToolbarSpaceStyle;
          tooltips : PGtkTooltips;
          button_maxw : gint;
          button_maxh : gint;
          relief : TGtkReliefStyle;
       end;
     PGtkToolbarClass = ptr TGtkToolbarClass;
     TGtkToolbarClass = record
          parent_class : TGtkContainerClass;
          orientation_changed : procedure (toolbar:PGtkToolbar; orientation:TGtkOrientation); cdecl;
          style_changed : procedure (toolbar:PGtkToolbar; style:TGtkToolbarStyle); cdecl;
       end;
Type
  GTK_TOOLBAR=PGtkToolbar;
  GTK_TOOLBAR_CLASS=PGtkToolbarClass;
 
 
 
 
  type
     PGtkTreeItem = ptr TGtkTreeItem;
     TGtkTreeItem = record
          item : TGtkItem;
          subtree : PGtkWidget;
          pixmaps_box : PGtkWidget;
          plus_pix_widget : PGtkWidget;
          minus_pix_widget : PGtkWidget;
          pixmaps : PGList;
          flag0 : word;{Todo win32:Longint}
       end;
  const
     bm_TGtkTreeItem_expanded = $1;
     bp_TGtkTreeItem_expanded = 0;
function  expanded(var a : TGtkTreeItem) : guint;
procedure set_expanded(var a : TGtkTreeItem; __expanded : guint);
  type
     PGtkTreeItemClass = ptr TGtkTreeItemClass;
     TGtkTreeItemClass = record
          parent_class : TGtkItemClass;
          expand : procedure (tree_item:PGtkTreeItem); cdecl;
          collapse : procedure (tree_item:PGtkTreeItem); cdecl;
       end;
Type
  GTK_TREE_ITEM=PGtkTreeItem;
  GTK_TREE_ITEM_CLASS=PGtkTreeItemClass;
function  GTK_TREE_ITEM_SUBTREE(obj : PGtktreeitem) : PGTkWidget;
function  GTK_IS_TREE_ITEM(obj:pointer):boolean;
function  GTK_IS_TREE_ITEM_CLASS(klass:pointer):boolean;
 
 
 
 
  type
     TGtkTreeViewMode = longint;
  const
     GTK_TREE_VIEW_LINE = 0;
     GTK_TREE_VIEW_ITEM = 1;
  type
     PGtkTree = ptr TGtkTree;
     TGtkTree = record
          container : TGtkContainer;
          children : PGList;
          root_tree : PGtkTree;
          tree_owner : PGtkWidget;
          selection : PGList;
          level : guint;
          indent_value : guint;
          current_indent : guint;
          flag0 : word;{Todo win32:Longint}
       end;
  const
     bm_TGtkTree_selection_mode = $3;
     bp_TGtkTree_selection_mode = 0;
     bm_TGtkTree_view_mode = $4;
     bp_TGtkTree_view_mode = 2;
     bm_TGtkTree_view_line = $8;
     bp_TGtkTree_view_line = 3;
function  selection_mode(var a : TGtkTree) : guint;overload;
procedure set_selection_mode(var a : TGtkTree; __selection_mode : guint);overload;
function  view_mode(var a : TGtkTree) : guint;
procedure set_view_mode(var a : TGtkTree; __view_mode : guint);
function  view_line(var a : TGtkTree) : guint;
procedure set_view_line(var a : TGtkTree; __view_line : guint);
  type
     PGtkTreeClass = ptr TGtkTreeClass;
     TGtkTreeClass = record
          parent_class : TGtkContainerClass;
          selection_changed : procedure (tree:PGtkTree); cdecl;
          select_child : procedure (tree:PGtkTree; child:PGtkWidget); cdecl;
          unselect_child : procedure (tree:PGtkTree; child:PGtkWidget); cdecl;
       end;
Type
  GTK_TREE = PGtkTree;
  GTK_TREE_CLASS = PGtkTreeClass;
function  GTK_IS_ROOT_TREE(obj : PGtkTree) : gboolean;
function  GTK_TREE_ROOT_TREE(obj : PGtkTree) : PGtkTree;
function  GTK_TREE_SELECTION(obj : PGtkTree) : PGList;
 
 
 
 
    type
       PGtkBox = ptr TGtkBox;
       TGtkBox = record
            container : TGtkContainer;
            children : PGList;
            spacing : gint16;
            flag0 : word;{TOdo word:Longint}
         end;
    const
       bm_box_homogeneous = 1;
       bp_box_homogeneous = 0;
function  homogeneous(var a : TGtkBox) : guint;overload;
procedure set_homogeneous(var a : TGtkBox; __homogeneous : guint);overload;
    type
       PGtkBoxClass = ptr TGtkBoxClass;
       TGtkBoxClass = record
            parent_class : TGtkContainerClass;
         end;
       PGtkBoxChild = ptr TGtkBoxChild;
       TGtkBoxChild = record
            widget : PGtkWidget;
            padding : guint16;
            flag0 : word;{Todo win32:Longint}
         end;
    const
       bm_box_expand = 1;
       bp_box_expand = 0;
       bm_box_fill = 2;
       bp_box_fill = 1;
       bm_box_pack = 4;
       bp_box_pack = 2;
function  expand(var a : TGtkBoxChild) : guint;overload;
procedure set_expand(var a : TGtkBoxChild; __expand : guint);overload;
function  fill(var a : TGtkBoxChild) : guint;overload;
procedure set_fill(var a : TGtkBoxChild; __fill : guint);overload;
function  pack(var a : TGtkBoxChild) : guint;overload;
procedure set_pack(var a : TGtkBoxChild; __pack : guint);overload;
Type
  GTK_BOX=PGtkBox;
  GTK_BOX_CLASS=PGtkBoxClass;
function  GTK_IS_BOX(obj:pointer):boolean;
function  GTK_IS_BOX_CLASS(klass:pointer):boolean;
 
 
 
 
  type
     PGtkHBox = ptr TGtkHBox;
     TGtkHBox = record
          box : TGtkBox;
       end;
     PGtkHBoxClass = ptr TGtkHBoxClass;
     TGtkHBoxClass = record
          parent_class : TGtkBoxClass;
       end;
Type
  GTK_HBOX=PGtkHBox;
  GTK_HBOX_CLASS=PGtkHBoxClass;
function  GTK_IS_HBOX(obj:pointer):boolean;
function  GTK_IS_HBOX_CLASS(klass:pointer):boolean;
 
 
 
 
    type
       PGtkVBox = ptr TGtkVBox;
       TGtkVBox = record
            box : TGtkBox;
         end;
       PGtkVBoxClass = ptr TGtkVBoxClass;
       TGtkVBoxClass = record
            parent_class : TGtkBoxClass;
         end;
Type
  GTK_VBOX=PGtkVBox;
  GTK_VBOX_CLASS=PGtkVBoxClass;
function  GTK_IS_VBOX(obj:pointer):boolean;
function  GTK_IS_VBOX_CLASS(klass:pointer):boolean;
 
 
 
 
    const
       GTK_BUTTONBOX_DEFAULT = -1;
    type
       PGtkButtonBox = ptr TGtkButtonBox;
       TGtkButtonBox = record
            box : TGtkBox;
            spacing : gint;
            child_min_width : gint;
            child_min_height : gint;
            child_ipad_x : gint;
            child_ipad_y : gint;
            layout_style : TGtkButtonBoxStyle;
         end;
       PGtkButtonBoxClass = ptr TGtkButtonBoxClass;
       TGtkButtonBoxClass = record
            parent_class : TGtkBoxClass;
         end;
Type
  GTK_BUTTON_BOX=PGtkButtonBox;
  GTK_BUTTON_BOX_CLASS=PGtkButtonBoxClass;
function  GTK_IS_BUTTON_BOX(obj:pointer):boolean;
function  GTK_IS_BUTTON_BOX_CLASS(klass:pointer):boolean;

 
 
 
 
 
  type
     PGtkHButtonBox = ptr TGtkHButtonBox;
     TGtkHButtonBox = record
          button_box : TGtkButtonBox;
       end;
     PGtkHButtonBoxClass = ptr TGtkHButtonBoxClass;
     TGtkHButtonBoxClass = record
          parent_class : TGtkButtonBoxClass;
       end;
Type
  GTK_HBUTTON_BOX=PGtkHButtonBox;
  GTK_HBUTTON_BOX_CLASS=PGtkHButtonBoxClass;
function  GTK_IS_HBUTTON_BOX(obj:pointer):boolean;
function  GTK_IS_HBUTTON_BOX_CLASS(klass:pointer):boolean;
 
 
 
  type
     PGtkVButtonBox = ptr TGtkVButtonBox;
     TGtkVButtonBox = record
          button_box : TGtkButtonBox;
       end;
     PGtkVButtonBoxClass = ptr TGtkVButtonBoxClass;
     TGtkVButtonBoxClass = record
          parent_class : TGtkButtonBoxClass;
       end;
Type
  GTK_VBUTTON_BOX=PGtkVButtonBox;
  GTK_VBUTTON_BOX_CLASS=PGtkVButtonBoxClass;
function  GTK_IS_VBUTTON_BOX(obj:pointer):boolean;
function  GTK_IS_VBUTTON_BOX_CLASS(klass:pointer):boolean;
 
 
 
 
  type
     PGtkPaned = ptr TGtkPaned;
     TGtkPaned = record
          container : TGtkContainer;
          child1 : PGtkWidget;
          child2 : PGtkWidget;
          handle : PGdkWindow;
          groove_rectangle : TGdkRectangle;
          xor_gc : PGdkGC;
          handle_size : guint16;
          gutter_size : guint16;
          child1_size : gint;
          last_allocation : gint;
          min_position : gint;
          max_position : gint;
          flag0 : word;{Todo win32:longint}
          handle_xpos : gint16;
          handle_ypos : gint16;
       end;
  const
     bm_TGtkPaned_position_set = $1;
     bp_TGtkPaned_position_set = 0;
     bm_TGtkPaned_in_drag = $2;
     bp_TGtkPaned_in_drag = 1;
     bm_TGtkPaned_child1_shrink = $4;
     bp_TGtkPaned_child1_shrink = 2;
     bm_TGtkPaned_child1_resize = $8;
     bp_TGtkPaned_child1_resize = 3;
     bm_TGtkPaned_child2_shrink = $10;
     bp_TGtkPaned_child2_shrink = 4;
     bm_TGtkPaned_child2_resize = $20;
     bp_TGtkPaned_child2_resize = 5;
function  position_set(var a : TGtkPaned) : guint;
procedure set_position_set(var a : TGtkPaned; __position_set : guint);
function  in_drag(var a : TGtkPaned) : guint;overload;
procedure set_in_drag(var a : TGtkPaned; __in_drag : guint);overload;
function  child1_shrink(var a : TGtkPaned) : guint;
procedure set_child1_shrink(var a : TGtkPaned; __child1_shrink : guint);
function  child1_resize(var a : TGtkPaned) : guint;
procedure set_child1_resize(var a : TGtkPaned; __child1_resize : guint);
function  child2_shrink(var a : TGtkPaned) : guint;
procedure set_child2_shrink(var a : TGtkPaned; __child2_shrink : guint);
function  child2_resize(var a : TGtkPaned) : guint;
procedure set_child2_resize(var a : TGtkPaned; __child2_resize : guint);
  type
     PGtkPanedClass = ptr TGtkPanedClass;
     TGtkPanedClass = record
          parent_class : TGtkContainerClass;
       end;
Type
  GTK_PANED=PGtkPaned;
  GTK_PANED_CLASS=PGtkPanedClass;
function  GTK_IS_PANED(obj:pointer):boolean;
function  GTK_IS_PANED_CLASS(klass:pointer):boolean;
 
 
 
 
  type
     PGtkHPaned = ptr TGtkHPaned;
     TGtkHPaned = record
          paned : TGtkPaned;
       end;
     PGtkHPanedClass = ptr TGtkHPanedClass;
     TGtkHPanedClass = record
          parent_class : TGtkPanedClass;
       end;
Type
  GTK_HPANED=PGtkHPaned;
  GTK_HPANED_CLASS=PGtkHPanedClass;
function  GTK_IS_HPANED(obj:pointer):boolean;
function  GTK_IS_HPANED_CLASS(klass:pointer):boolean;
 
 
 
  type
     PGtkVPaned = ptr TGtkVPaned;
     TGtkVPaned = record
          paned : TGtkPaned;
       end;
     PGtkVPanedClass = ptr TGtkVPanedClass;
     TGtkVPanedClass = record
          parent_class : TGtkPanedClass;
       end;
Type
  GTK_VPANED=PGtkVPaned;
  GTK_VPANED_CLASS=PGtkVPanedClass;
function  GTK_IS_VPANED(obj:pointer):boolean;
function  GTK_IS_VPANED_CLASS(klass:pointer):boolean;
 
 
 
 
  type
     PGtkRulerMetric = ptr TGtkRulerMetric;
     PGtkRuler = ptr TGtkRuler;
     TGtkRuler = record
          widget : TGtkWidget;
          backing_store : PGdkPixmap;
          non_gr_exp_gc : PGdkGC;
          metric : PGtkRulerMetric;
          xsrc : gint;
          ysrc : gint;
          slider_size : gint;
          lower : gfloat;
          upper : gfloat;
          position : gfloat;
          max_size : gfloat;
       end;
     PGtkRulerClass = ptr TGtkRulerClass;
     TGtkRulerClass = record
          parent_class : TGtkWidgetClass;
          draw_ticks : procedure (ruler:PGtkRuler); cdecl;
          draw_pos : procedure (ruler:PGtkRuler); cdecl;
       end;
     TGtkRulerMetric = record
          metric_name : Pgchar;
          abbrev : Pgchar;
          pixels_per_unit : gfloat;
          ruler_scale : array[0 to 9] of gfloat;
          subdivide : array[0 to 4] of gint;
       end;
Type
  GTK_RULER=PGtkRuler;
  GTK_RULER_CLASS=PGtkRulerClass;
function  GTK_IS_RULER(obj:pointer):boolean;
function  GTK_IS_RULER_CLASS(klass:pointer):boolean;
 
 
 
 
  type
     PGtkHRuler = ptr TGtkHRuler;
     TGtkHRuler = record
          ruler : TGtkRuler;
       end;
     PGtkHRulerClass = ptr TGtkHRulerClass;
     TGtkHRulerClass = record
          parent_class : TGtkRulerClass;
       end;
Type
  GTK_HRULER=PGtkHRuler;
  GTK_HRULER_CLASS=PGtkHRulerClass;

function  GTK_IS_HRULER(obj:pointer):boolean;
function  GTK_IS_HRULER_CLASS(klass:pointer):boolean;

 
 
 
 
  type
     PGtkVRuler = ptr TGtkVRuler;
     TGtkVRuler = record
          ruler : TGtkRuler;
       end;
     PGtkVRulerClass = ptr TGtkVRulerClass;
     TGtkVRulerClass = record
          parent_class : TGtkRulerClass;
       end;
Type
  GTK_VRULER=PGtkVRuler;
  GTK_VRULER_CLASS=PGtkVRulerClass;
function  GTK_IS_VRULER(obj:pointer):boolean;
function  GTK_IS_VRULER_CLASS(klass:pointer):boolean;

 
 
 
 
  type
     PGtkScale = ptr TGtkScale;
     TGtkScale = record
          range : TGtkRange;
          flag0 : longint;
       end;
  const
     bm_TGtkScale_draw_value = $1;
     bp_TGtkScale_draw_value = 0;
     bm_TGtkScale_value_pos = $6;
     bp_TGtkScale_value_pos = 1;
function  draw_value(var a : TGtkScale) : guint;
procedure set_draw_value(var a : TGtkScale; __draw_value : guint);
function  value_pos(var a : TGtkScale) : guint;
procedure set_value_pos(var a : TGtkScale; __value_pos : guint);
  type
     PGtkScaleClass = ptr TGtkScaleClass;
     TGtkScaleClass = record
          parent_class : TGtkRangeClass;
          slider_length : gint;
          value_spacing : gint;
          draw_value : procedure (scale:PGtkScale); cdecl;
       end;
Type
  GTK_SCALE=PGtkScale;
  GTK_SCALE_CLASS=PGtkScaleClass;
function  GTK_IS_SCALE(obj:pointer):boolean;
function  GTK_IS_SCALE_CLASS(klass:pointer):boolean;
 
 
 
 
  type
     PGtkHScale = ptr TGtkHScale;
     TGtkHScale = record
          scale : TGtkScale;
       end;
     PGtkHScaleClass = ptr TGtkHScaleClass;
     TGtkHScaleClass = record
          parent_class : TGtkScaleClass;
       end;
Type
  GTK_HSCALE=PGtkHScale;
  GTK_HSCALE_CLASS=PGtkHScaleClass;
function  GTK_IS_HSCALE(obj:pointer):boolean;
function  GTK_IS_HSCALE_CLASS(klass:pointer):boolean;
 
 
 
 
  type
     PGtkVScale = ptr TGtkVScale;
     TGtkVScale = record
          scale : TGtkScale;
       end;
     PGtkVScaleClass = ptr TGtkVScaleClass;
     TGtkVScaleClass = record
          parent_class : TGtkScaleClass;
       end;
Type
  GTK_VSCALE=PGtkVScale;
  GTK_VSCALE_CLASS=PGtkVScaleClass;
function  GTK_IS_VSCALE(obj:pointer):boolean;
function  GTK_IS_VSCALE_CLASS(klass:pointer):boolean;
 
 
 
    type
       PGtkScrollbar = ptr TGtkScrollbar;
       TGtkScrollbar = record
            range : TGtkRange;
         end;
       PGtkScrollbarClass = ptr TGtkScrollbarClass;
       TGtkScrollbarClass = record
            parent_class : TGtkRangeClass;
         end;
Type
  GTK_SCROLLBAR=PGtkScrollbar;
  GTK_SCROLLBAR_CLASS=PGtkScrollbarClass;
function  GTK_IS_SCROLLBAR(obj:pointer):boolean;
function  GTK_IS_SCROLLBAR_CLASS(klass:pointer):boolean;
 

 
 
 
 
    type
       PGtkHScrollbar = ptr TGtkHScrollbar;
       TGtkHScrollbar = record
            scrollbar : TGtkScrollbar;
         end;
       PGtkHScrollbarClass = ptr TGtkHScrollbarClass;
       TGtkHScrollbarClass = record
            parent_class : TGtkScrollbarClass;
         end;
Type
  GTK_HSCROLLBAR=PGtkHScrollbar;
  GTK_HSCROLLBAR_CLASS=PGtkHScrollbarClass;
function  GTK_IS_HSCROLLBAR(obj:pointer):boolean;
function  GTK_IS_HSCROLLBAR_CLASS(klass:pointer):boolean;

 
 
 
 
    type
       PGtkVScrollbar = ptr TGtkVScrollbar;
       TGtkVScrollbar = record
            scrollbar : TGtkScrollbar;
         end;
       PGtkVScrollbarClass = ptr TGtkVScrollbarClass;
       TGtkVScrollbarClass = record
            parent_class : TGtkScrollbarClass;
         end;
Type
  GTK_VSCROLLBAR=PGtkVScrollbar;
  GTK_VSCROLLBAR_CLASS=PGtkVScrollbarClass;

function  GTK_IS_VSCROLLBAR(obj:pointer):boolean;
function  GTK_IS_VSCROLLBAR_CLASS(klass:pointer):boolean;

 
 
 
 
  type
     PGtkSeparator = ptr TGtkSeparator;
     TGtkSeparator = record
          widget : TGtkWidget;
       end;
     PGtkSeparatorClass = ptr TGtkSeparatorClass;
     TGtkSeparatorClass = record
          parent_class : TGtkWidgetClass;
       end;
Type
  GTK_SEPARATOR=PGtkSeparator;
  GTK_SEPARATOR_CLASS=PGtkSeparatorClass;
function  GTK_IS_SEPARATOR(obj:pointer):boolean;
function  GTK_IS_SEPARATOR_CLASS(klass:pointer):boolean;


 
 
 
  type
     PGtkHSeparator = ptr TGtkHSeparator;
     TGtkHSeparator = record
          separator : TGtkSeparator;
       end;
     PGtkHSeparatorClass = ptr TGtkHSeparatorClass;
     TGtkHSeparatorClass = record
          parent_class : TGtkSeparatorClass;
       end;
Type
  GTK_HSEPARATOR=PGtkHSeparator;
  GTK_HSEPARATOR_CLASS=PGtkHSeparatorClass;
function  GTK_IS_HSEPARATOR(obj:pointer):boolean;
function  GTK_IS_HSEPARATOR_CLASS(klass:pointer):boolean;

 
 
 
 
  type
     PGtkVSeparator = ptr TGtkVSeparator;
     TGtkVSeparator = record
          separator : TGtkSeparator;
       end;
     PGtkVSeparatorClass = ptr TGtkVSeparatorClass;
     TGtkVSeparatorClass = record
          parent_class : TGtkSeparatorClass;
       end;
Type
  GTK_VSEPARATOR=PGtkVSeparator;
  GTK_VSEPARATOR_CLASS=PGtkVSeparatorClass;

function  GTK_IS_VSEPARATOR(obj:pointer):boolean;
function  GTK_IS_VSEPARATOR_CLASS(klass:pointer):boolean;

 
 
 
  type
     PGtkCombo = ptr TGtkCombo;
     TGtkCombo = record
          hbox : TGtkHBox;
          entry : PGtkWidget;
          button : PGtkWidget;
          popup : PGtkWidget;
          popwin : PGtkWidget;
          list : PGtkWidget;
          entry_change_id : guint;
          list_change_id : guint;
          flag0 : word; {Todo win32:Longint}
          current_button : guint16;
          activate_id : guint;
       end;
  const
     bm_value_in_list = 1;
     bp_value_in_list = 0;
     bm_ok_if_empty = 2;
     bp_ok_if_empty = 1;
     bm_case_sensitive = 4;
     bp_case_sensitive = 2;
     bm_use_arrows = 8;
     bp_use_arrows = 3;
     bm_use_arrows_always = 16;
     bp_use_arrows_always = 4;
function  value_in_list(var a : TGtkCombo) : guint;
procedure set_value_in_list(var a : TGtkCombo; __value_in_list : guint);
function  ok_if_empty(var a : TGtkCombo) : guint;
procedure set_ok_if_empty(var a : TGtkCombo; __ok_if_empty : guint);
function  case_sensitive(var a : TGtkCombo) : guint;
procedure set_case_sensitive(var a : TGtkCombo; __case_sensitive : guint);
function  use_arrows(var a : TGtkCombo) : guint;
procedure set_use_arrows(var a : TGtkCombo; __use_arrows : guint);
function  use_arrows_always(var a : TGtkCombo) : guint;
procedure set_use_arrows_always(var a : TGtkCombo; __use_arrows_always : guint);
  type
     PGtkComboClass = ptr TGtkComboClass;
     TGtkComboClass = record
          parent_class : TGtkHBoxClass;
       end;
Type
  GTK_COMBO=PGtkCombo;
  GTK_COMBO_CLASS=PGtkComboClass;
 
 
 
 
  type
     PGtkStatusbar = ptr TGtkStatusbar;
     TGtkStatusbar = record
          parent_widget : TGtkHBox;
          frame : PGtkWidget;
          thelabel : PGtkWidget;
          messages : PGSList;
          keys : PGSList;
          seq_context_id : guint;
          seq_message_id : guint;
       end;
     PGtkStatusbarClass = ptr TGtkStatusbarClass;
     TGtkStatusbarClass = record
          parent_class : TGtkHBoxClass;
          messages_mem_chunk : PGMemChunk;
          text_pushed : procedure (statusbar:PGtkStatusbar; context_id:guint; thetext:Pgchar); cdecl;
          text_popped : procedure (statusbar:PGtkStatusbar; context_id:guint; thetext:Pgchar); cdecl;
       end;
     PGtkStatusbarMsg = ptr TGtkStatusbarMsg;
     TGtkStatusbarMsg = record
          thetext : Pgchar;
          context_id : guint;
          message_id : guint;
       end;
Type
  GTK_STATUSBAR=PGtkStatusbar;
  GTK_STATUSBAR_CLASS=PGtkStatusbarClass;
 
 
 
 
    type
       PGtkColorSelection = ptr TGtkColorSelection;
       TGtkColorSelection = record
            vbox : TGtkVBox;
            wheel_area : PGtkWidget;
            value_area : PGtkWidget;
            sample_area : PGtkWidget;
            sample_area_eb : PGtkWidget;
            scales : array[0 to 7] of PGtkWidget;
            entries : array[0 to 7] of PGtkWidget;
            opacity_label : PGtkWidget;
            wheel_gc : PGdkGC;
            value_gc : PGdkGC;
            sample_gc : PGdkGC;
            policy : TGtkUpdateType;
            use_opacity : gint;
            timer_active : gint;
            timer_tag : gint;
            values : array[0 to 7] of gdouble;
            old_values : array[0 to 7] of gdouble;
            wheel_buf : Pguchar;
            value_buf : Pguchar;
            sample_buf : Pguchar;
         end;
       PGtkColorSelectionClass = ptr TGtkColorSelectionClass;
       TGtkColorSelectionClass = record
            parent_class : TGtkVBoxClass;
            color_changed : procedure (colorsel:PGtkColorSelection); cdecl;
         end;
       PGtkColorSelectionDialog = ptr TGtkColorSelectionDialog;
       TGtkColorSelectionDialog = record
            window : TGtkWindow;
            colorsel : PGtkWidget;
            main_vbox : PGtkWidget;
            ok_button : PGtkWidget;
            reset_button : PGtkWidget;
            cancel_button : PGtkWidget;
            help_button : PGtkWidget;
         end;
       PGtkColorSelectionDialogClass = ptr TGtkColorSelectionDialogClass;
       TGtkColorSelectionDialogClass = record
            parent_class : TGtkWindowClass;
         end;
Type
  GTK_COLOR_SELECTION=PGtkColorSelection;
  GTK_COLOR_SELECTION_CLASS=PGtkColorSelectionClass;
  GTK_COLOR_SELECTION_DIALOG=PGtkColorSelectionDialog;
  GTK_COLOR_SELECTION_DIALOG_CLASS=PGtkColorSelectionDialogClass;
 
function  GTK_IS_COLOR_SELECTION(obj:pointer):boolean;
function  GTK_IS_COLOR_SELECTION_CLASS(klass:pointer):boolean;
 
 
 
 
  type
     PGtkGammaCurve = ptr TGtkGammaCurve;
     TGtkGammaCurve = record
          vbox : TGtkVBox;
          table : PGtkWidget;
          curve : PGtkWidget;
          button : array[0 to 4] of PGtkWidget;
          gamma : gfloat;
          gamma_dialog : PGtkWidget;
          gamma_text : PGtkWidget;
       end;
     PGtkGammaCurveClass = ptr TGtkGammaCurveClass;
     TGtkGammaCurveClass = record
          parent_class : TGtkVBoxClass;
       end;
type
  GTK_GAMMA_CURVE=PGtkGammaCurve;
  GTK_GAMMA_CURVE_CLASS=PGtkGammaCurveClass;
 
 
 
 
    type
       TGtkCellType = enum
			GTK_CELL_EMPTY;
			GTK_CELL_TEXT;
			GTK_CELL_PIXMAP;
         GTK_CELL_PIXTEXT;
			GTK_CELL_WIDGET;
		end;

       TGtkCListDragPos = enum
			GTK_CLIST_DRAG_NONE;
			GTK_CLIST_DRAG_BEFORE;
         GTK_CLIST_DRAG_INTO;
			GTK_CLIST_DRAG_AFTER;
         end;

       TGtkButtonAction = enum
				GTK_BUTTON_IGNORED := 0;
				GTK_BUTTON_SELECTS := 1 shl 0;
         	GTK_BUTTON_DRAGS := 1 shl 1;
				GTK_BUTTON_EXPANDS := 1 shl 2;
       end;
       PGtkCList = ptr TGtkCList;
       PGtkCListClass = ptr TGtkCListClass;
       PGtkCListColumn = ptr TGtkCListColumn;
       PGtkCListRow = ptr TGtkCListRow;
       PGtkCellText = ptr TGtkCellText;
       PGtkCellPixmap = ptr TGtkCellPixmap;
       PGtkCellPixText = ptr TGtkCellPixText;
       PGtkCellWidget = ptr TGtkCellWidget;
       PGtkCell = ptr TGtkCell;
       TGtkCListCompareFunc = function (clist:PGtkCList; ptr1:gconstpointer; ptr2:gconstpointer):gint;cdecl;
       PGtkCListCellInfo = ptr TGtkCListCellInfo;
       TGtkCListCellInfo = record
            row : gint;
            column : gint;
         end;
       PGtkCListDestInfo = ptr TGtkCListDestInfo;
       TGtkCListDestInfo = record
            cell : TGtkCListCellInfo;
            insert_pos : TGtkCListDragPos;
         end;
       TGtkCList = record
            container : TGtkContainer;
            flags : guint16;
            row_mem_chunk : PGMemChunk;
            cell_mem_chunk : PGMemChunk;
            freeze_count : guint;
            internal_allocation : TGdkRectangle;
            rows : gint;
            row_center_offset : gint;
            row_height : gint;
            row_list : PGList;
            row_list_end : PGList;
            columns : gint;
            column_title_area : TGdkRectangle;
            title_window : PGdkWindow;
            column : PGtkCListColumn;
            clist_window : PGdkWindow;
            clist_window_width : gint;
            clist_window_height : gint;
            hoffset : gint;
            voffset : gint;
            shadow_type : TGtkShadowType;
            selection_mode : TGtkSelectionMode;
            selection : PGList;
            selection_end : PGList;
            undo_selection : PGList;
            undo_unselection : PGList;
            undo_anchor : gint;
            button_actions : array[0 to 4] of guint8;
            drag_button : guint8;
            click_cell : TGtkCListCellInfo;
            hadjustment : PGtkAdjustment;
            vadjustment : PGtkAdjustment;
            xor_gc : PGdkGC;
            fg_gc : PGdkGC;
            bg_gc : PGdkGC;
            cursor_drag : PGdkCursor;
            x_drag : gint;
            focus_row : gint;
            anchor : gint;
            anchor_state : TGtkStateType;
            drag_pos : gint;
            htimer : gint;
            vtimer : gint;
            sort_type : TGtkSortType;
            compare : TGtkCListCompareFunc;
            sort_column : gint;
         end;
       TGtkCListClass = record
            parent_class : TGtkContainerClass;
            set_scroll_adjustments : procedure (clist:PGtkCList; hadjustment:PGtkAdjustment; vadjustment:PGtkAdjustment);cdecl;
            refresh : procedure (clist:PGtkCList);cdecl;
            select_row : procedure (clist:PGtkCList; row:gint; column:gint; event:PGdkEvent);cdecl;
            unselect_row : procedure (clist:PGtkCList; row:gint; column:gint; event:PGdkEvent);cdecl;
            row_move : procedure (clist:PGtkCList; source_row:gint; dest_row:gint);cdecl;
            click_column : procedure (clist:PGtkCList; column:gint);cdecl;
            resize_column : procedure (clist:PGtkCList; column:gint; width:gint);cdecl;
            toggle_focus_row : procedure (clist:PGtkCList);cdecl;
            select_all : procedure (clist:PGtkCList);cdecl;
            unselect_all : procedure (clist:PGtkCList);cdecl;
            undo_selection : procedure (clist:PGtkCList);cdecl;
            start_selection : procedure (clist:PGtkCList);cdecl;
            end_selection : procedure (clist:PGtkCList);cdecl;
            extend_selection : procedure (clist:PGtkCList; scroll_type:TGtkScrollType; position:gfloat; auto_start_selection:gboolean);cdecl;
            scroll_horizontal : procedure (clist:PGtkCList; scroll_type:TGtkScrollType; position:gfloat);cdecl;
            scroll_vertical : procedure (clist:PGtkCList; scroll_type:TGtkScrollType; position:gfloat);cdecl;
            toggle_add_mode : procedure (clist:PGtkCList);cdecl;
            abort_column_resize : procedure (clist:PGtkCList);cdecl;
            resync_selection : procedure (clist:PGtkCList; event:PGdkEvent);cdecl;
            selection_find : function (clist:PGtkCList; row_number:gint; row_list_element:PGList):PGList;cdecl;
            draw_row : procedure (clist:PGtkCList; area:PGdkRectangle; row:gint; clist_row:PGtkCListRow);cdecl;
            draw_drag_highlight : procedure (clist:PGtkCList; target_row:PGtkCListRow; target_row_number:gint; drag_pos:TGtkCListDragPos);cdecl;
            clear : procedure (clist:PGtkCList);cdecl;
            fake_unselect_all : procedure (clist:PGtkCList; row:gint);cdecl;
            sort_list : procedure (clist:PGtkCList);cdecl;
            insert_row : procedure (clist:PGtkCList; row:gint; text:PPgchar);cdecl;
            remove_row : procedure (clist:PGtkCList; row:gint);cdecl;
            set_cell_contents : procedure (clist:PGtkCList; clist_row:PGtkCListRow; column:gint; thetype:TGtkCellType; text:Pgchar; spacing:guint8; pixmap:PGdkPixmap; mask:PGdkBitmap);cdecl;
            cell_size_request : procedure (clist:PGtkCList; clist_row:PGtkCListRow; column:gint; requisition:PGtkRequisition);cdecl;
         end;
       TGtkCListColumn = record
            title : Pgchar;
            area : TGdkRectangle;
            button : PGtkWidget;
            window : PGdkWindow;
            width : gint;
            min_width : gint;
            max_width : gint;
            justification : TGtkJustification;
            flag0 : word;{TOdo win32:Longint}
         end;
       TGtkCListRow = record
            cell : PGtkCell;
            state : TGtkStateType;
            foreground : TGdkColor;
            background : TGdkColor;
            style : PGtkStyle;
            data : gpointer;
            destroy : TGtkDestroyNotify;
            flag0 : word; {Todo win32:longint}
         end;
       TGtkCellText = record
            thetype : TGtkCellType;
            vertical : gint16;
            horizontal : gint16;
            style : PGtkStyle;
            thetext : Pgchar;
         end;
       TGtkCellPixmap = record
            thetype : TGtkCellType;
            vertical : gint16;
            horizontal : gint16;
            style : PGtkStyle;
            pixmap : PGdkPixmap;
            mask : PGdkBitmap;
         end;
       TGtkCellPixText = record
            thetype : TGtkCellType;
            vertical : gint16;
            horizontal : gint16;
            style : PGtkStyle;
            thetext : Pgchar;
            spacing : guint8;
            pixmap : PGdkPixmap;
            mask : PGdkBitmap;
         end;
       TGtkCellWidget = record
            thetype : TGtkCellType;
            vertical : gint16;
            horizontal : gint16;
            style : PGtkStyle;
            widget : PGtkWidget;
         end;
       TGtkCell = record
            thetype : TGtkCellType;
            vertical : gint16;
            horizontal : gint16;
            style : PGtkStyle;
            u : union
        			text : Pgchar ;
               pm : record
                        pixmap : PGdkPixmap;
                        mask : PGdkBitmap;
               end ;
               pt : record
                        text : Pgchar;
                        spacing : guint8;
                        pixmap : PGdkPixmap;
                        mask : PGdkBitmap;
               end ;
               widget : PGtkWidget;
           end;
         end;
    const
       bm_TGtkCListColumn_visible = $1;
       bp_TGtkCListColumn_visible = 0;
       bm_TGtkCListColumn_width_set = $2;
       bp_TGtkCListColumn_width_set = 1;
       bm_TGtkCListColumn_resizeable = $4;
       bp_TGtkCListColumn_resizeable = 2;
       bm_TGtkCListColumn_auto_resize = $8;
       bp_TGtkCListColumn_auto_resize = 3;
       bm_TGtkCListColumn_button_passive = $10;
       bp_TGtkCListColumn_button_passive = 4;
    const
       bm_TGtkCListRow_fg_set = $1;
       bp_TGtkCListRow_fg_set = 0;
       bm_TGtkCListRow_bg_set = $2;
       bp_TGtkCListRow_bg_set = 1;
       bm_TGtkCListRow_selectable = $4;
       bp_TGtkCListRow_selectable = 2;
function  fg_set(var a : TGtkCListRow) : guint;cdecl;
procedure set_fg_set(var a : TGtkCListRow; __fg_set : guint);cdecl;
function  bg_set(var a : TGtkCListRow) : guint;cdecl;
procedure set_bg_set(var a : TGtkCListRow; __bg_set : guint);cdecl;
function  selectable(var a : TGtkCListRow) : guint;
procedure set_selectable(var a : TGtkCListRow; __selectable : guint);
Type
  GTK_CLIST=PGtkCList;
  GTK_CLIST_CLASS=PGtkCListClass;
 
 
 
 
  type
     PGtkNotebook = ptr TGtkNotebook;
     PGtkNotebookClass = ptr TGtkNotebookClass;
     PGtkNotebookPage = ptr TGtkNotebookPage;
     TGtkNotebook = record
          container : TGtkContainer;
          cur_page : PGtkNotebookPage;
          children : PGList;
          first_tab : PGList;
          focus_tab : PGList;
          menu : PGtkWidget;
          panel : PGdkWindow;
          timer : guint32;
          tab_hborder : guint16;
          tab_vborder : guint16;
          flag0 : word; {Todo win32:Longint}
       end;
     TGtkNotebookClass = record
          parent_class : TGtkContainerClass;
          switch_page : procedure (notebook:PGtkNotebook; page:PGtkNotebookPage; page_num:guint);cdecl;
       end;
     TGtkNotebookPage = record
          child : PGtkWidget;
          tab_label : PGtkWidget;
          menu_label : PGtkWidget;
          flag0 : word;{Todo win32:longint}
          requisition : TGtkRequisition;
          allocation : TGtkAllocation;
          pad1 : gint16;
       end;
  const
     bm_TGtkNotebook_show_tabs = $1;
     bp_TGtkNotebook_show_tabs = 0;
     bm_TGtkNotebook_homogeneous = $2;
     bp_TGtkNotebook_homogeneous = 1;
     bm_TGtkNotebook_show_border = $4;
     bp_TGtkNotebook_show_border = 2;
     bm_TGtkNotebook_tab_pos = $18;
     bp_TGtkNotebook_tab_pos = 3;
     bm_TGtkNotebook_scrollable = $20;
     bp_TGtkNotebook_scrollable = 5;
     bm_TGtkNotebook_in_child = $C0;
     bp_TGtkNotebook_in_child = 6;
     bm_TGtkNotebook_click_child = $300;
     bp_TGtkNotebook_click_child = 8;
     bm_TGtkNotebook_button = $C00;
     bp_TGtkNotebook_button = 10;
     bm_TGtkNotebook_need_timer = $1000;
     bp_TGtkNotebook_need_timer = 12;
     bm_TGtkNotebook_child_has_focus = $2000;
     bp_TGtkNotebook_child_has_focus = 13;
     bm_TGtkNotebook_have_visible_child = $4000;
     bp_TGtkNotebook_have_visible_child = 14;
function  show_tabs(var a : TGtkNotebook) : guint;
procedure set_show_tabs(var a : TGtkNotebook; __show_tabs : guint);
function  homogeneous(var a : TGtkNotebook) : guint;overload;
procedure set_homogeneous(var a : TGtkNotebook; __homogeneous : guint);overload;
function  show_border(var a : TGtkNotebook) : guint;
procedure set_show_border(var a : TGtkNotebook; __show_border : guint);
function  tab_pos(var a : TGtkNotebook) : guint;
procedure set_tab_pos(var a : TGtkNotebook; __tab_pos : guint);
function  scrollable(var a : TGtkNotebook) : guint;
procedure set_scrollable(var a : TGtkNotebook; __scrollable : guint);
function  in_child(var a : TGtkNotebook) : guint;overload;
procedure set_in_child(var a : TGtkNotebook; __in_child : guint);overload;
function  click_child(var a : TGtkNotebook) : guint;overload;
procedure set_click_child(var a : TGtkNotebook; __click_child : guint);overload;
function  button(var a : TGtkNotebook) : guint;overload;
procedure set_button(var a : TGtkNotebook; __button : guint);overload;
function  need_timer(var a : TGtkNotebook) : guint;overload;
procedure set_need_timer(var a : TGtkNotebook; __need_timer : guint);overload;
function  child_has_focus(var a : TGtkNotebook) : guint;
procedure set_child_has_focus(var a : TGtkNotebook; __child_has_focus : guint);
function  have_visible_child(var a : TGtkNotebook) : guint;
procedure set_have_visible_child(var a : TGtkNotebook; __have_visible_child : guint);
  const
     bm_TGtkNotebookPage_default_menu = $1;
     bp_TGtkNotebookPage_default_menu = 0;
     bm_TGtkNotebookPage_default_tab = $2;
     bp_TGtkNotebookPage_default_tab = 1;
     bm_TGtkNotebookPage_expand = $4;
     bp_TGtkNotebookPage_expand = 2;
     bm_TGtkNotebookPage_fill = $8;
     bp_TGtkNotebookPage_fill = 3;
     bm_TGtkNotebookPage_pack = $10;
     bp_TGtkNotebookPage_pack = 4;
function  default_menu(var a : TGtkNotebookPage) : guint;
procedure set_default_menu(var a : TGtkNotebookPage; __default_menu : guint);
function  default_tab(var a : TGtkNotebookPage) : guint;
procedure set_default_tab(var a : TGtkNotebookPage; __default_tab : guint);
function  expand(var a : TGtkNotebookPage) : guint;overload;
procedure set_expand(var a : TGtkNotebookPage; __expand : guint);overload;
function  fill(var a : TGtkNotebookPage) : guint;overload;
procedure set_fill(var a : TGtkNotebookPage; __fill : guint);overload;
function  pack(var a : TGtkNotebookPage) : guint;overload;
procedure set_pack(var a : TGtkNotebookPage; __pack : guint);overload;
Type
  GTK_NOTEBOOK=PGtkNotebook;
  GTK_NOTEBOOK_CLASS=PGtkNotebookClass;
 
 
 
 
  type
     TGtkCTreePos = enum
			GTK_CTREE_POS_BEFORE;
			GTK_CTREE_POS_AS_CHILD;
       GTK_CTREE_POS_AFTER;
	end;
     TGtkCTreeLineStyle = enum
			GTK_CTREE_LINES_NONE;
			GTK_CTREE_LINES_SOLID;
       	GTK_CTREE_LINES_DOTTED;
			GTK_CTREE_LINES_TABBED;
     end;

     TGtkCTreeExpanderStyle = enum
			GTK_CTREE_EXPANDER_NONE;
			GTK_CTREE_EXPANDER_SQUARE;
      	GTK_CTREE_EXPANDER_TRIANGLE;
			GTK_CTREE_EXPANDER_CIRCULAR;
      end;

     TGtkCTreeExpansionType = enum
			GTK_CTREE_EXPANSION_EXPAND;
			GTK_CTREE_EXPANSION_EXPAND_RECURSIVE;
       	GTK_CTREE_EXPANSION_COLLAPSE;
			GTK_CTREE_EXPANSION_COLLAPSE_RECURSIVE;
	      GTK_CTREE_EXPANSION_TOGGLE;
			GTK_CTREE_EXPANSION_TOGGLE_RECURSIVE;
     end;
     PGtkCTree = ptr TGtkCTree;
     PGtkCTreeNode = ptr TGtkCTreeNode;
     PGtkCTreeRow = ptr TGtkCTreeRow;
     PGtkCTreeClass = ptr TGtkCTreeClass;
     TGtkCTreeFunc = procedure (ctree:PGtkCTree; node:PGtkCTreeNode; data:gpointer);cdecl;
     TGtkCTreeGNodeFunc = function (ctree:PGtkCTree; depth:guint; gnode:PGNode; cnode:PGtkCTreeNode; data:gpointer):gboolean;cdecl;
     TGtkCTreeCompareDragFunc = function (ctree:PGtkCTree; source_node:PGtkCTreeNode; new_parent:PGtkCTreeNode; new_sibling:PGtkCTreeNode):gboolean;cdecl;
     TGtkCTree = record
          clist : TGtkCList;
          lines_gc : PGdkGC;
          tree_indent : gint;
          tree_spacing : gint;
          tree_column : gint;
          flag0 :word ;{Todo win32:Longint}
          drag_compare : TGtkCTreeCompareDragFunc;
       end;
     TGtkCTreeNode = record
          list : TGList;
       end;
     TGtkCTreeRow = record
          row : TGtkCListRow;
          parent : PGtkCTreeNode;
          sibling : PGtkCTreeNode;
          children : PGtkCTreeNode;
          pixmap_closed : PGdkPixmap;
          mask_closed : PGdkBitmap;
          pixmap_opened : PGdkPixmap;
          mask_opened : PGdkBitmap;
          level : guint16;
          flag0 : word; {Todo win32:Longint}
       end;
     TGtkCTreeClass = record
          parent_class : TGtkCListClass;
          tree_select_row : procedure (ctree:PGtkCTree; row:PGtkCTreeNode; column:gint);cdecl;
          tree_unselect_row : procedure (ctree:PGtkCTree; row:PGtkCTreeNode; column:gint);cdecl;
          tree_expand : procedure (ctree:PGtkCTree; node:PGtkCTreeNode);cdecl;
          tree_collapse : procedure (ctree:PGtkCTree; node:PGtkCTreeNode);cdecl;
          tree_move : procedure (ctree:PGtkCTree; node:PGtkCTreeNode; new_parent:PGtkCTreeNode; new_sibling:PGtkCTreeNode);cdecl;
          change_focus_row_expansion : procedure (ctree:PGtkCTree; action:TGtkCTreeExpansionType);cdecl;
       end;
  const
     bm_TGtkCTree_line_style = $3;
     bp_TGtkCTree_line_style = 0;
     bm_TGtkCTree_expander_style = $C;
     bp_TGtkCTree_expander_style = 2;
     bm_TGtkCTree_show_stub = $10;
     bp_TGtkCTree_show_stub = 4;
function  line_style(var a : TGtkCTree) : guint;
procedure set_line_style(var a : TGtkCTree; __line_style : guint);
function  expander_style(var a : TGtkCTree) : guint;
procedure set_expander_style(var a : TGtkCTree; __expander_style : guint);
function  show_stub(var a : TGtkCTree) : guint;
procedure set_show_stub(var a : TGtkCTree; __show_stub : guint);
  const
     bm_TGtkCTreeRow_is_leaf = $1;
     bp_TGtkCTreeRow_is_leaf = 0;
     bm_TGtkCTreeRow_expanded = $2;
     bp_TGtkCTreeRow_expanded = 1;
type
  GTK_CTREE=PGtkCTree;
  GTK_CTREE_CLASS=PGtkCTreeClass;
 
 
 
 
  type
     TGtkCalendarDisplayOptions = enum
       GTK_CALENDAR_SHOW_HEADING := 1 shl 0;
       GTK_CALENDAR_SHOW_DAY_NAMES := 1 shl 1;
       GTK_CALENDAR_NO_MONTH_CHANGE := 1 shl 2;
       GTK_CALENDAR_SHOW_WEEK_NUMBERS := 1 shl 3;
       GTK_CALENDAR_WEEK_START_MONDAY := 1 shl 4;
     end;

     PGtkCalendar = ptr TGtkCalendar;
     TGtkCalendar = record
          widget : TGtkWidget;
          header_style : PGtkStyle;
          label_style : PGtkStyle;
          month : gint;
          year : gint;
          selected_day : gint;
          day_month : array[0 to 5, 0 to 6] of gint;
          day : array[0 to 5, 0 to 6] of gint;
          num_marked_dates : gint;
          marked_date : array[0 to 30] of gint;
          display_flags : TGtkCalendarDisplayOptions;
          marked_date_color : array[0 to 30] of TGdkColor;
          gc : PGdkGC;
          xor_gc : PGdkGC;
          focus_row : gint;
          focus_col : gint;
          highlight_row : gint;
          highlight_col : gint;
          private_data : gpointer;
          grow_space : array[0 to 31] of gchar;
       end;
     PGtkCalendarClass = ptr TGtkCalendarClass;
     TGtkCalendarClass = record
          parent_class : TGtkWidgetClass;
          month_changed : procedure (calendar:PGtkCalendar);cdecl;
          day_selected : procedure (calendar:PGtkCalendar);cdecl;
          day_selected_double_click : procedure (calendar:PGtkCalendar);cdecl;
          prev_month : procedure (calendar:PGtkCalendar);cdecl;
          next_month : procedure (calendar:PGtkCalendar);cdecl;
          prev_year : procedure (calendar:PGtkCalendar);cdecl;
          next_year : procedure (calendar:PGtkCalendar);cdecl;
       end;
type
  GTK_CALENDAR=PGtkCalendar;
  GTK_CALENDAR_CLASS=PGtkCalendarClass;
 
 
 
 
  const
     GTK_NUM_FONT_PROPERTIES = 6;
     GTK_NUM_STYLE_PROPERTIES = 5;
     GTK_NUM_FONT_FILTERS = 2;
  type
     TGtkFontMetricType = enum
			GTK_FONT_METRIC_PIXELS;
			GTK_FONT_METRIC_POINTS;
		end;

     TGtkFontType = enum
			GTK_FONT_BITMAP := 1 shl 0;
			GTK_FONT_SCALABLE := 1 shl 1;
     		GTK_FONT_SCALABLE_BITMAP := 1 shl 2;
			GTK_FONT_ALL := $07;
	 end;

     TGtkFontFilterType = enum
			GTK_FONT_FILTER_BASE;
			GTK_FONT_FILTER_USER;
		end;

     PGtkFontFilter = ptr TGtkFontFilter;
     TGtkFontFilter = record
          font_type : gint;
          property_filters : array[0 to (GTK_NUM_FONT_PROPERTIES)-1] of Pguint16;
          property_nfilters : array[0 to (GTK_NUM_FONT_PROPERTIES)-1] of guint16;
       end;
     PGtkFontSelection = ptr TGtkFontSelection;
     TGtkFontSelection = record
          notebook : TGtkNotebook;
          main_vbox : PGtkWidget;
          font_label : PGtkWidget;
          font_entry : PGtkWidget;
          font_clist : PGtkWidget;
          font_style_entry : PGtkWidget;
          font_style_clist : PGtkWidget;
          size_entry : PGtkWidget;
          size_clist : PGtkWidget;
          pixels_button : PGtkWidget;
          points_button : PGtkWidget;
          filter_button : PGtkWidget;
          preview_entry : PGtkWidget;
          message_label : PGtkWidget;
          info_vbox : PGtkWidget;
          info_clist : PGtkWidget;
          requested_font_name : PGtkWidget;
          actual_font_name : PGtkWidget;
          filter_vbox : PGtkWidget;
          type_bitmaps_button : PGtkWidget;
          type_scalable_button : PGtkWidget;
          type_scaled_bitmaps_button : PGtkWidget;
          filter_clists : array[0 to (GTK_NUM_FONT_PROPERTIES)-1] of PGtkWidget;
          font : PGdkFont;
          font_index : gint;
          style : gint;
          metric : TGtkFontMetricType;
          SelectionSize : gint;
          selected_size : gint;
          property_values : array[0 to (GTK_NUM_STYLE_PROPERTIES)-1] of guint16;
          filters : array[0 to (GTK_NUM_FONT_FILTERS)-1] of TGtkFontFilter;
       end;
     PGtkFontSelectionClass = ptr TGtkFontSelectionClass;
     TGtkFontSelectionClass = record
          parent_class : TGtkNotebookClass;
       end;
     PGtkFontSelectionDialog = ptr TGtkFontSelectionDialog;
     TGtkFontSelectionDialog = record
          window : TGtkWindow;
          fontsel : PGtkWidget;
          main_vbox : PGtkWidget;
          action_area : PGtkWidget;
          ok_button : PGtkWidget;
          apply_button : PGtkWidget;
          cancel_button : PGtkWidget;
          dialog_width : gint;
          auto_resize : gboolean;
       end;
     PGtkFontSelectionDialogClass = ptr TGtkFontSelectionDialogClass;
     TGtkFontSelectionDialogClass = record
          parent_class : TGtkWindowClass;
       end;
  GTK_FONT_SELECTION=PGtkFontSelection;
  GTK_FONT_SELECTION_CLASS=PGtkFontSelectionClass;
  GTK_FONT_SELECTION_DIALOG=PGtkFontSelectionDialog;
  GTK_FONT_SELECTION_DIALOG_CLASS=PGtkFontSelectionDialogClass;

function  visible(var a : TGtkCListColumn) : guint;overload;
procedure set_visible(var a : TGtkCListColumn; __visible : guint);overload;
function  width_set(var a : TGtkCListColumn) : guint;
procedure set_width_set(var a : TGtkCListColumn; __width_set : guint);
function  resizeable(var a : TGtkCListColumn) : guint;
procedure set_resizeable(var a : TGtkCListColumn; __resizeable : guint);
function  auto_resize(var a : TGtkCListColumn) : guint;
procedure set_auto_resize(var a : TGtkCListColumn; __auto_resize : guint);
function  button_passive(var a : TGtkCListColumn) : guint;
procedure set_button_passive(var a : TGtkCListColumn; __button_passive : guint);


function  is_leaf(var a : TGtkCTreeRow) : guint;
procedure set_is_leaf(var a : TGtkCTreeRow; __is_leaf : guint);
function  expanded(var a : TGtkCTreeRow) : guint;overload;
procedure set_expanded(var a : TGtkCTreeRow; __expanded : guint);overload;

function  GTK_CTREE_ROW(_node_ : PGList) : PGtkCTreeRow;
function  GTK_CTREE_NODE(_node_ : PGList) : PGtkCTreeNode;
function  GTK_CTREE_NODE_NEXT(_nnode_ : PGList) : PGtkCTreeNode;
function  GTK_CTREE_NODE_PREV(_pnode_ : PGList) : PGtkCTreeNode;
function  GTK_CTREE_FUNC(_func_ : pointer) : TGtkCTreeFunc;
function  GTK_IS_NOTEBOOK(obj:pointer):boolean;
function  GTK_IS_NOTEBOOK_CLASS(klass:pointer):boolean;
function  GTK_IS_CALENDAR(obj:pointer):boolean;
function  GTK_IS_CALENDAR_CLASS(klass:pointer):boolean;
function  GTK_IS_CTREE(obj:pointer):boolean;
function  GTK_IS_CTREE_CLASS(klass:pointer):boolean;
function  GTK_IS_FONT_SELECTION(obj:pointer):boolean;
function  GTK_IS_FONT_SELECTION_CLASS(klass:pointer):boolean;
function  GTK_IS_FONT_SELECTION_DIALOG(obj:pointer):boolean;
function  GTK_IS_FONT_SELECTION_DIALOG_CLASS(klass:pointer):boolean;
function  GTK_IS_GAMMA_CURVE(obj:pointer):boolean;
function  GTK_IS_GAMMA_CURVE_CLASS(klass:pointer):boolean;
function  GTK_IS_STATUSBAR(obj:pointer):boolean;
function  GTK_IS_STATUSBAR_CLASS(klass:pointer):boolean;
function  GTK_IS_COMBO(obj:pointer):boolean;
function  GTK_IS_COMBO_CLASS(klass:pointer):boolean;
function  GTK_IS_ADJUSTMENT(obj:pointer):boolean;
function  GTK_IS_ADJUSTMENT_CLASS(klass:pointer):boolean;
function  GTK_IS_ACCEL_LABEL(obj:pointer):boolean;
function  GTK_IS_ACCEL_LABEL_CLASS(klass:pointer):boolean;
function  GTK_IS_ARROW(obj:pointer):boolean;
function  GTK_IS_ARROW_CLASS(klass:pointer):boolean;
function  GTK_IS_DATA(obj:pointer):boolean;
function  GTK_IS_DATA_CLASS(klass:pointer):boolean;
function  GTK_IS_MISC(obj:pointer):boolean;
function  GTK_IS_MISC_CLASS(klass:pointer):boolean;
function  GTK_IS_DRAWING_AREA(obj:pointer):boolean;
function  GTK_IS_DRAWING_AREA_CLASS(klass:pointer):boolean;
function  GTK_IS_WIDGET(obj:pointer):boolean;
function  GTK_IS_WIDGET_CLASS(klass:pointer):boolean;
function  GTK_STYLE_ATTACHED(style : PGtkstyle) : boolean;
function  GTK_IS_LABEL(obj:pointer):boolean;
function  GTK_IS_LABEL_CLASS(klass:pointer):boolean;
function  GTK_IS_CLIST(obj:pointer):boolean;
function  GTK_IS_CLIST_CLASS(klass:pointer):boolean;
function  latin1_to_char(var a : TGtkAccelLabelClass) : guint;
procedure set_latin1_to_char(var a : TGtkAccelLabelClass; __latin1_to_char : guint);
function  GTK_NOTEBOOK_PAGE(_glist_ : PGList) : PGtkNotebookPage;


external libgtk

function  GTK_VSEPARATOR_TYPE:TGtkType; name 'gtk_vseparator_get_type';
function  gtk_vseparator_get_type:TGtkType; name 'gtk_vseparator_get_type';
function  gtk_vseparator_new:PGtkWidget; name 'gtk_vseparator_new';
 
function  GTK_HSEPARATOR_TYPE:TGtkType; name 'gtk_hseparator_get_type';
function  gtk_hseparator_get_type:TGtkType; name 'gtk_hseparator_get_type';
function  gtk_hseparator_new:PGtkWidget; name 'gtk_hseparator_new';
function  GTK_SEPARATOR_TYPE:TGtkType; name 'gtk_separator_get_type';
function  gtk_separator_get_type:TGtkType; name 'gtk_separator_get_type';
 
function  GTK_VSCROLLBAR_TYPE:TGtkType; name 'gtk_vscrollbar_get_type';
function  gtk_vscrollbar_get_type:TGtkType; name 'gtk_vscrollbar_get_type';
function  gtk_vscrollbar_new (adjustment:PGtkAdjustment):PGtkWidget; name 'gtk_vscrollbar_new';
function  GTK_HSCROLLBAR_TYPE:TGtkType; name 'gtk_hscrollbar_get_type';
function  gtk_hscrollbar_get_type:TGtkType; name 'gtk_hscrollbar_get_type';
function  gtk_hscrollbar_new (adjustment:PGtkAdjustment):PGtkWidget; name 'gtk_hscrollbar_new';
function  GTK_SCROLLBAR_TYPE:TGtkType; name 'gtk_scrollbar_get_type';

function  gtk_scrollbar_get_type:TGtkType; name 'gtk_scrollbar_get_type';
function  GTK_VSCALE_TYPE:TGtkType; name 'gtk_vscale_get_type';

function  gtk_vscale_get_type:TGtkType; name 'gtk_vscale_get_type';
function  gtk_vscale_new(adjustment:PGtkAdjustment):PGtkWidget; name 'gtk_vscale_new';
function  GTK_HSCALE_TYPE:TGtkType; name 'gtk_hscale_get_type';

function  gtk_hscale_get_type:TGtkType; name 'gtk_hscale_get_type';
function  gtk_hscale_new(adjustment:PGtkAdjustment):PGtkWidget; name 'gtk_hscale_new';
function  GTK_SCALE_TYPE:TGtkType; name 'gtk_scale_get_type';

function  gtk_scale_get_type:TGtkType; name 'gtk_scale_get_type';
procedure gtk_scale_set_digits(scale:PGtkScale; digits:gint); name 'gtk_scale_set_digits';
procedure gtk_scale_set_draw_value(scale:PGtkScale; draw_value:gboolean); name 'gtk_scale_set_draw_value';
procedure gtk_scale_set_value_pos(scale:PGtkScale; pos:TGtkPositionType); name 'gtk_scale_set_value_pos';
{function  gtk_scale_value_width(scale:PGtkScale):gint; name 'gtk_scale_value_width';}
procedure gtk_scale_draw_value(scale:PGtkScale); name 'gtk_scale_draw_value';
function  GTK_VRULER_TYPE:TGtkType; name 'gtk_vruler_get_type';
function  gtk_vruler_get_type:TGtkType; name 'gtk_vruler_get_type';
function  gtk_vruler_new:PGtkWidget; name 'gtk_vruler_new';
function  GTK_HRULER_TYPE:TGtkType; name 'gtk_hruler_get_type';
function  gtk_hruler_get_type:TGtkType; name 'gtk_hruler_get_type';
function  gtk_hruler_new:PGtkWidget; name 'gtk_hruler_new';
function  GTK_RULER_TYPE:TGtkType; name 'gtk_ruler_get_type';

function  gtk_ruler_get_type:TGtkType; name 'gtk_ruler_get_type';
procedure gtk_ruler_set_metric(ruler:PGtkRuler; metric:TGtkMetricType); name 'gtk_ruler_set_metric';
procedure gtk_ruler_set_range(ruler:PGtkRuler; lower:gfloat; upper:gfloat; position:gfloat; max_size:gfloat); name 'gtk_ruler_set_range';
procedure gtk_ruler_draw_ticks(ruler:PGtkRuler); name 'gtk_ruler_draw_ticks';
procedure gtk_ruler_draw_pos(ruler:PGtkRuler); name 'gtk_ruler_draw_pos';
function  GTK_VPANED_TYPE:TGtkType; name 'gtk_vpaned_get_type';
function  gtk_vpaned_get_type:TGtkType; name 'gtk_vpaned_get_type';
function  gtk_vpaned_new:PGtkWidget; name 'gtk_vpaned_new';

function  GTK_HPANED_TYPE:TGtkType; name 'gtk_hpaned_get_type';

function  gtk_hpaned_get_type:TGtkType; name 'gtk_hpaned_get_type';
function  gtk_hpaned_new : PGtkWidget; name 'gtk_hpaned_new';
function  GTK_PANED_TYPE:TGtkType; name 'gtk_paned_get_type';

function  gtk_paned_get_type:TGtkType; name 'gtk_paned_get_type';
procedure gtk_paned_add1(paned:PGtkPaned; child:PGtkWidget); name 'gtk_paned_add1';
procedure gtk_paned_add2(paned:PGtkPaned; child:PGtkWidget); name 'gtk_paned_add2';
procedure gtk_paned_pack1(paned:PGtkPaned; child:PGtkWidget; resize:gboolean; shrink:gboolean); name 'gtk_paned_pack1';
procedure gtk_paned_pack2(paned:PGtkPaned; child:PGtkWidget; resize:gboolean; shrink:gboolean); name 'gtk_paned_pack2';
procedure gtk_paned_set_position(paned:PGtkPaned; position:gint); name 'gtk_paned_set_position';
procedure gtk_paned_set_handle_size(paned:PGtkPaned; psize:guint16); name 'gtk_paned_set_handle_size';
procedure gtk_paned_set_gutter_size(paned:PGtkPaned; psize:guint16); name 'gtk_paned_set_gutter_size';
procedure gtk_paned_compute_position(paned:PGtkPaned; allocation:gint; child1_req:gint; child2_req:gint); name 'gtk_paned_compute_position';
function  GTK_VBUTTON_BOX_TYPE:TGtkType; name 'gtk_vbutton_box_get_type';

function  gtk_vbutton_box_get_type:TGtkType; name 'gtk_vbutton_box_get_type';
function  gtk_vbutton_box_new:PGtkWidget; name 'gtk_vbutton_box_new';
function  gtk_vbutton_box_get_spacing_default:gint; name 'gtk_vbutton_box_get_spacing_default';
procedure gtk_vbutton_box_set_spacing_default(spacing:gint); name 'gtk_vbutton_box_set_spacing_default';
function  gtk_vbutton_box_get_layout_default:TGtkButtonBoxStyle; name 'gtk_vbutton_box_get_layout_default';
procedure gtk_vbutton_box_set_layout_default(layout:TGtkButtonBoxStyle); name 'gtk_vbutton_box_set_layout_default';
function  GTK_BUTTON_BOX_TYPE:TGtkType; name 'gtk_button_box_get_type';
function  gtk_button_box_get_type:TGtktype; name 'gtk_button_box_get_type';
procedure gtk_button_box_get_child_size_default(min_width:Pgint; min_height:Pgint); name 'gtk_button_box_get_child_size_default';
procedure gtk_button_box_get_child_ipadding_default(ipad_x:Pgint; ipad_y:Pgint); name 'gtk_button_box_get_child_ipadding_default';
procedure gtk_button_box_set_child_size_default(min_width:gint; min_height:gint); name 'gtk_button_box_set_child_size_default';
procedure gtk_button_box_set_child_ipadding_default(ipad_x:gint; ipad_y:gint); name 'gtk_button_box_set_child_ipadding_default';
function  gtk_button_box_get_spacing(widget:PGtkButtonBox):gint; name 'gtk_button_box_get_spacing';
function  gtk_button_box_get_layout(widget:PGtkButtonBox):TGtkButtonBoxStyle; name 'gtk_button_box_get_layout';
procedure gtk_button_box_get_child_size(widget:PGtkButtonBox; min_width:Pgint; min_height:Pgint); name 'gtk_button_box_get_child_size';
procedure gtk_button_box_get_child_ipadding(widget:PGtkButtonBox; ipad_x:Pgint; ipad_y:Pgint); name 'gtk_button_box_get_child_ipadding';
procedure gtk_button_box_set_spacing(widget:PGtkButtonBox; spacing:gint); name 'gtk_button_box_set_spacing';
procedure gtk_button_box_set_layout(widget:PGtkButtonBox; layout_style:TGtkButtonBoxStyle); name 'gtk_button_box_set_layout';
procedure gtk_button_box_set_child_size(widget:PGtkButtonBox; min_width:gint; min_height:gint); name 'gtk_button_box_set_child_size';
procedure gtk_button_box_set_child_ipadding(widget:PGtkButtonBox; ipad_x:gint; ipad_y:gint); name 'gtk_button_box_set_child_ipadding';
function  GTK_VBOX_TYPE:TGtkType; name 'gtk_vbox_get_type';

function  gtk_vbox_get_type:TGtkType; name 'gtk_vbox_get_type';
function  gtk_vbox_new(homogeneous:gboolean; spacing:gint):PGtkWidget; name 'gtk_vbox_new';
function  GTK_HBOX_TYPE:TGtkType; name 'gtk_hbox_get_type';

function  gtk_hbox_get_type:TGtkType; name 'gtk_hbox_get_type';
function  gtk_hbox_new(homogeneous:gboolean; spacing:gint):PGtkWidget; name 'gtk_hbox_new';
function  GTK_BOX_TYPE:TGtkType; name 'gtk_box_get_type';

function  gtk_box_get_type:TGtkType; name 'gtk_box_get_type';
procedure gtk_box_pack_start(box:PGtkBox; child:PGtkWidget; expand:gboolean; fill:gboolean; padding:guint); name 'gtk_box_pack_start';
procedure gtk_box_pack_end(box:PGtkBox; child:PGtkWidget; expand:gboolean; fill:gboolean; padding:guint); name 'gtk_box_pack_end';
procedure gtk_box_pack_start_defaults(box:PGtkBox; widget:PGtkWidget); name 'gtk_box_pack_start_defaults';
procedure gtk_box_pack_end_defaults(box:PGtkBox; widget:PGtkWidget); name 'gtk_box_pack_end_defaults';
procedure gtk_box_set_homogeneous(box:PGtkBox; homogeneous:gboolean); name 'gtk_box_set_homogeneous';
procedure gtk_box_set_spacing(box:PGtkBox; spacing:gint); name 'gtk_box_set_spacing';
procedure gtk_box_reorder_child(box:PGtkBox; child:PGtkWidget; position:gint); name 'gtk_box_reorder_child';
procedure gtk_box_query_child_packing(box:PGtkBox; child:PGtkWidget; expand:Pgboolean; fill:Pgboolean; padding:Pguint;pack_type:PGtkPackType); name 'gtk_box_query_child_packing';
procedure gtk_box_set_child_packing(box:PGtkBox; child:PGtkWidget; expand:gboolean; fill:gboolean; padding:guint; pack_type:TGtkPackType); name 'gtk_box_set_child_packing';
function  gtk_tree_get_type:TGtkType; name 'gtk_tree_get_type';
function  gtk_tree_new:PGtkWidget; name 'gtk_tree_new';
procedure gtk_tree_append(tree:PGtkTree; tree_item:PGtkWidget); name 'gtk_tree_append';
procedure gtk_tree_prepend(tree:PGtkTree; tree_item:PGtkWidget); name 'gtk_tree_prepend';
procedure gtk_tree_insert(tree:PGtkTree; tree_item:PGtkWidget; position:gint); name 'gtk_tree_insert';
procedure gtk_tree_remove_items(tree:PGtkTree; items:PGList); name 'gtk_tree_remove_items';
procedure gtk_tree_clear_items(tree:PGtkTree; start:gint; theend:gint); name 'gtk_tree_clear_items';
procedure gtk_tree_select_item(tree:PGtkTree; item:gint); name 'gtk_tree_select_item';
procedure gtk_tree_unselect_item(tree:PGtkTree; item:gint); name 'gtk_tree_unselect_item';
procedure gtk_tree_select_child(tree:PGtkTree; tree_item:PGtkWidget); name 'gtk_tree_select_child';
procedure gtk_tree_unselect_child(tree:PGtkTree; tree_item:PGtkWidget); name 'gtk_tree_unselect_child';
function  gtk_tree_child_position(tree:PGtkTree; child:PGtkWidget):gint; name 'gtk_tree_child_position';
procedure gtk_tree_set_selection_mode(tree:PGtkTree; mode:TGtkSelectionMode); name 'gtk_tree_set_selection_mode';
procedure gtk_tree_set_view_mode(tree:PGtkTree; mode:TGtkTreeViewMode); name 'gtk_tree_set_view_mode';
procedure gtk_tree_set_view_lines(tree:PGtkTree; flag:guint); name 'gtk_tree_set_view_lines';
procedure gtk_tree_remove_item(tree:PGtkTree; child:PGtkWidget); name 'gtk_tree_remove_item';
function  GTK_TREE_ITEM_TYPE:TGtkType; name 'gtk_tree_item_get_type';

function  gtk_tree_item_get_type:TGtkType; name 'gtk_tree_item_get_type';
function  gtk_tree_item_new:PGtkWidget; name 'gtk_tree_item_new';
function  gtk_tree_item_new_with_label(thelabel:Pgchar):PGtkWidget; name 'gtk_tree_item_new_with_label';
procedure gtk_tree_item_set_subtree(tree_item:PGtkTreeItem; subtree:PGtkWidget); name 'gtk_tree_item_set_subtree';
procedure gtk_tree_item_remove_subtree(tree_item:PGtkTreeItem); name 'gtk_tree_item_remove_subtree';
procedure gtk_tree_item_select(tree_item:PGtkTreeItem); name 'gtk_tree_item_select';
procedure gtk_tree_item_deselect(tree_item:PGtkTreeItem); name 'gtk_tree_item_deselect';
procedure gtk_tree_item_expand(tree_item:PGtkTreeItem); name 'gtk_tree_item_expand';
procedure gtk_tree_item_collapse(tree_item:PGtkTreeItem); name 'gtk_tree_item_collapse';
function  gtk_toolbar_get_type:guint; name 'gtk_toolbar_get_type';
function  gtk_toolbar_new(orientation:TGtkOrientation; style:TGtkToolbarStyle):PGtkWidget; name 'gtk_toolbar_new';
function  gtk_toolbar_append_item(toolbar:PGtkToolbar; thetext:pchar; tooltip_text:pchar; tooltip_private_text:pchar; icon:PGtkWidget; callback:TGtkSignalFunc; user_data:gpointer):PGtkWidget; name 'gtk_toolbar_append_item';
function  gtk_toolbar_prepend_item(toolbar:PGtkToolbar; thetext:pchar; tooltip_text:pchar; tooltip_private_text:pchar; icon:PGtkWidget; callback:TGtkSignalFunc; user_data:gpointer):PGtkWidget; name 'gtk_toolbar_prepend_item';
function  gtk_toolbar_insert_item(toolbar:PGtkToolbar; thetext:pchar; tooltip_text:pchar; tooltip_private_text:pchar; icon:PGtkWidget; callback:TGtkSignalFunc; user_data:gpointer; position:gint):PGtkWidget; name 'gtk_toolbar_insert_item';
procedure gtk_toolbar_append_space(toolbar:PGtkToolbar); name 'gtk_toolbar_append_space';
procedure gtk_toolbar_prepend_space(toolbar:PGtkToolbar); name 'gtk_toolbar_prepend_space';
procedure gtk_toolbar_insert_space(toolbar:PGtkToolbar; position:gint); name 'gtk_toolbar_insert_space';
function  gtk_toolbar_append_element(toolbar:PGtkToolbar; thetype:TGtkToolbarChildType; widget:PGtkWidget; thetext:pchar; tooltip_text:pchar;tooltip_private_text:pchar; icon:PGtkWidget; callback:TGtkSignalFunc; user_data:gpointer):PGtkWidget; name 'gtk_toolbar_append_element';
function  gtk_toolbar_prepend_element(toolbar:PGtkToolbar; thetype:TGtkToolbarChildType; widget:PGtkWidget; thetext:pchar; tooltip_text:pchar;tooltip_private_text:pchar; icon:PGtkWidget; callback:TGtkSignalFunc; user_data:gpointer):PGtkWidget;  name 'gtk_toolbar_prepend_element';
function  gtk_toolbar_insert_element(toolbar:PGtkToolbar; thetype:TGtkToolbarChildType; widget:PGtkWidget; thetext:pchar; tooltip_text:pchar;tooltip_private_text:pchar; icon:PGtkWidget; callback:TGtkSignalFunc; user_data:gpointer; position:gint):PGtkWidget; name 'gtk_toolbar_insert_element';
procedure gtk_toolbar_append_widget(toolbar:PGtkToolbar; widget:PGtkWidget; tooltip_text:pchar; tooltip_private_text:pchar); name 'gtk_toolbar_append_widget';
procedure gtk_toolbar_prepend_widget(toolbar:PGtkToolbar; widget:PGtkWidget; tooltip_text:pchar; tooltip_private_text:pchar); name 'gtk_toolbar_prepend_widget';
procedure gtk_toolbar_insert_widget(toolbar:PGtkToolbar; widget:PGtkWidget; tooltip_text:pchar; tooltip_private_text:pchar; position:gint); name 'gtk_toolbar_insert_widget';
procedure gtk_toolbar_set_orientation(toolbar:PGtkToolbar; orientation:TGtkOrientation); name 'gtk_toolbar_set_orientation';
procedure gtk_toolbar_set_style(toolbar:PGtkToolbar; style:TGtkToolbarStyle); name 'gtk_toolbar_set_style';
procedure gtk_toolbar_set_space_size(toolbar:PGtkToolbar; space_size:gint); name 'gtk_toolbar_set_space_size';
procedure gtk_toolbar_set_space_style(toolbar:PGtkToolbar; space_style:TGtkToolbarSpaceStyle); name 'gtk_toolbar_set_space_style';
procedure gtk_toolbar_set_tooltips(toolbar:PGtkToolbar; enable:gint); name 'gtk_toolbar_set_tooltips';
procedure gtk_toolbar_set_button_relief(toolbar:PGtkToolbar; relief:TGtkReliefStyle); name 'gtk_toolbar_set_button_relief';
function  gtk_toolbar_get_button_relief(toolbar:PGtkToolbar):TGtkReliefStyle; name 'gtk_toolbar_get_button_relief';
function  GTK_TOOLTIPS_TYPE:TGtkType; name 'gtk_tooltips_get_type';
function  gtk_tooltips_get_type:TGtkType; name 'gtk_tooltips_get_type';
function  gtk_tooltips_new:PGtkTooltips; name 'gtk_tooltips_new';
procedure gtk_tooltips_enable(tooltips:PGtkTooltips); name 'gtk_tooltips_enable';
procedure gtk_tooltips_disable(tooltips:PGtkTooltips); name 'gtk_tooltips_disable';
procedure gtk_tooltips_set_delay(tooltips:PGtkTooltips; delay:guint); name 'gtk_tooltips_set_delay';
procedure gtk_tooltips_set_tip(tooltips:PGtkTooltips; widget:PGtkWidget; tip_text:Pgchar; tip_private:Pgchar); name 'gtk_tooltips_set_tip';
procedure gtk_tooltips_set_colors(tooltips:PGtkTooltips; background:PGdkColor; foreground:PGdkColor); name 'gtk_tooltips_set_colors';
function  gtk_tooltips_data_get(widget:PGtkWidget):PGtkTooltipsData; name 'gtk_tooltips_data_get';
procedure gtk_tooltips_force_window(tooltips:PGtkTooltips); name 'gtk_tooltips_force_window';
function  GTK_TIPS_QUERY_TYPE:TGtkType; name 'gtk_tips_query_get_type';

function  gtk_tips_query_get_type:TGtkType; name 'gtk_tips_query_get_type';
function  gtk_tips_query_new:PGtkWidget; name 'gtk_tips_query_new';
procedure gtk_tips_query_start_query(tips_query:PGtkTipsQuery); name 'gtk_tips_query_start_query';
procedure gtk_tips_query_stop_query(tips_query:PGtkTipsQuery); name 'gtk_tips_query_stop_query';
procedure gtk_tips_query_set_caller(tips_query:PGtkTipsQuery; caller:PGtkWidget); name 'gtk_tips_query_set_caller';
procedure gtk_tips_query_set_labels(tips_query:PGtkTipsQuery; label_inactive:Pgchar; label_no_tip:Pgchar); name 'gtk_tips_query_set_labels';
function  GTK_TABLE_TYPE:TGtkType; name 'gtk_table_get_type';

function  gtk_table_get_type:TGtkType; name 'gtk_table_get_type';
function  gtk_table_new(rows:guint; columns:guint; homogeneous:gboolean):PGtkWidget; name 'gtk_table_new';
procedure gtk_table_resize(table:PGtkTable; rows:guint; columns:guint); name 'gtk_table_resize';
procedure gtk_table_attach(table:PGtkTable; child:PGtkWidget; left_attach:guint; right_attach:guint; top_attach:guint; bottom_attach:guint; xoptions:TGtkAttachOptions; yoptions:TGtkAttachOptions; xpadding:guint; ypadding:guint); name 'gtk_table_attach';
procedure gtk_table_attach_defaults(table:PGtkTable; widget:PGtkWidget; left_attach:guint; right_attach:guint; top_attach:guint; bottom_attach:guint); name 'gtk_table_attach_defaults';
procedure gtk_table_set_row_spacing(table:PGtkTable; row:guint; spacing:guint); name 'gtk_table_set_row_spacing';
procedure gtk_table_set_col_spacing(table:PGtkTable; column:guint; spacing:guint); name 'gtk_table_set_col_spacing';
procedure gtk_table_set_row_spacings(table:PGtkTable; spacing:guint); name 'gtk_table_set_row_spacings';
procedure gtk_table_set_col_spacings(table:PGtkTable; spacing:guint); name 'gtk_table_set_col_spacings';
procedure gtk_table_set_homogeneous(table:PGtkTable; homogeneous:gboolean); name 'gtk_table_set_homogeneous';
function  GTK_SPIN_BUTTON_TYPE:TGtkType; name 'gtk_spin_button_get_type';

function  gtk_spin_button_get_type:TGtkType; name 'gtk_spin_button_get_type';
procedure gtk_spin_button_configure(spin_button:PGtkSpinButton; adjustment:PGtkAdjustment; climb_rate:gfloat; digits:guint); name 'gtk_spin_button_configure';
function  gtk_spin_button_new(adjustment:PGtkAdjustment; climb_rate:gfloat; digits:guint):PGtkWidget; name 'gtk_spin_button_new';
procedure gtk_spin_button_set_adjustment(spin_button:PGtkSpinButton; adjustment:PGtkAdjustment); name 'gtk_spin_button_set_adjustment';
function  gtk_spin_button_get_adjustment(spin_button:PGtkSpinButton):PGtkAdjustment; name 'gtk_spin_button_get_adjustment';
procedure gtk_spin_button_set_digits(spin_button:PGtkSpinButton; digits:guint); name 'gtk_spin_button_set_digits';
function  gtk_spin_button_get_value_as_float(spin_button:PGtkSpinButton):gfloat; name 'gtk_spin_button_get_value_as_float';
function  gtk_spin_button_get_value_as_int(spin_button:PGtkSpinButton):gint; name 'gtk_spin_button_get_value_as_int';
procedure gtk_spin_button_set_value(spin_button:PGtkSpinButton; _value:gfloat); name 'gtk_spin_button_set_value';
procedure gtk_spin_button_set_update_policy(spin_button:PGtkSpinButton; policy:TGtkSpinButtonUpdatePolicy); name 'gtk_spin_button_set_update_policy';
procedure gtk_spin_button_set_numeric(spin_button:PGtkSpinButton; numeric:gboolean); name 'gtk_spin_button_set_numeric';
procedure gtk_spin_button_spin(spin_button:PGtkSpinButton; direction:TGtkSpinType; increment:gfloat); name 'gtk_spin_button_spin';
procedure gtk_spin_button_set_wrap(spin_button:PGtkSpinButton; wrap:gboolean); name 'gtk_spin_button_set_wrap';
procedure gtk_spin_button_set_shadow_type(spin_button:PGtkSpinButton; shadow_type:TGtkShadowType); name 'gtk_spin_button_set_shadow_type';
procedure gtk_spin_button_set_snap_to_ticks(spin_button:PGtkSpinButton; snap_to_ticks:gboolean); name 'gtk_spin_button_set_snap_to_ticks';
procedure gtk_spin_button_update(spin_button:PGtkSpinButton); name 'gtk_spin_button_update';

function  gtk_target_list_new(targets:PGtkTargetEntry; ntargets:guint):PGtkTargetList; name 'gtk_target_list_new';
procedure gtk_target_list_ref(list:PGtkTargetList); name 'gtk_target_list_ref';
procedure gtk_target_list_unref(list:PGtkTargetList); name 'gtk_target_list_unref';
procedure gtk_target_list_add(list:PGtkTargetList; target:TGdkAtom; flags:guint; info:guint); name 'gtk_target_list_add';
procedure gtk_target_list_add_table(list:PGtkTargetList; targets:PGtkTargetEntry; ntargets:guint); name 'gtk_target_list_add_table';
procedure gtk_target_list_remove(list:PGtkTargetList; target:TGdkAtom); name 'gtk_target_list_remove';
function  gtk_target_list_find(list:PGtkTargetList; target:TGdkAtom; info:Pguint):gboolean; name 'gtk_target_list_find';
function  gtk_selection_owner_set(widget:PGtkWidget; selection:TGdkAtom; time:guint32):gint; name 'gtk_selection_owner_set';
procedure gtk_selection_add_target(widget:PGtkWidget; selection:TGdkAtom; target:TGdkAtom; info:guint); name 'gtk_selection_add_target';
procedure gtk_selection_add_targets(widget:PGtkWidget; selection:TGdkAtom; targets:PGtkTargetEntry; ntargets:guint); name 'gtk_selection_add_targets';
function  gtk_selection_convert(widget:PGtkWidget; selection:TGdkAtom; target:TGdkAtom; time:guint32):gint; name 'gtk_selection_convert';
procedure gtk_selection_data_set(selection_data:PGtkSelectionData; thetype:TGdkAtom; format:gint; data:Pguchar; length:gint); name 'gtk_selection_data_set';
procedure gtk_selection_remove_all(widget:PGtkWidget); name 'gtk_selection_remove_all';
function  gtk_selection_clear(widget:PGtkWidget; event:PGdkEventSelection):gint; name 'gtk_selection_clear';
function  gtk_selection_request(widget:PGtkWidget; event:PGdkEventSelection):gint; name 'gtk_selection_request';
function  gtk_selection_incr_event(window:PGdkWindow; event:PGdkEventProperty):gint; name 'gtk_selection_incr_event';
function  gtk_selection_notify(widget:PGtkWidget; event:PGdkEventSelection):gint; name 'gtk_selection_notify';
function  gtk_selection_property_notify(widget:PGtkWidget; event:PGdkEventProperty):gint; name 'gtk_selection_property_notify';
function  gtk_selection_data_copy(data:PGtkSelectionData):PGtkSelectionData; name 'gtk_selection_data_copy';
procedure gtk_selection_data_free(data:PGtkSelectionData); name 'gtk_selection_data_free';
function  GTK_SCROLLED_WINDOW_TYPE:TGtkType; name 'gtk_scrolled_window_get_type';

function  gtk_scrolled_window_get_type:TGtkType; name 'gtk_scrolled_window_get_type';
function  gtk_scrolled_window_new(hadjustment:PGtkAdjustment; vadjustment:PGtkAdjustment):PGtkWidget; name 'gtk_scrolled_window_new';
procedure gtk_scrolled_window_set_hadjustment(scrolled_window:PGtkScrolledWindow; hadjustment:PGtkAdjustment); name 'gtk_scrolled_window_set_hadjustment';
procedure gtk_scrolled_window_set_vadjustment(scrolled_window:PGtkScrolledWindow; hadjustment:PGtkAdjustment); name 'gtk_scrolled_window_set_vadjustment';
function  gtk_scrolled_window_get_hadjustment(scrolled_window:PGtkScrolledWindow):PGtkAdjustment; name 'gtk_scrolled_window_get_hadjustment';
function  gtk_scrolled_window_get_vadjustment(scrolled_window:PGtkScrolledWindow):PGtkAdjustment; name 'gtk_scrolled_window_get_vadjustment';
procedure gtk_scrolled_window_set_policy(scrolled_window:PGtkScrolledWindow; hscrollbar_policy:TGtkPolicyType; vscrollbar_policy:TGtkPolicyType); name 'gtk_scrolled_window_set_policy';
procedure gtk_scrolled_window_set_placement(scrolled_window:PGtkScrolledWindow; window_placement:TGtkCornerType); name 'gtk_scrolled_window_set_placement';
procedure gtk_scrolled_window_add_with_viewport(scrolled_window:PGtkScrolledWindow; child:PGtkWidget); name 'gtk_scrolled_window_add_with_viewport';
function  GTK_RADIO_MENU_ITEM_TYPE:TGtkType; name 'gtk_radio_menu_item_get_type';

function  gtk_radio_menu_item_get_type:TGtkType; name 'gtk_radio_menu_item_get_type';
function  gtk_radio_menu_item_new(group:PGSList):PGtkWidget; name 'gtk_radio_menu_item_new';
function  gtk_radio_menu_item_new_with_label(group:PGSList; thelabel:Pgchar):PGtkWidget; name 'gtk_radio_menu_item_new_with_label';
function  gtk_radio_menu_item_group(radio_menu_item:PGtkRadioMenuItem):PGSList; name 'gtk_radio_menu_item_group';
procedure gtk_radio_menu_item_set_group(radio_menu_item:PGtkRadioMenuItem; group:PGSList); name 'gtk_radio_menu_item_set_group';
function  GTK_RADIO_BUTTON_TYPE:TGtkType; name 'gtk_radio_button_get_type';

function  gtk_radio_button_get_type:TGtkType; name 'gtk_radio_button_get_type';
function  gtk_radio_button_new(group:PGSList):PGtkWidget; name 'gtk_radio_button_new';
function  gtk_radio_button_new_from_widget(group:PGtkRadioButton):PGtkWidget; name 'gtk_radio_button_new_from_widget';
function  gtk_radio_button_new_with_label(group:PGSList; thelabel:Pgchar):PGtkWidget; name 'gtk_radio_button_new_with_label';
function  gtk_radio_button_new_with_label_from_widget(group:PGtkRadioButton; thelabel:Pgchar):PGtkWidget; name 'gtk_radio_button_new_with_label_from_widget';
function  gtk_radio_button_group(radio_button:PGtkRadioButton):PGSList; name 'gtk_radio_button_group';
procedure gtk_radio_button_set_group(radio_button:PGtkRadioButton; group:PGSList); name 'gtk_radio_button_set_group';
function  GTK_PROGRESS_BAR_TYPE:TGtkType; name 'gtk_progress_bar_get_type';

function  gtk_progress_bar_get_type:TGtkType; name 'gtk_progress_bar_get_type';
function  gtk_progress_bar_new:PGtkWidget; name 'gtk_progress_bar_new';
function  gtk_progress_bar_new_with_adjustment(adjustment:PGtkAdjustment):PGtkWidget; name 'gtk_progress_bar_new_with_adjustment';
procedure gtk_progress_bar_set_bar_style(pbar:PGtkProgressBar; style:TGtkProgressBarStyle); name 'gtk_progress_bar_set_bar_style';
procedure gtk_progress_bar_set_discrete_blocks(pbar:PGtkProgressBar; blocks:guint); name 'gtk_progress_bar_set_discrete_blocks';
procedure gtk_progress_bar_set_activity_step(pbar:PGtkProgressBar; pstep:guint); name 'gtk_progress_bar_set_activity_step';
procedure gtk_progress_bar_set_activity_blocks(pbar:PGtkProgressBar; blocks:guint); name 'gtk_progress_bar_set_activity_blocks';
procedure gtk_progress_bar_set_orientation(pbar:PGtkProgressBar; orientation:TGtkProgressBarOrientation); name 'gtk_progress_bar_set_orientation';
procedure gtk_progress_bar_update(pbar:PGtkProgressBar; percentage:gfloat); name 'gtk_progress_bar_update';
function  GTK_MENU_BAR_TYPE:TGtkType; name 'gtk_menu_bar_get_type';

function  gtk_menu_bar_get_type:TGtkType; name 'gtk_menu_bar_get_type';
function  gtk_menu_bar_new:PGtkWidget; name 'gtk_menu_bar_new';
procedure gtk_menu_bar_append(menu_bar:PGtkMenuBar; child:PGtkWidget); name 'gtk_menu_bar_append';
procedure gtk_menu_bar_prepend(menu_bar:PGtkMenuBar; child:PGtkWidget); name 'gtk_menu_bar_prepend';
procedure gtk_menu_bar_insert(menu_bar:PGtkMenuBar; child:PGtkWidget; position:gint); name 'gtk_menu_bar_insert';
procedure gtk_menu_bar_set_shadow_type(menu_bar:PGtkMenuBar; thetype:TGtkShadowType); name 'gtk_menu_bar_set_shadow_type';
 
 
 
 
procedure gtk_drag_get_data(widget:PGtkWidget; context:PGdkDragContext; target:TGdkAtom; time:guint32); name 'gtk_drag_get_data';
procedure gtk_drag_finish(context:PGdkDragContext; success:gboolean; del:gboolean; time:guint32); name 'gtk_drag_finish';
function  gtk_drag_get_source_widget(context:PGdkDragContext):PGtkWidget; name 'gtk_drag_get_source_widget';
procedure gtk_drag_highlight(widget:PGtkWidget); name 'gtk_drag_highlight';
procedure gtk_drag_unhighlight(widget:PGtkWidget); name 'gtk_drag_unhighlight';
procedure gtk_drag_dest_set(widget:PGtkWidget; flags:TGtkDestDefaults; targets:PGtkTargetEntry; n_targets:gint; actions:TGdkDragAction); name 'gtk_drag_dest_set';
procedure gtk_drag_dest_set_proxy(widget:PGtkWidget; proxy_window:PGdkWindow; protocol:TGdkDragProtocol; use_coordinates:gboolean); name 'gtk_drag_dest_set_proxy';
procedure gtk_drag_dest_unset(widget:PGtkWidget); name 'gtk_drag_dest_unset';
procedure gtk_drag_source_set(widget:PGtkWidget; start_button_mask:TGdkModifierType; targets:PGtkTargetEntry; n_targets:gint; actions:TGdkDragAction); name 'gtk_drag_source_set';
procedure gtk_drag_source_unset(widget:PGtkWidget); name 'gtk_drag_source_unset';
procedure gtk_drag_source_set_icon(widget:PGtkWidget; colormap:PGdkColormap; pixmap:PGdkPixmap; mask:PGdkBitmap); name 'gtk_drag_source_set_icon';
function  gtk_drag_begin(widget:PGtkWidget; targets:PGtkTargetList; actions:TGdkDragAction; button:gint; event:PGdkEvent):PGdkDragContext; name 'gtk_drag_begin';
procedure gtk_drag_set_icon_widget(context:PGdkDragContext; widget:PGtkWidget; hot_x:gint; hot_y:gint); name 'gtk_drag_set_icon_widget';
procedure gtk_drag_set_icon_pixmap(context:PGdkDragContext; colormap:PGdkColormap; pixmap:PGdkPixmap; mask:PGdkBitmap; hot_x:gint; hot_y:gint); name 'gtk_drag_set_icon_pixmap';
procedure gtk_drag_set_icon_default(context:PGdkDragContext); name 'gtk_drag_set_icon_default';
procedure gtk_drag_set_default_icon(colormap:PGdkColormap; pixmap:PGdkPixmap; mask:PGdkBitmap; hot_x:gint; hot_y:gint); name 'gtk_drag_set_default_icon';
procedure gtk_drag_source_handle_event(widget:PGtkWidget; event:PGdkEvent); name 'gtk_drag_source_handle_event';
procedure gtk_drag_dest_handle_event(toplevel:PGtkWidget; event:PGdkEvent); name 'gtk_drag_dest_handle_event';
function  GTK_HBUTTON_BOX_TYPE:TGtkType; name 'gtk_hbutton_box_get_type';

function  gtk_hbutton_box_get_type:TGtkType; name 'gtk_hbutton_box_get_type';
function  gtk_hbutton_box_new :PGtkWidget; name 'gtk_hbutton_box_new';
function  gtk_hbutton_box_get_spacing_default:gint; name 'gtk_hbutton_box_get_spacing_default';
function  gtk_hbutton_box_get_layout_default:TGtkButtonBoxStyle; name 'gtk_hbutton_box_get_layout_default';
procedure gtk_hbutton_box_set_spacing_default(spacing:gint); name 'gtk_hbutton_box_set_spacing_default';
procedure gtk_hbutton_box_set_layout_default(layout:TGtkButtonBoxStyle); name 'gtk_hbutton_box_set_layout_default';
 


function  GTK_PROGRESS_TYPE:TGtkType; name 'gtk_progress_get_type';
function  gtk_progress_get_type:TGtkType; name 'gtk_progress_get_type';
procedure gtk_progress_set_show_text(progress:PGtkProgress; show_text:gint); name 'gtk_progress_set_show_text';
procedure gtk_progress_set_text_alignment(progress:PGtkProgress; x_align:gfloat; y_align:gfloat); name 'gtk_progress_set_text_alignment';
procedure gtk_progress_set_format_string(progress:PGtkProgress; format:Pgchar); name 'gtk_progress_set_format_string';
procedure gtk_progress_set_adjustment(progress:PGtkProgress; adjustment:PGtkAdjustment); name 'gtk_progress_set_adjustment';
procedure gtk_progress_configure(progress:PGtkProgress; _value:gfloat; min:gfloat; max:gfloat); name 'gtk_progress_configure';
procedure gtk_progress_set_percentage(progress:PGtkProgress; percentage:gfloat); name 'gtk_progress_set_percentage';
procedure gtk_progress_set_value(progress:PGtkProgress; _value:gfloat); name 'gtk_progress_set_value';
function  gtk_progress_get_value(progress:PGtkProgress):gfloat; name 'gtk_progress_get_value';
procedure gtk_progress_set_activity_mode(progress:PGtkProgress; activity_mode:guint); name 'gtk_progress_set_activity_mode';
function  gtk_progress_get_current_text(progress:PGtkProgress):Pgchar; name 'gtk_progress_get_current_text';
function  gtk_progress_get_text_from_value(progress:PGtkProgress; _value:gfloat):Pgchar; name 'gtk_progress_get_text_from_value';
function  gtk_progress_get_current_percentage(progress:PGtkProgress):gfloat; name 'gtk_progress_get_current_percentage';
function  gtk_progress_get_percentage_from_value(progress:PGtkProgress; _value:gfloat):gfloat; name 'gtk_progress_get_percentage_from_value';
function  GTK_ITEM_FACTORY_TYPE:TGtkType; name 'gtk_item_factory_get_type';
function  gtk_item_factory_get_type:TGtkType; name 'gtk_item_factory_get_type';
function  gtk_item_factory_new(container_type:TGtkType; path:Pgchar; accel_group:PGtkAccelGroup):PGtkItemFactory; name 'gtk_item_factory_new';
procedure gtk_item_factory_construct(ifactory:PGtkItemFactory; container_type:TGtkType; path:Pgchar; accel_group:PGtkAccelGroup); name 'gtk_item_factory_construct';
procedure gtk_item_factory_parse_rc(file_name:Pgchar); name 'gtk_item_factory_parse_rc';
procedure gtk_item_factory_parse_rc_string(rc_string:Pgchar); name 'gtk_item_factory_parse_rc_string';
procedure gtk_item_factory_parse_rc_scanner(scanner:PGScanner); name 'gtk_item_factory_parse_rc_scanner';
procedure gtk_item_factory_add_foreign(accel_widget:PGtkWidget; full_path:Pgchar; accel_group:PGtkAccelGroup; keyval:guint; modifiers:TGdkModifierType); name 'gtk_item_factory_add_foreign';
function  gtk_item_factory_from_widget(widget:PGtkWidget):PGtkItemFactory; name 'gtk_item_factory_from_widget';
function  gtk_item_factory_path_from_widget(widget:PGtkWidget):Pgchar; name 'gtk_item_factory_path_from_widget';
function  gtk_item_factory_get_item(ifactory:PGtkItemFactory; path:Pgchar):PGtkWidget; name 'gtk_item_factory_get_item';
function  gtk_item_factory_get_widget(ifactory:PGtkItemFactory; path:Pgchar):PGtkWidget; name 'gtk_item_factory_get_widget';
function  gtk_item_factory_get_widget_by_action(ifactory:PGtkItemFactory; action:guint):PGtkWidget; name 'gtk_item_factory_get_widget_by_action';
function  gtk_item_factory_get_item_by_action(ifactory:PGtkItemFactory; action:guint):PGtkWidget; name 'gtk_item_factory_get_item_by_action';
procedure gtk_item_factory_dump_items(path_pspec:PGtkPatternSpec; modified_only:gboolean; print_func:TGtkPrintFunc; func_data:gpointer); name 'gtk_item_factory_dump_items';
procedure gtk_item_factory_dump_rc(file_name:Pgchar; path_pspec:PGtkPatternSpec; modified_only:gboolean); name 'gtk_item_factory_dump_rc';
procedure gtk_item_factory_print_func(FILE_pointer:gpointer; thestring:Pgchar); name 'gtk_item_factory_print_func';
procedure gtk_item_factory_create_item(ifactory:PGtkItemFactory; entry:PGtkItemFactoryEntry; callback_data:gpointer; callback_type:guint); name 'gtk_item_factory_create_item';
procedure gtk_item_factory_create_items(ifactory:PGtkItemFactory; n_entries:guint; entries:PGtkItemFactoryEntry; callback_data:gpointer); name 'gtk_item_factory_create_items';
procedure gtk_item_factory_delete_item(ifactory:PGtkItemFactory; path:Pgchar); name 'gtk_item_factory_delete_item';
procedure gtk_item_factory_delete_entry(ifactory:PGtkItemFactory; entry:PGtkItemFactoryEntry); name 'gtk_item_factory_delete_entry';
procedure gtk_item_factory_delete_entries(ifactory:PGtkItemFactory; n_entries:guint; entries:PGtkItemFactoryEntry); name 'gtk_item_factory_delete_entries';
procedure gtk_item_factory_popup(ifactory:PGtkItemFactory; x:guint; y:guint; mouse_button:guint; time:guint32); name 'gtk_item_factory_popup';
procedure gtk_item_factory_popup_with_data(ifactory:PGtkItemFactory; popup_data:gpointer; destroy:TGtkDestroyNotify; x:guint; y:guint; mouse_button:guint; time:guint32); name 'gtk_item_factory_popup_with_data';
function  gtk_item_factory_popup_data(ifactory:PGtkItemFactory):gpointer; name 'gtk_item_factory_popup_data';
function  gtk_item_factory_popup_data_from_widget(widget:PGtkWidget):gpointer; name 'gtk_item_factory_popup_data_from_widget';
procedure gtk_item_factory_set_translate_func(ifactory:PGtkItemFactory; func:TGtkTranslateFunc; data:gpointer; notify:TGtkDestroyNotify); name 'gtk_item_factory_set_translate_func';
function  gtk_item_factory_from_path(path:Pgchar):PGtkItemFactory; name 'gtk_item_factory_from_path';
procedure gtk_item_factory_create_menu_entries(n_entries:guint; entries:PGtkMenuEntry); name 'gtk_item_factory_create_menu_entries';
procedure gtk_item_factories_path_delete(ifactory_path:Pgchar; path:Pgchar); name 'gtk_item_factories_path_delete';
procedure gtk_item_factory_create_items_ac(ifactory:PGtkItemFactory; n_entries:guint; entries:PGtkItemFactoryEntry; callback_data:gpointer; callback_type:guint); name 'gtk_item_factory_create_items_ac';
function  GTK_PREVIEW_TYPE:TGtkType; name 'gtk_preview_get_type';
function  gtk_preview_get_type:TGtkType; name 'gtk_preview_get_type';
procedure gtk_preview_uninit; name 'gtk_preview_uninit';
function  gtk_preview_new(thetype:TGtkPreviewType):PGtkWidget; name 'gtk_preview_new';
procedure gtk_preview_size(preview:PGtkPreview; width:gint; height:gint); name 'gtk_preview_size';
procedure gtk_preview_put(preview:PGtkPreview; window:PGdkWindow; gc:PGdkGC; srcx:gint; srcy:gint;destx:gint; desty:gint; width:gint; height:gint); name 'gtk_preview_put';
procedure gtk_preview_draw_row(preview:PGtkPreview; data:Pguchar; x:gint; y:gint; w:gint); name 'gtk_preview_draw_row';
procedure gtk_preview_set_expand(preview:PGtkPreview; expand:gint); name 'gtk_preview_set_expand';
procedure gtk_preview_set_gamma(gamma:double); name 'gtk_preview_set_gamma';
procedure gtk_preview_set_color_cube(nred_shades:guint; ngreen_shades:guint; nblue_shades:guint; ngray_shades:guint); name 'gtk_preview_set_color_cube';
procedure gtk_preview_set_install_cmap(install_cmap:gint); name 'gtk_preview_set_install_cmap';
procedure gtk_preview_set_reserved(nreserved:gint); name 'gtk_preview_set_reserved';
procedure gtk_preview_set_dither(preview:PGtkPreview; dither:TGdkRgbDither); name 'gtk_preview_set_dither';
function  gtk_preview_get_visual:PGdkVisual; name 'gtk_preview_get_visual';
function  gtk_preview_get_cmap:PGdkColormap; name 'gtk_preview_get_cmap';
function  gtk_preview_get_info:PGtkPreviewInfo; name 'gtk_preview_get_info';
procedure gtk_preview_reset; name 'gtk_preview_reset';
function  GTK_OPTION_MENU_TYPE:TGtkType; name 'gtk_option_menu_get_type';
function  gtk_option_menu_get_type:TGtkType; name 'gtk_option_menu_get_type';
function  gtk_option_menu_new:PGtkWidget; name 'gtk_option_menu_new';
function  gtk_option_menu_get_menu(option_menu:PGtkOptionMenu):PGtkWidget; name 'gtk_option_menu_get_menu';
procedure gtk_option_menu_set_menu(option_menu:PGtkOptionMenu; menu:PGtkWidget); name 'gtk_option_menu_set_menu';
procedure gtk_option_menu_remove_menu(option_menu:PGtkOptionMenu); name 'gtk_option_menu_remove_menu';
procedure gtk_option_menu_set_history(option_menu:PGtkOptionMenu; index:guint); name 'gtk_option_menu_set_history';
function  GTK_MENU_TYPE:TGtkType; name 'gtk_menu_get_type';

function  GTK_MENU_SHELL_TYPE:TGtkType; name 'gtk_menu_shell_get_type';
function  gtk_menu_shell_get_type:TGtkType; name 'gtk_menu_shell_get_type';
procedure gtk_menu_shell_append(menu_shell:PGtkMenuShell; child:PGtkWidget); name 'gtk_menu_shell_append';
procedure gtk_menu_shell_prepend(menu_shell:PGtkMenuShell; child:PGtkWidget); name 'gtk_menu_shell_prepend';
procedure gtk_menu_shell_insert(menu_shell:PGtkMenuShell; child:PGtkWidget; position:gint); name 'gtk_menu_shell_insert';
procedure gtk_menu_shell_deactivate(menu_shell:PGtkMenuShell); name 'gtk_menu_shell_deactivate';
procedure gtk_menu_shell_select_item(menu_shell:PGtkMenuShell; menu_item:PGtkWidget); name 'gtk_menu_shell_select_item';
procedure gtk_menu_shell_deselect(menu_shell:PGtkMenuShell); name 'gtk_menu_shell_deselect';
procedure gtk_menu_shell_activate_item(menu_shell:PGtkMenuShell; menu_item:PGtkWidget; force_deactivate:gboolean); name 'gtk_menu_shell_activate_item';

function  gtk_menu_factory_new(thetype:TGtkMenuFactoryType):PGtkMenuFactory; name 'gtk_menu_factory_new';
procedure gtk_menu_factory_destroy(factory:PGtkMenuFactory); name 'gtk_menu_factory_destroy';
procedure gtk_menu_factory_add_entries(factory:PGtkMenuFactory; entries:PGtkMenuEntry; nentries:longint); name 'gtk_menu_factory_add_entries';
procedure gtk_menu_factory_add_subfactory(factory:PGtkMenuFactory; subfactory:PGtkMenuFactory; path:pchar); name 'gtk_menu_factory_add_subfactory';
procedure gtk_menu_factory_remove_paths(factory:PGtkMenuFactory; paths:PPgchar; npaths:longint); name 'gtk_menu_factory_remove_paths';
procedure gtk_menu_factory_remove_entries(factory:PGtkMenuFactory; entries:PGtkMenuEntry; nentries:longint); name 'gtk_menu_factory_remove_entries';
procedure gtk_menu_factory_remove_subfactory(factory:PGtkMenuFactory; subfactory:PGtkMenuFactory; path:pchar); name 'gtk_menu_factory_remove_subfactory';
function  gtk_menu_factory_find(factory:PGtkMenuFactory; path:Pgchar):PGtkMenuPath; name 'gtk_menu_factory_find';


function  gtk_menu_get_type:TGtkType; name 'gtk_menu_get_type';
function  gtk_menu_new:PGtkWidget; name 'gtk_menu_new';
procedure gtk_menu_append(menu:PGtkMenu; child:PGtkWidget); name 'gtk_menu_append';
procedure gtk_menu_prepend(menu:PGtkMenu; child:PGtkWidget); name 'gtk_menu_prepend';
procedure gtk_menu_insert(menu:PGtkMenu; child:PGtkWidget; position:gint); name 'gtk_menu_insert';
procedure gtk_menu_popup(menu:PGtkMenu; parent_menu_shell:PGtkWidget; parent_menu_item:PGtkWidget; func:TGtkMenuPositionFunc; data:gpointer;button:guint; activate_time:guint32); name 'gtk_menu_popup';
procedure gtk_menu_reposition(menu:PGtkMenu); name 'gtk_menu_reposition';
procedure gtk_menu_popdown(menu:PGtkMenu); name 'gtk_menu_popdown';
function  gtk_menu_get_active(menu:PGtkMenu):PGtkWidget; name 'gtk_menu_get_active';
procedure gtk_menu_set_active(menu:PGtkMenu; index:guint); name 'gtk_menu_set_active';
procedure gtk_menu_set_accel_group(menu:PGtkMenu; accel_group:PGtkAccelGroup); name 'gtk_menu_set_accel_group';
function  gtk_menu_get_accel_group(menu:PGtkMenu):PGtkAccelGroup; name 'gtk_menu_get_accel_group';
function  gtk_menu_get_uline_accel_group(menu:PGtkMenu):PGtkAccelGroup; name 'gtk_menu_get_uline_accel_group';
function  gtk_menu_ensure_uline_accel_group(menu:PGtkMenu):PGtkAccelGroup; name 'gtk_menu_ensure_uline_accel_group';
procedure gtk_menu_attach_to_widget(menu:PGtkMenu; attach_widget:PGtkWidget; detacher:TGtkMenuDetachFunc); name 'gtk_menu_attach_to_widget';
function  gtk_menu_get_attach_widget(menu:PGtkMenu):PGtkWidget; name 'gtk_menu_get_attach_widget';
procedure gtk_menu_detach(menu:PGtkMenu); name 'gtk_menu_detach';
procedure gtk_menu_set_tearoff_state(menu:PGtkMenu; torn_off:gboolean); name 'gtk_menu_set_tearoff_state';
procedure gtk_menu_set_title(menu:PGtkMenu; title:Pgchar); name 'gtk_menu_set_title';
procedure gtk_menu_reorder_child(menu:PGtkMenu; child:PGtkWidget; position:gint); name 'gtk_menu_reorder_child';

function  GTK_LIST_ITEM_TYPE:TGtkType; name 'gtk_list_item_get_type';

function  GTK_LIST_TYPE:TGtkType; name 'gtk_list_get_type';

function  GTK_INPUT_DIALOG_TYPE:TGtkType; name 'gtk_input_dialog_get_type';

function  GTK_IMAGE_TYPE:TGtkType; name 'gtk_image_get_type';
function  gtk_image_get_type:TGtkType; name 'gtk_image_get_type';
function  gtk_image_new(val:PGdkImage; mask:PGdkBitmap):PGtkWidget; name 'gtk_image_new';
procedure gtk_image_set(image:PGtkImage; val:PGdkImage; mask:PGdkBitmap); name 'gtk_image_set';
procedure gtk_image_get(image:PGtkImage; val:PPGdkImage; mask:PPGdkBitmap); name 'gtk_image_get';
 
function  GTK_HANDLE_BOX_TYPE:TGtkType; name 'gtk_handle_box_get_type';
function  gtk_handle_box_get_type:TGtkType; name 'gtk_handle_box_get_type';
function  gtk_handle_box_new : PGtkWidget; name 'gtk_handle_box_new';
procedure gtk_handle_box_set_shadow_type(handle_box:PGtkHandleBox; thetype:TGtkShadowType); name 'gtk_handle_box_set_shadow_type';
procedure gtk_handle_box_set_handle_position(handle_box:PGtkHandleBox; position:TGtkPositionType); name 'gtk_handle_box_set_handle_position';
procedure gtk_handle_box_set_snap_edge(handle_box:PGtkHandleBox; edge:TGtkPositionType); name 'gtk_handle_box_set_snap_edge';
function  GTK_FIXED_TYPE:TGtkType; name 'gtk_fixed_get_type';
function  gtk_fixed_get_type:TGtkType; name 'gtk_fixed_get_type';
function  gtk_fixed_new : PGtkWidget; name 'gtk_fixed_new';
procedure gtk_fixed_put(fixed:PGtkFixed; widget:PGtkWidget; x:gint16; y:gint16); name 'gtk_fixed_put';
procedure gtk_fixed_move(fixed:PGtkFixed; widget:PGtkWidget; x:gint16; y:gint16); name 'gtk_fixed_move';
function  GTK_FILE_SELECTION_TYPE:TGtkType; name 'gtk_file_selection_get_type';
function  gtk_file_selection_get_type:TGtkType; name 'gtk_file_selection_get_type';
function  gtk_file_selection_new (title:Pgchar):PGtkWidget; name 'gtk_file_selection_new';
procedure gtk_file_selection_set_filename(filesel:PGtkFileSelection; filename:Pgchar); name 'gtk_file_selection_set_filename';
function  gtk_file_selection_get_filename (filesel:PGtkFileSelection):Pgchar; name 'gtk_file_selection_get_filename';
procedure gtk_file_selection_complete(filesel:PGtkFileSelection; pattern:Pgchar); name 'gtk_file_selection_complete';
procedure gtk_file_selection_show_fileop_buttons(filesel:PGtkFileSelection); name 'gtk_file_selection_show_fileop_buttons';
procedure gtk_file_selection_hide_fileop_buttons(filesel:PGtkFileSelection); name 'gtk_file_selection_hide_fileop_buttons';
function  GTK_EVENT_BOX_TYPE:TGtkType; name 'gtk_event_box_get_type';
function  gtk_event_box_get_type:TGtkType; name 'gtk_event_box_get_type';
function  gtk_event_box_new : PGtkWidget; name 'gtk_event_box_new';
function  GTK_ENTRY_TYPE:TGtkType; name 'gtk_entry_get_type';

function  GTK_CURVE_TYPE:TGtkType; name 'gtk_curve_get_type';
function  gtk_curve_get_type:TGtkType; name 'gtk_curve_get_type';
function  gtk_curve_new : PGtkWidget; name 'gtk_curve_new';
procedure gtk_curve_reset(curve:PGtkCurve); name 'gtk_curve_reset';
procedure gtk_curve_set_gamma(curve:PGtkCurve; gamma:gfloat); name 'gtk_curve_set_gamma';
procedure gtk_curve_set_range(curve:PGtkCurve; min_x:gfloat; max_x:gfloat; min_y:gfloat; max_y:gfloat); name 'gtk_curve_set_range';
procedure gtk_curve_get_vector(curve:PGtkCurve; veclen:longint; vector:Pgfloat); name 'gtk_curve_get_vector';
procedure gtk_curve_set_vector(curve:PGtkCurve; veclen:longint; vector:Pgfloat); name 'gtk_curve_set_vector';
procedure gtk_curve_set_curve_type(curve:PGtkCurve; thetype:TGtkCurveType); name 'gtk_curve_set_curve_type';
function  GTK_TEAROFF_MENU_ITEM_TYPE:TGtkType; name 'gtk_tearoff_menu_item_get_type';
function  gtk_tearoff_menu_item_get_type:TGtkType; name 'gtk_tearoff_menu_item_get_type';
function  gtk_tearoff_menu_item_new:PGtkWidget; name 'gtk_tearoff_menu_item_new';
function  GTK_CHECK_MENU_ITEM_TYPE:TGtkType; name 'gtk_check_menu_item_get_type';
function  gtk_check_menu_item_get_type:TGtkType; name 'gtk_check_menu_item_get_type';
function  gtk_check_menu_item_new : PGtkWidget; name 'gtk_check_menu_item_new'; 
function  gtk_check_menu_item_new_with_label (thelabel:Pgchar):PGtkWidget; name 'gtk_check_menu_item_new_with_label'; 
procedure gtk_check_menu_item_set_active(check_menu_item:PGtkCheckMenuItem; is_active:gboolean); name 'gtk_check_menu_item_set_active';
procedure gtk_check_menu_item_set_show_toggle(menu_item:PGtkCheckMenuItem; always:gboolean); name 'gtk_check_menu_item_set_show_toggle';
procedure gtk_check_menu_item_toggled(check_menu_item:PGtkCheckMenuItem); name 'gtk_check_menu_item_toggled';
function  GTK_MENU_ITEM_TYPE:TGtkType; name 'gtk_menu_item_get_type';

function  GTK_CHECK_BUTTON_TYPE:TGtkType; name 'gtk_check_button_get_type';

function  gtk_check_button_get_type:TGtkType; name 'gtk_check_button_get_type';
function  gtk_check_button_new : PGtkWidget; name 'gtk_check_button_new';
function  gtk_check_button_new_with_label (thelabel:Pgchar):PGtkWidget; name 'gtk_check_button_new_with_label';

function  gtk_menu_item_get_type:TGtkType; name 'gtk_menu_item_get_type';
function  gtk_menu_item_new : PGtkWidget; name 'gtk_menu_item_new';
function  gtk_menu_item_new_with_label (thelabel:Pgchar):PGtkWidget; name 'gtk_menu_item_new_with_label';
procedure gtk_menu_item_set_submenu(menu_item:PGtkMenuItem; submenu:PGtkWidget); name 'gtk_menu_item_set_submenu';
procedure gtk_menu_item_remove_submenu(menu_item:PGtkMenuItem); name 'gtk_menu_item_remove_submenu';
procedure gtk_menu_item_set_placement(menu_item:PGtkMenuItem; placement:TGtkSubmenuPlacement); name 'gtk_menu_item_set_placement';
procedure gtk_menu_item_configure(menu_item:PGtkMenuItem; show_toggle_indicator:gint; show_submenu_indicator:gint); name 'gtk_menu_item_configure';
procedure gtk_menu_item_select(menu_item:PGtkMenuItem); name 'gtk_menu_item_select';
procedure gtk_menu_item_deselect(menu_item:PGtkMenuItem); name 'gtk_menu_item_deselect';
procedure gtk_menu_item_activate(menu_item:PGtkMenuItem); name 'gtk_menu_item_activate';
procedure gtk_menu_item_right_justify(menu_item:PGtkMenuItem); name 'gtk_menu_item_right_justify';
function  GTK_DIALOG_TYPE:TGtkType; name 'gtk_dialog_get_type';
function  gtk_dialog_get_type:TGtkType; name 'gtk_dialog_get_type';
function  gtk_dialog_new : PGtkWidget; name 'gtk_dialog_new';

function  gtk_entry_get_type:TGtkType; name 'gtk_entry_get_type';
function  gtk_entry_new :PGtkWidget; name 'gtk_entry_new';
function  gtk_entry_new_with_max_length (max:guint16):PGtkWidget; name 'gtk_entry_new_with_max_length';
procedure gtk_entry_set_text(entry:PGtkEntry; text:Pgchar); name 'gtk_entry_set_text';
procedure gtk_entry_append_text(entry:PGtkEntry; text:Pgchar); name 'gtk_entry_append_text';
procedure gtk_entry_prepend_text(entry:PGtkEntry; text:Pgchar); name 'gtk_entry_prepend_text';
procedure gtk_entry_set_position(entry:PGtkEntry; position:gint); name 'gtk_entry_set_position';
function  gtk_entry_get_text (entry:PGtkEntry):Pgchar; name 'gtk_entry_get_text';
procedure gtk_entry_select_region(entry:PGtkEntry; start:gint; theend:gint); name 'gtk_entry_select_region';
procedure gtk_entry_set_visibility(entry:PGtkEntry; visible:gboolean); name 'gtk_entry_set_visibility';
procedure gtk_entry_set_editable(entry:PGtkEntry; editable:gboolean); name 'gtk_entry_set_editable';
procedure gtk_entry_set_max_length(entry:PGtkEntry; max:guint16); name 'gtk_entry_set_max_length';
 
 
 
 
function  gtk_gc_get (depth:gint; colormap:PGdkColormap; values:PGdkGCValues; values_mask:TGdkGCValuesMask): PGdkGC; name 'gtk_gc_get';
procedure gtk_gc_release(gc:PGdkGC); name 'gtk_gc_release';

function  gtk_input_dialog_get_type:TGtkType; name 'gtk_input_dialog_get_type';
function  gtk_input_dialog_new:PGtkWidget; name 'gtk_input_dialog_new';

function  gtk_list_get_type:TGtkType; name 'gtk_list_get_type';
function  gtk_list_new:PGtkWidget; name 'gtk_list_new';
procedure gtk_list_insert_items(list:PGtkList; items:PGList; position:gint); name 'gtk_list_insert_items';
procedure gtk_list_append_items(list:PGtkList; items:PGList); name 'gtk_list_append_items';
procedure gtk_list_prepend_items(list:PGtkList; items:PGList); name 'gtk_list_prepend_items';
procedure gtk_list_remove_items(list:PGtkList; items:PGList); name 'gtk_list_remove_items';
procedure gtk_list_remove_items_no_unref(list:PGtkList; items:PGList); name 'gtk_list_remove_items_no_unref';
procedure gtk_list_clear_items(list:PGtkList; start:gint; theend:gint); name 'gtk_list_clear_items';
procedure gtk_list_select_item(list:PGtkList; item:gint); name 'gtk_list_select_item';
procedure gtk_list_unselect_item(list:PGtkList; item:gint); name 'gtk_list_unselect_item';
procedure gtk_list_select_child(list:PGtkList; child:PGtkWidget); name 'gtk_list_select_child';
procedure gtk_list_unselect_child(list:PGtkList; child:PGtkWidget); name 'gtk_list_unselect_child';
function  gtk_list_child_position(list:PGtkList; child:PGtkWidget):gint; name 'gtk_list_child_position';
procedure gtk_list_set_selection_mode(list:PGtkList; mode:TGtkSelectionMode); name 'gtk_list_set_selection_mode';
procedure gtk_list_extend_selection(list:PGtkList; scroll_type:TGtkScrollType; position:gfloat; auto_start_selection:gboolean); name 'gtk_list_extend_selection';
procedure gtk_list_start_selection(list:PGtkList); name 'gtk_list_start_selection';
procedure gtk_list_end_selection(list:PGtkList); name 'gtk_list_end_selection';
procedure gtk_list_select_all(list:PGtkList); name 'gtk_list_select_all';
procedure gtk_list_unselect_all(list:PGtkList); name 'gtk_list_unselect_all';
procedure gtk_list_scroll_horizontal(list:PGtkList; scroll_type:TGtkScrollType; position:gfloat); name 'gtk_list_scroll_horizontal';
procedure gtk_list_scroll_vertical(list:PGtkList; scroll_type:TGtkScrollType; position:gfloat); name 'gtk_list_scroll_vertical';
procedure gtk_list_toggle_add_mode(list:PGtkList); name 'gtk_list_toggle_add_mode';
procedure gtk_list_toggle_focus_row(list:PGtkList); name 'gtk_list_toggle_focus_row';
procedure gtk_list_toggle_row(list:PGtkList; item:PGtkWidget); name 'gtk_list_toggle_row';
procedure gtk_list_undo_selection(list:PGtkList); name 'gtk_list_undo_selection';
procedure gtk_list_end_drag_selection(list:PGtkList); name 'gtk_list_end_drag_selection';

function  gtk_list_item_get_type:TGtkType; name 'gtk_list_item_get_type';
function  gtk_list_item_new:PGtkWidget; name 'gtk_list_item_new';
function  gtk_list_item_new_with_label(thelabel:Pgchar):PGtkWidget; name 'gtk_list_item_new_with_label';
procedure gtk_list_item_select(list_item:PGtkListItem); name 'gtk_list_item_select';
procedure gtk_list_item_deselect(list_item:PGtkListItem); name 'gtk_list_item_deselect';
 
 

function  GTK_TOGGLE_BUTTON_TYPE:TGtkType; name 'gtk_toggle_button_get_type';
function  gtk_toggle_button_get_type:TGtkType; name 'gtk_toggle_button_get_type';
function  gtk_toggle_button_new : PGtkWidget; name 'gtk_toggle_button_new';
function  gtk_toggle_button_new_with_label (thelabel:Pgchar):PGtkWidget; name 'gtk_toggle_button_new_with_label';
procedure gtk_toggle_button_set_mode(toggle_button:PGtkToggleButton; draw_indicator:gint); name 'gtk_toggle_button_set_mode';
procedure gtk_toggle_button_set_active(toggle_button:PGtkToggleButton; is_active:gboolean); name 'gtk_toggle_button_set_active';
function  gtk_toggle_button_get_active(toggle_button:PGtkToggleButton):gboolean; name 'gtk_toggle_button_get_active';
procedure gtk_toggle_button_toggled(toggle_button:PGtkToggleButton); name 'gtk_toggle_button_toggled';
function  GTK_BUTTON_TYPE:TGtkType; name 'gtk_button_get_type';

function  gtk_button_get_type:TGtkType; name 'gtk_button_get_type';
function  gtk_button_new : PGtkWidget; name 'gtk_button_new';
function  gtk_button_new_with_label (thelabel:Pgchar):PGtkWidget; name 'gtk_button_new_with_label';
procedure gtk_button_pressed(button:PGtkButton); name 'gtk_button_pressed';
procedure gtk_button_released(button:PGtkButton); name 'gtk_button_released';
procedure gtk_button_clicked(button:PGtkButton); name 'gtk_button_clicked';
procedure gtk_button_enter(button:PGtkButton); name 'gtk_button_enter';
procedure gtk_button_leave(button:PGtkButton); name 'gtk_button_leave';
procedure gtk_button_set_relief(button:PGtkButton; newstyle:TGtkReliefStyle); name 'gtk_button_set_relief';
function  gtk_button_get_relief(button:PGtkButton):TGtkReliefStyle; name 'gtk_button_get_relief';
function  GTK_PIXMAP_TYPE:TGtkType; name 'gtk_pixmap_get_type';

function  gtk_pixmap_get_type:TGtkType; name 'gtk_pixmap_get_type';
function  gtk_pixmap_new(pixmap:PGdkPixmap; mask:PGdkBitmap):PGtkWidget; name 'gtk_pixmap_new';
procedure gtk_pixmap_set(pixmap:PGtkPixmap; val:PGdkPixmap; mask:PGdkBitmap); name 'gtk_pixmap_set';
procedure gtk_pixmap_get(pixmap:PGtkPixmap; val:PPGdkPixmap; mask:PPGdkBitmap); name 'gtk_pixmap_get';
procedure gtk_pixmap_set_build_insensitive(pixmap:PGtkPixmap; build:guint); name 'gtk_pixmap_set_build_insensitive';
function  GTK_TEXT_TYPE:TGtkType; name 'gtk_text_get_type';
function  gtk_text_get_type:TGtkType; name 'gtk_text_get_type';
function  gtk_text_new(hadj:PGtkAdjustment; vadj:PGtkAdjustment):PGtkWidget; name 'gtk_text_new';
procedure gtk_text_set_editable(text:PGtkText; editable:gboolean); name 'gtk_text_set_editable';
procedure gtk_text_set_word_wrap(text:PGtkText; word_wrap:gint); name 'gtk_text_set_word_wrap';
procedure gtk_text_set_line_wrap(text:PGtkText; line_wrap:gint); name 'gtk_text_set_line_wrap';
procedure gtk_text_set_adjustments(text:PGtkText; hadj:PGtkAdjustment; vadj:PGtkAdjustment); name 'gtk_text_set_adjustments';
procedure gtk_text_set_point(text:PGtkText; index:guint); name 'gtk_text_set_point';
function  gtk_text_get_point(text:PGtkText):guint; name 'gtk_text_get_point';
function  gtk_text_get_length(text:PGtkText):guint; name 'gtk_text_get_length';
procedure gtk_text_freeze(text:PGtkText); name 'gtk_text_freeze';
procedure gtk_text_thaw(text:PGtkText); name 'gtk_text_thaw';
procedure gtk_text_insert(text:PGtkText; font:PGdkFont; fore:PGdkColor; back:PGdkColor; chars:pchar; length:gint); name 'gtk_text_insert';
function  gtk_text_backward_delete(text:PGtkText; nchars:guint):gint; name 'gtk_text_backward_delete';
function  gtk_text_forward_delete(text:PGtkText; nchars:guint):gint; name 'gtk_text_forward_delete';
function  GTK_EDITABLE_TYPE:TGtkType; name 'gtk_editable_get_type';

function  gtk_rc_parse_color(scanner:PGScanner; color:PGdkColor):guint; name 'gtk_rc_parse_color';
function  gtk_rc_parse_state(scanner:PGScanner; state:PGtkStateType):guint; name 'gtk_rc_parse_state';
function  gtk_rc_parse_priority(scanner:PGScanner; priority:PGtkPathPriorityType):guint; name 'gtk_rc_parse_priority';
function  GTK_RANGE_TYPE:TGtkType; name 'gtk_range_get_type';

function  gtk_range_get_type:TGtkType; name 'gtk_range_get_type';
function  gtk_range_get_adjustment (range:PGtkRange):PGtkAdjustment; name 'gtk_range_get_adjustment';
procedure gtk_range_set_update_policy(range:PGtkRange; policy:TGtkUpdateType); name 'gtk_range_set_update_policy';
procedure gtk_range_set_adjustment(range:PGtkRange; adjustment:PGtkAdjustment); name 'gtk_range_set_adjustment';
procedure gtk_range_draw_background(range:PGtkRange); name 'gtk_range_draw_background';
procedure gtk_range_clear_background(range:PGtkRange); name 'gtk_range_clear_background';
procedure gtk_range_draw_trough(range:PGtkRange); name 'gtk_range_draw_trough';
procedure gtk_range_draw_slider(range:PGtkRange); name 'gtk_range_draw_slider';
procedure gtk_range_draw_step_forw(range:PGtkRange); name 'gtk_range_draw_step_forw';
procedure gtk_range_draw_step_back(range:PGtkRange); name 'gtk_range_draw_step_back';
procedure gtk_range_slider_update(range:PGtkRange); name 'gtk_range_slider_update';
function  gtk_range_trough_click(range:PGtkRange; x:gint; y:gint; jump_perc:Pgfloat):gint; name 'gtk_range_trough_click';
procedure gtk_range_default_hslider_update(range:PGtkRange); name 'gtk_range_default_hslider_update';
procedure gtk_range_default_vslider_update(range:PGtkRange); name 'gtk_range_default_vslider_update';
function  gtk_range_default_htrough_click(range:PGtkRange; x:gint; y:gint; jump_perc:Pgfloat):gint; name 'gtk_range_default_htrough_click';
function  gtk_range_default_vtrough_click(range:PGtkRange; x:gint; y:gint; jump_perc:Pgfloat):gint; name 'gtk_range_default_vtrough_click';
procedure gtk_range_default_hmotion(range:PGtkRange; xdelta:gint; ydelta:gint); name 'gtk_range_default_hmotion';
procedure gtk_range_default_vmotion(range:PGtkRange; xdelta:gint; ydelta:gint); name 'gtk_range_default_vmotion';
function  GTK_VIEWPORT_TYPE:TGtkType; name 'gtk_viewport_get_type';

function  gtk_viewport_get_type:TGtkType; name 'gtk_viewport_get_type';
function  gtk_viewport_new(hadjustment:PGtkAdjustment; vadjustment:PGtkAdjustment):PGtkWidget; name 'gtk_viewport_new';
function  gtk_viewport_get_hadjustment(viewport:PGtkViewport):PGtkAdjustment; name 'gtk_viewport_get_hadjustment';
function  gtk_viewport_get_vadjustment(viewport:PGtkViewport):PGtkAdjustment; name 'gtk_viewport_get_vadjustment';
procedure gtk_viewport_set_hadjustment(viewport:PGtkViewport; adjustment:PGtkAdjustment); name 'gtk_viewport_set_hadjustment';
procedure gtk_viewport_set_vadjustment(viewport:PGtkViewport; adjustment:PGtkAdjustment); name 'gtk_viewport_set_vadjustment';
procedure gtk_viewport_set_shadow_type(viewport:PGtkViewport; thetype:TGtkShadowType); name 'gtk_viewport_set_shadow_type';
function  GTK_ASPECT_FRAME_TYPE:TGtkType; name 'gtk_aspect_frame_get_type';
function  GTK_FRAME_TYPE:TGtkType; name 'gtk_frame_get_type';
function  gtk_frame_get_type:TGtkType; name 'gtk_frame_get_type';
function  gtk_frame_new (thelabel:Pgchar):PGtkWidget; name 'gtk_frame_new';
procedure gtk_frame_set_label(frame:PGtkFrame; thelabel:Pgchar); name 'gtk_frame_set_label';
procedure gtk_frame_set_label_align(frame:PGtkFrame; xalign:gfloat; yalign:gfloat); name 'gtk_frame_set_label_align';
procedure gtk_frame_set_shadow_type(frame:PGtkFrame; thetype:TGtkShadowType); name 'gtk_frame_set_shadow_type';
function  GTK_LAYOUT_TYPE:TGtkType; name 'gtk_layout_get_type';
function  GTK_PACKER_TYPE:TGtkType; name 'gtk_packer_get_type';
function  gtk_socket_new:PGtkWidget; name 'gtk_socket_new';
function  gtk_socket_get_type:guint; name 'gtk_socket_get_type';
procedure gtk_socket_steal(socket:PGtkSocket; wid:guint32); name 'gtk_socket_steal';
function  gtk_plug_get_type:guint; name 'gtk_plug_get_type';
procedure gtk_plug_construct(plug:PGtkPlug; socket_id:guint32); name 'gtk_plug_construct';
function  gtk_plug_new(socket_id:guint32):PGtkWidget; name 'gtk_plug_new';
function  GTK_WINDOW_TYPE:TGtkType; name 'gtk_window_get_type';
function  GTK_INVISIBLE_TYPE:TGtkType; name 'gtk_invisible_get_type';
function  gtk_invisible_get_type:TGtkType; name 'gtk_invisible_get_type';
function  gtk_invisible_new:PGtkWidget; name 'gtk_invisible_new';
function  gtk_window_get_type:TGtkType; name 'gtk_window_get_type';
function  gtk_window_new (thetype:TGtkWindowType):PGtkWidget; name 'gtk_window_new';
procedure gtk_window_set_title(window:PGtkWindow; title:Pgchar); name 'gtk_window_set_title';
procedure gtk_window_set_wmclass(window:PGtkWindow; wmclass_name:Pgchar; wmclass_class:Pgchar); name 'gtk_window_set_wmclass';
procedure gtk_window_set_policy(window:PGtkWindow; allow_shrink:gint; allow_grow:gint; auto_shrink:gint); name 'gtk_window_set_policy';
procedure gtk_window_add_accel_group(window:PGtkWindow; accel_group:PGtkAccelGroup); name 'gtk_window_add_accel_group';
procedure gtk_window_set_position(window:PGtkWindow; position:TGtkWindowPosition); name 'gtk_window_set_position';
function  gtk_window_activate_focus(window:PGtkWindow):gint; name 'gtk_window_activate_focus';
function  gtk_window_activate_default(window:PGtkWindow):gint; name 'gtk_window_activate_default';
procedure gtk_window_set_transient_for(window:PGtkWindow; parent:PGtkWindow); name 'gtk_window_set_transient_for';
procedure gtk_window_set_geometry_hints(window:PGtkWindow; geometry_widget:PGtkWidget; geometry:PGdkGeometry; geom_mask:TGdkWindowHints); name 'gtk_window_set_geometry_hints';
procedure gtk_window_set_default_size(window:PGtkWindow; width:gint; height:gint); name 'gtk_window_set_default_size';
procedure gtk_window_set_modal(window:PGtkWindow; modal:gboolean); name 'gtk_window_set_modal';
procedure gtk_window_set_focus(window:PGtkWindow; focus:PGtkWidget); name 'gtk_window_set_focus';
procedure gtk_window_set_default(window:PGtkWindow; defaultw:PGtkWidget); name 'gtk_window_set_default';
procedure gtk_window_remove_embedded_xid(window:PGtkWindow; xid:guint); name 'gtk_window_remove_embedded_xid';
procedure gtk_window_add_embedded_xid(window:PGtkWindow; xid:guint); name 'gtk_window_add_embedded_xid';

function  gtk_packer_get_type:TGtkType; name 'gtk_packer_get_type';
function  gtk_packer_new:PGtkWidget; name 'gtk_packer_new';
procedure gtk_packer_add_defaults(packer:PGtkPacker; child:PGtkWidget; side:TGtkSideType; anchor:TGtkAnchorType; options:TGtkPackerOptions); name 'gtk_packer_add_defaults';
procedure gtk_packer_add(packer:PGtkPacker; child:PGtkWidget; side:TGtkSideType; anchor:TGtkAnchorType; options:TGtkPackerOptions; border_width:guint; pad_x:guint; pad_y:guint; i_pad_x:guint; i_pad_y:guint); name 'gtk_packer_add';
procedure gtk_packer_set_child_packing(packer:PGtkPacker; child:PGtkWidget; side:TGtkSideType; anchor:TGtkAnchorType; options:TGtkPackerOptions; border_width:guint; pad_x:guint; pad_y:guint; i_pad_x:guint; i_pad_y:guint); name 'gtk_packer_set_child_packing';
procedure gtk_packer_reorder_child(packer:PGtkPacker; child:PGtkWidget; position:gint); name 'gtk_packer_reorder_child';
procedure gtk_packer_set_spacing(packer:PGtkPacker; spacing:guint); name 'gtk_packer_set_spacing';
procedure gtk_packer_set_default_border_width(packer:PGtkPacker; border:guint); name 'gtk_packer_set_default_border_width';
procedure gtk_packer_set_default_pad(packer:PGtkPacker; pad_x:guint; pad_y:guint); name 'gtk_packer_set_default_pad';
procedure gtk_packer_set_default_ipad(packer:PGtkPacker; i_pad_x:guint; i_pad_y:guint); name 'gtk_packer_set_default_ipad';

function  gtk_layout_get_type:TGtkType; name 'gtk_layout_get_type';
function  gtk_layout_new(hadjustment:PGtkAdjustment; vadjustment:PGtkAdjustment):PGtkWidget; name 'gtk_layout_new';
procedure gtk_layout_put(layout:PGtkLayout; widget:PGtkWidget; x:gint; y:gint); name 'gtk_layout_put';
procedure gtk_layout_move(layout:PGtkLayout; widget:PGtkWidget; x:gint; y:gint); name 'gtk_layout_move';
procedure gtk_layout_set_size(layout:PGtkLayout; width:guint; height:guint); name 'gtk_layout_set_size';
function  gtk_layout_get_hadjustment(layout:PGtkLayout):PGtkAdjustment; name 'gtk_layout_get_hadjustment';
function  gtk_layout_get_vadjustment(layout:PGtkLayout):PGtkAdjustment; name 'gtk_layout_get_vadjustment';
procedure gtk_layout_set_hadjustment(layout:PGtkLayout; adjustment:PGtkAdjustment); name 'gtk_layout_set_hadjustment';
procedure gtk_layout_set_vadjustment(layout:PGtkLayout; adjustment:PGtkAdjustment); name 'gtk_layout_set_vadjustment';
procedure gtk_layout_freeze(layout:PGtkLayout); name 'gtk_layout_freeze';
procedure gtk_layout_thaw(layout:PGtkLayout); name 'gtk_layout_thaw';

function  gtk_aspect_frame_get_type:TGtkType; name 'gtk_aspect_frame_get_type';
function  gtk_aspect_frame_new (thelabel:Pgchar; xalign:gfloat; yalign:gfloat; ratio:gfloat; obey_child:gint):PGtkWidget; name 'gtk_aspect_frame_new';
procedure gtk_aspect_frame_set(aspect_frame:PGtkAspectFrame; xalign:gfloat; yalign:gfloat; ratio:gfloat; obey_child:gint); name 'gtk_aspect_frame_set';
 
 
 
 
 
procedure gtk_rc_init; name 'gtk_rc_init';
procedure gtk_rc_add_default_file(filename:Pgchar); name 'gtk_rc_add_default_file';
procedure gtk_rc_set_default_files(filenames:PPgchar); name 'gtk_rc_set_default_files';
function  gtk_rc_get_default_files:PPgchar; name 'gtk_rc_get_default_files';
procedure gtk_rc_parse(filename:Pgchar); name 'gtk_rc_parse';
procedure gtk_rc_parse_string(rc_string:Pgchar); name 'gtk_rc_parse_string';
function  gtk_rc_get_style(widget:PGtkWidget):PGtkStyle; name 'gtk_rc_get_style';
procedure gtk_rc_add_widget_name_style(rc_style:PGtkRcStyle; pattern:Pgchar); name 'gtk_rc_add_widget_name_style';
procedure gtk_rc_add_widget_class_style(rc_style:PGtkRcStyle; pattern:Pgchar); name 'gtk_rc_add_widget_class_style';
procedure gtk_rc_add_class_style(rc_style:PGtkRcStyle; pattern:Pgchar); name 'gtk_rc_add_class_style';
function  gtk_rc_style_new:PGtkRcStyle; name 'gtk_rc_style_new';
procedure gtk_rc_style_ref(rc_style:PGtkRcStyle); name 'gtk_rc_style_ref';
procedure gtk_rc_style_unref(rc_style:PGtkRcStyle); name 'gtk_rc_style_unref';

procedure gtk_rc_set_image_loader(loader:TGtkImageLoader); name 'gtk_rc_set_image_loader';
function  gtk_rc_load_image(colormap:PGdkColormap; transparent_color:PGdkColor; filename:Pgchar):PGdkPixmap; name 'gtk_rc_load_image';
function  gtk_rc_find_pixmap_in_path(scanner:PGScanner; pixmap_file:Pgchar):Pgchar; name 'gtk_rc_find_pixmap_in_path';
function  gtk_rc_find_module_in_path(module_file:Pgchar):Pgchar; name 'gtk_rc_find_module_in_path';
function  gtk_rc_get_theme_dir:Pgchar; name 'gtk_rc_get_theme_dir';
function  gtk_rc_get_module_dir:Pgchar; name 'gtk_rc_get_module_dir';

function  gtk_editable_get_type:TGtkType; name 'gtk_editable_get_type';
procedure gtk_editable_select_region(editable:PGtkEditable; start:gint; theend:gint); name 'gtk_editable_select_region';
procedure gtk_editable_insert_text(editable:PGtkEditable; new_text:Pgchar; new_text_length:gint; position:Pgint); name 'gtk_editable_insert_text';
procedure gtk_editable_delete_text(editable:PGtkEditable; start_pos:gint; end_pos:gint); name 'gtk_editable_delete_text';
function  gtk_editable_get_chars (editable:PGtkEditable; start_pos:gint; end_pos:gint):Pgchar; name 'gtk_editable_get_chars';
procedure gtk_editable_cut_clipboard(editable:PGtkEditable); name 'gtk_editable_cut_clipboard';
procedure gtk_editable_copy_clipboard(editable:PGtkEditable); name 'gtk_editable_copy_clipboard';
procedure gtk_editable_paste_clipboard(editable:PGtkEditable); name 'gtk_editable_paste_clipboard';
procedure gtk_editable_claim_selection(editable:PGtkEditable; claim:gboolean; time:guint32); name 'gtk_editable_claim_selection';
procedure gtk_editable_delete_selection(editable:PGtkEditable); name 'gtk_editable_delete_selection';
procedure gtk_editable_changed(editable:PGtkEditable); name 'gtk_editable_changed';
procedure gtk_editable_set_position(editable:PGtkEditable; position:gint); name 'gtk_editable_set_position';
function  gtk_editable_get_position(editable:PGtkEditable):gint; name 'gtk_editable_get_position';
procedure gtk_editable_set_editable(editable:PGtkEditable; is_editable:gboolean); name 'gtk_editable_set_editable';
 
 
 
 
function  GTK_ARROW_TYPE:TGtkType; name 'gtk_arrow_get_type';
function  gtk_arrow_get_type:TGtkType; name 'gtk_arrow_get_type';
function  gtk_arrow_new (arrow_type:TGtkArrowType; shadow_type:TGtkShadowType):PGtkWidget; name 'gtk_arrow_new';
procedure gtk_arrow_set(arrow:PGtkArrow; arrow_type:TGtkArrowType; shadow_type:TGtkShadowType); name 'gtk_arrow_set';


function  GTK_ALIGNMENT_TYPE:TGtkType; name 'gtk_alignment_get_type';

function  GTK_BIN_TYPE:TGtkType; name 'gtk_bin_get_type';
function  gtk_bin_get_type:TGtkType; name 'gtk_bin_get_type';

function  gtk_signal_lookup(pname:Pgchar;object_type:TGtkType):guint; name 'gtk_signal_lookup';
function  gtk_signal_name(signal_id:guint):Pgchar; name 'gtk_signal_name';
function  gtk_signal_n_emissions(theobject:PGtkObject; signal_id:guint):guint; name 'gtk_signal_n_emissions';
function  gtk_signal_n_emissions_by_name(theobject:PGtkObject; pname:Pgchar):guint; name 'gtk_signal_n_emissions_by_name';
procedure gtk_signal_emit_stop(theobject:PGtkObject;signal_id:guint); name 'gtk_signal_emit_stop';
procedure gtk_signal_emit_stop_by_name(theobject:PGtkObject;pname:Pgchar); name 'gtk_signal_emit_stop_by_name';
function  gtk_signal_connect(theobject:PGtkObject;pname:Pgchar;func:TGtkSignalFunc;func_data:gpointer):guint; name 'gtk_signal_connect';
function  gtk_signal_connect_after(theobject:PGtkObject;pname:Pgchar;func:TGtkSignalFunc;func_data:gpointer):guint; name 'gtk_signal_connect_after';
function  gtk_signal_connect_object(theobject:PGtkObject;pname:Pgchar;func:TGtkSignalFunc;slot_theobject:PGtkObject):guint; name 'gtk_signal_connect_object';
function  gtk_signal_connect_object_after(theobject:PGtkObject;pname:Pgchar;func:TGtkSignalFunc;slot_theobject:PGtkObject):guint; name 'gtk_signal_connect_object_after';
function  gtk_signal_connect_full(theobject:PGtkObject;pname:Pgchar;func:TGtkSignalFunc;marshal:TGtkCallbackMarshal;data:gpointer;destroy_func:TGtkDestroyNotify;object_signal:gint;after:gint):guint; name 'gtk_signal_connect_full';
procedure gtk_signal_connect_object_while_alive(theobject:PGtkObject;signal:Pgchar;func:TGtkSignalFunc;alive_theobject:PGtkObject); name 'gtk_signal_connect_object_while_alive';
procedure gtk_signal_connect_while_alive(theobject:PGtkObject;signal:Pgchar;func:TGtkSignalFunc;func_data:gpointer;alive_theobject:PGtkObject); name 'gtk_signal_connect_while_alive';
procedure gtk_signal_disconnect(theobject:PGtkObject;handler_id:guint); name 'gtk_signal_disconnect';
procedure gtk_signal_disconnect_by_func(theobject:PGtkObject; func:TGtkSignalFunc; data:gpointer); name 'gtk_signal_disconnect_by_func';
procedure gtk_signal_disconnect_by_data(theobject:PGtkObject;data:gpointer); name 'gtk_signal_disconnect_by_data';
procedure gtk_signal_handler_block(theobject:PGtkObject;handler_id:guint); name 'gtk_signal_handler_block';
procedure gtk_signal_handler_block_by_func(theobject:PGtkObject; func:TGtkSignalFunc; data:gpointer); name 'gtk_signal_handler_block_by_func';
procedure gtk_signal_handler_block_by_data(theobject:PGtkObject;data:gpointer); name 'gtk_signal_handler_block_by_data';
procedure gtk_signal_handler_unblock(theobject:PGtkObject;handler_id:guint); name 'gtk_signal_handler_unblock';
procedure gtk_signal_handler_unblock_by_func(theobject:PGtkObject; func:TGtkSignalFunc; data:gpointer); name 'gtk_signal_handler_unblock_by_func';
procedure gtk_signal_handler_unblock_by_data(theobject:PGtkObject;data:gpointer); name 'gtk_signal_handler_unblock_by_data';
function  gtk_signal_handler_pending(theobject:PGtkObject;signal_id:guint;may_be_blocked:gboolean):guint; name 'gtk_signal_handler_pending';
function  gtk_signal_handler_pending_by_func(theobject:PGtkObject; signal_id:guint; may_be_blocked:gboolean; func:TGtkSignalFunc; data:gpointer):guint; name 'gtk_signal_handler_pending_by_func';
function  gtk_signal_handler_pending_by_id(theobject:PGtkObject; handler_id:guint; may_be_blocked:gboolean):gint; name 'gtk_signal_handler_pending_by_id';
function  gtk_signal_add_emission_hook(signal_id:guint; hook_func:TGtkEmissionHook; data:gpointer):guint; name 'gtk_signal_add_emission_hook';
function  gtk_signal_add_emission_hook_full(signal_id:guint; hook_func:TGtkEmissionHook; data:gpointer; destroy:TGDestroyNotify):guint; name 'gtk_signal_add_emission_hook_full';
procedure gtk_signal_remove_emission_hook(signal_id:guint; hook_id:guint); name 'gtk_signal_remove_emission_hook';
function  gtk_signal_query(signal_id:guint):PGtkSignalQuery; name 'gtk_signal_query';
procedure gtk_signal_init; name 'gtk_signal_init';
{function  gtk_signal_new(pname:Pgchar; signal_flags:TGtkSignalRunType; object_type:TGtkType; function_offset:guint; marshaller:TGtkSignalMarshaller; return_val:TGtkType; nparams:guint; args:array of const):guint; name 'gtk_signal_new';}
function  gtk_signal_new(pname:Pgchar; signal_flags:TGtkSignalRunType; object_type:TGtkType; function_offset:guint; marshaller:TGtkSignalMarshaller; return_val:TGtkType; nparams:guint):guint; name 'gtk_signal_new';
function  gtk_signal_newv(pname:Pgchar; signal_flags:TGtkSignalRunType; object_type:TGtkType; function_offset:guint; marshaller:TGtkSignalMarshaller; return_val:TGtkType; nparams:guint; params:PGtkType):guint; name 'gtk_signal_newv';
{rocedure gtk_signal_emit(theobject:PGtkObject; signal_id:guint; args:array of const); name 'gtk_signal_emit';}
procedure gtk_signal_emit(theobject:PGtkObject; signal_id:guint); name 'gtk_signal_emit';
{procedure gtk_signal_emit_by_name(theobject:PGtkObject; pname:Pgchar; args:array of const); name 'gtk_signal_emit_by_name';}
procedure gtk_signal_emit_by_name(theobject:PGtkObject; pname:Pgchar); name 'gtk_signal_emit_by_name';
procedure gtk_signal_emitv(theobject:PGtkObject; signal_id:guint; params:PGtkArg); name 'gtk_signal_emitv';
procedure gtk_signal_emitv_by_name(theobject:PGtkObject; pname:Pgchar; params:PGtkArg); name 'gtk_signal_emitv_by_name';
procedure gtk_signal_handlers_destroy(theobject:PGtkObject); name 'gtk_signal_handlers_destroy';
procedure gtk_signal_set_funcs(marshal_func:TGtkSignalMarshal;destroy_func:TGtkSignalDestroy); name 'gtk_signal_set_funcs';

function  GTK_ITEM_TYPE:TGtkType; name 'gtk_item_get_type';

function  gtk_item_get_type:TGtkType; name 'gtk_item_get_type';
procedure gtk_item_select(item:PGtkItem); name 'gtk_item_select';
procedure gtk_item_deselect(item:PGtkItem); name 'gtk_item_deselect';
procedure gtk_item_toggle(item:PGtkItem); name 'gtk_item_toggle';
 
 
 
 
 
function  gtk_arg_new(arg_type:TGtkType):PGtkArg; name 'gtk_arg_new';
function  gtk_arg_copy(src_arg:PGtkArg; dest_arg:PGtkArg):PGtkArg; name 'gtk_arg_copy';
procedure gtk_arg_free(arg:PGtkArg; free_contents:gboolean); name 'gtk_arg_free';
procedure gtk_arg_reset(arg:PGtkArg); name 'gtk_arg_reset';
function  gtk_arg_values_equal(arg1:PGtkArg; arg2:PGtkArg):gboolean; name 'gtk_arg_values_equal';
{function  gtk_args_collect(object_type:TGtkType; arg_info_hash_table:PGHashTable; arg_list_p:PPGSList; info_list_p:PPGSList; first_arg_name:Pgchar; var_args:array of const):Pgchar; name 'gtk_args_collect';}
procedure gtk_args_collect_cleanup(arg_list:PGSList; info_list:PGSList); name 'gtk_args_collect_cleanup';
function  gtk_arg_get_info(object_type:TGtkType; arg_info_hash_table:PGHashTable; arg_name:Pgchar; info_p:PPGtkArgInfo):Pgchar; name 'gtk_arg_get_info';
function  gtk_arg_type_new_static(base_class_type:TGtkType; arg_name:Pgchar; class_n_args_offset:guint; arg_info_hash_table:PGHashTable; arg_type:TGtkType; arg_flags:guint; arg_id:guint):PGtkArgInfo; name 'gtk_arg_type_new_static';
function  gtk_args_query(class_type:TGtkType; arg_info_hash_table:PGHashTable; arg_flags:PPguint32; n_args_p:Pguint):PGtkArg; name 'gtk_args_query';
function  gtk_arg_name_strip_type(arg_name:Pgchar):Pgchar; name 'gtk_arg_name_strip_type';
function  gtk_arg_info_equal(arg_info_1:gconstpointer; arg_info_2:gconstpointer):gint; name 'gtk_arg_info_equal';
function  gtk_arg_info_hash(arg_info:gconstpointer):guint; name 'gtk_arg_info_hash';
procedure gtk_arg_to_valueloc(arg:PGtkArg; value_pointer:gpointer); name 'gtk_arg_to_valueloc';
 
 
 
 
procedure gtk_marshal_BOOL__NONE(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_BOOL__NONE';
procedure gtk_marshal_BOOL__POINTER(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_BOOL__POINTER';
procedure gtk_marshal_BOOL__POINTER_POINTER_INT_INT(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_BOOL__POINTER_POINTER_INT_INT';
procedure gtk_marshal_BOOL__POINTER_INT_INT(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_BOOL__POINTER_INT_INT';
{procedure gtk_marshal_BOOL__POINTER_INT_INT_UINT(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_BOOL__POINTER_INT_INT_UINT';}
procedure gtk_marshal_BOOL__POINTER_INT_INT_INT(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_BOOL__POINTER_INT_INT_INT';
{procedure gtk_marshal_BOOL__POINTER_STRING_STRING_POINTER(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_BOOL__POINTER_STRING_STRING_POINTER';}
procedure gtk_marshal_BOOL__POINTER_POINTER_POINTER_POINTER(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_BOOL__POINTER_POINTER_POINTER_POINTER';
{procedure gtk_marshal_ENUM__ENUM(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_ENUM__ENUM';}
procedure gtk_marshal_INT__INT(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_INT__INT';
procedure gtk_marshal_INT__POINTER(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_INT__POINTER';
procedure gtk_marshal_INT__POINTER_CHAR_CHAR(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_INT__POINTER_CHAR_CHAR';
procedure gtk_marshal_NONE__BOOL(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__BOOL';
{procedure gtk_marshal_NONE__BOXED(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__BOXED';}
procedure gtk_marshal_NONE__POINTER(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__POINTER';
procedure gtk_marshal_NONE__C_CALLBACK(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__C_CALLBACK';
procedure gtk_marshal_NONE__C_CALLBACK_C_CALLBACK(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__C_CALLBACK_C_CALLBACK';
{procedure gtk_marshal_NONE__ENUM(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__ENUM';}
procedure gtk_marshal_NONE__INT(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__INT';
{procedure gtk_marshal_NONE__ENUM_FLOAT(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__ENUM_FLOAT';
procedure gtk_marshal_NONE__INT_FLOAT(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__INT_FLOAT';
procedure gtk_marshal_NONE__ENUM_FLOAT_BOOL(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__ENUM_FLOAT_BOOL';}
procedure gtk_marshal_NONE__INT_FLOAT_BOOL(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__INT_FLOAT_BOOL';
procedure gtk_marshal_NONE__INT_INT(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__INT_INT';
procedure gtk_marshal_NONE__INT_INT_POINTER(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__INT_INT_POINTER';
procedure gtk_marshal_NONE__NONE(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__NONE';
{procedure gtk_marshal_NONE__OBJECT(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__OBJECT';}
procedure gtk_marshal_NONE__POINTER_INT(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__POINTER_INT';
procedure gtk_marshal_NONE__POINTER_POINTER(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__POINTER_POINTER';
procedure gtk_marshal_NONE__POINTER_POINTER_POINTER(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__POINTER_POINTER_POINTER';
{procedure gtk_marshal_NONE__POINTER_STRING_STRING(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__POINTER_STRING_STRING';}
{procedure gtk_marshal_NONE__POINTER_UINT(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__POINTER_UINT';
procedure gtk_marshal_NONE__POINTER_UINT_ENUM(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__POINTER_UINT_ENUM';}
procedure gtk_marshal_NONE__POINTER_INT_INT(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__POINTER_INT_INT';
{procedure gtk_marshal_NONE__POINTER_POINTER_UINT_UINT(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__POINTER_POINTER_UINT_UINT';}
procedure gtk_marshal_NONE__POINTER_POINTER_INT_INT(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__POINTER_POINTER_INT_INT';
{procedure gtk_marshal_NONE__POINTER_INT_INT_POINTER_UINT_UINT(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__POINTER_INT_INT_POINTER_UINT_UINT';}
procedure gtk_marshal_NONE__POINTER_INT_INT_POINTER_INT_INT(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__POINTER_INT_INT_POINTER_INT_INT';
{procedure gtk_marshal_NONE__POINTER_UINT_UINT(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__POINTER_UINT_UINT';}
{procedure gtk_marshal_NONE__STRING(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__STRING';
procedure gtk_marshal_NONE__STRING_INT_POINTER(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__STRING_INT_POINTER';}
procedure gtk_marshal_NONE__POINTER_INT_POINTER(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__POINTER_INT_POINTER';
{procedure gtk_marshal_NONE__UINT(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__UINT';
procedure gtk_marshal_NONE__UINT_POINTER_UINT_ENUM_ENUM_POINTER(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__UINT_POINTER_UINT_ENUM_ENUM_POINTER';}
procedure gtk_marshal_NONE__INT_POINTER_INT_INT_INT_POINTER(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__INT_POINTER_INT_INT_INT_POINTER';
{procedure gtk_marshal_NONE__UINT_POINTER_UINT_UINT_ENUM(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__UINT_POINTER_UINT_UINT_ENUM';}
procedure gtk_marshal_NONE__INT_POINTER_INT_INT_INT(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__INT_POINTER_INT_INT_INT';
{procedure gtk_marshal_NONE__UINT_STRING(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__UINT_STRING'; }
procedure gtk_marshal_NONE__INT_POINTER(theobject:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_marshal_NONE__INT_POINTER';

procedure gtk_pattern_spec_init(pspec:PGtkPatternSpec; pattern:Pgchar); name 'gtk_pattern_spec_init';
procedure gtk_pattern_spec_free_segs(pspec:PGtkPatternSpec); name 'gtk_pattern_spec_free_segs';
function  gtk_pattern_match(pspec:PGtkPatternSpec; string_length:guint; thestring:Pgchar; string_reversed:Pgchar):gboolean; name 'gtk_pattern_match';
function  gtk_pattern_match_string(pspec:PGtkPatternSpec; thestring:Pgchar):gboolean; name 'gtk_pattern_match_string';
function  gtk_pattern_match_simple(pattern:Pgchar; thestring:Pgchar):gboolean; name 'gtk_pattern_match_simple';

function  gtk_binding_set_new(set_name:Pgchar):PGtkBindingSet; name 'gtk_binding_set_new';
function  gtk_binding_set_by_class(object_class:gpointer):PGtkBindingSet; name 'gtk_binding_set_by_class';
function  gtk_binding_set_find(set_name:Pgchar):PGtkBindingSet; name 'gtk_binding_set_find';
function  gtk_bindings_activate(theobject:PGtkObject; keyval:guint; modifiers:guint):gboolean; name 'gtk_bindings_activate';
function  gtk_binding_set_activate(binding_set:PGtkBindingSet; keyval:guint; modifiers:guint; theobject:PGtkObject):gboolean; name 'gtk_binding_set_activate';
procedure gtk_binding_entry_add(binding_set:PGtkBindingSet; keyval:guint; modifiers:guint); name 'gtk_binding_entry_clear';
procedure gtk_binding_entry_clear(binding_set:PGtkBindingSet; keyval:guint; modifiers:guint); name 'gtk_binding_entry_clear';
{procedure gtk_binding_entry_add_signal(binding_set:PGtkBindingSet; keyval:guint; modifiers:guint; signal_name:Pgchar; n_args:guint; args:array of const); name 'gtk_binding_entry_add_signal';}
procedure gtk_binding_set_add_path(binding_set:PGtkBindingSet; path_type:TGtkPathType; path_pattern:Pgchar; priority:TGtkPathPriorityType); name 'gtk_binding_set_add_path';
procedure gtk_binding_entry_remove(binding_set:PGtkBindingSet; keyval:guint; modifiers:guint); name 'gtk_binding_entry_remove';
procedure gtk_binding_entry_add_signall(binding_set:PGtkBindingSet; keyval:guint; modifiers:guint; signal_name:Pgchar; binding_args:PGSList); name 'gtk_binding_entry_add_signall';
function  gtk_binding_parse_binding(scanner:PGScanner):guint; name 'gtk_binding_parse_binding';
 

function  gtk_alignment_get_type:TGtkType; name 'gtk_alignment_get_type';
function  gtk_alignment_new (xalign:gfloat; yalign:gfloat; xscale:gfloat; yscale:gfloat):PGtkWidget; name 'gtk_alignment_new';
procedure gtk_alignment_set(alignment:PGtkAlignment; xalign:gfloat; yalign:gfloat; xscale:gfloat; yscale:gfloat); name 'gtk_alignment_set';

function  GTK_CONTAINER_TYPE:TGtkType; name 'gtk_container_get_type';

function  GTK_TYPE_IDENTIFIER:TGtkType; name 'gtk_identifier_get_type';
function  GTK_IDENTIFIER_TYPE:TGtkType; name 'gtk_identifier_get_type';
function  gtk_identifier_get_type:TGtkType; name 'gtk_identifier_get_type';

function  GTK_DATA_TYPE:TGtkType; name 'gtk_data_get_type';
function  gtk_data_get_type:TGtkType; name 'gtk_data_get_type';

function  GTK_MISC_TYPE:TGtkType; name 'gtk_misc_get_type';
function  gtk_misc_get_type:TGtkType; name 'gtk_misc_get_type';
procedure gtk_misc_set_alignment(misc:PGtkMisc; xalign:gfloat; yalign:gfloat); name 'gtk_misc_set_alignment';
procedure gtk_misc_set_padding(misc:PGtkMisc; xpad:gint; ypad:gint); name 'gtk_misc_set_padding';

function  gtk_check_gtkversion(required_major:guint; required_minor:guint; required_micro:guint):Pgchar; name 'gtk_check_version';
procedure gtk_init(argc:plongint; argv:pppchar); name 'gtk_init';
function  gtk_init_check(argc:plongint; argv:pppchar):gboolean; name 'gtk_init_check';
procedure gtk_exit(error_code:gint); name 'gtk_exit';
function  gtk_set_locale:Pgchar; name 'gtk_set_locale';
function  gtk_events_pending:gint; name 'gtk_events_pending';
procedure gtk_main_do_event(event:PGdkEvent); name 'gtk_main_do_event';
procedure gtk_main; name 'gtk_main';
function  gtk_main_level:guint; name 'gtk_main_level';
procedure gtk_main_quit; name 'gtk_main_quit';
function  gtk_main_iteration:gint; name 'gtk_main_iteration';
function  gtk_main_iteration_do(blocking:gboolean):gint; name 'gtk_main_iteration_do';
function  gtk_true:gint; name 'gtk_true';
function  gtk_false:gint; name 'gtk_false';
procedure gtk_grab_add(widget:PGtkWidget); name 'gtk_grab_add';
function  gtk_grab_get_current:PGtkWidget; name 'gtk_grab_get_current';
procedure gtk_grab_remove(widget:PGtkWidget); name 'gtk_grab_remove';
procedure gtk_init_add(thefunction :TGtkfunction; data:gpointer); name 'gtk_init_add';
procedure gtk_quit_add_destroy(main_level:guint; theobject:PGtkObject); name 'gtk_quit_add_destroy';
function  gtk_quit_add(main_level:guint; thefunction:TGtkfunction; data:gpointer):guint; name 'gtk_quit_add';
function  gtk_quit_add_full(main_level:guint; thefunction:TGtkfunction; marshal:TGtkCallbackMarshal; data:gpointer; destroy:TGtkDestroyNotify):guint; name 'gtk_quit_add_full';
procedure gtk_quit_remove(quit_handler_id:guint); name 'gtk_quit_remove';
procedure gtk_quit_remove_by_data(data:gpointer); name 'gtk_quit_remove_by_data';
function  gtk_timeout_add(interval:guint32; thefunction:TGtkfunction; data:gpointer):guint; name 'gtk_timeout_add';
function  gtk_timeout_add_full(interval:guint32; thefunction:TGtkfunction; marshal:TGtkCallbackMarshal; data:gpointer; destroy:TGtkDestroyNotify):guint; name 'gtk_timeout_add_full';
procedure gtk_timeout_remove(timeout_handler_id:guint); name 'gtk_timeout_remove';
function  gtk_idle_add(thefunction:TGtkfunction; data:gpointer):guint; name 'gtk_idle_add';
function  gtk_idle_add_priority(priority:gint; thefunction:TGtkfunction; data:gpointer):guint; name 'gtk_idle_add_priority';
function  gtk_idle_add_full(priority:gint; thefunction:TGtkfunction; marshal:TGtkCallbackMarshal; data:gpointer; destroy:TGtkDestroyNotify):guint; name 'gtk_idle_add_full';
procedure gtk_idle_remove(idle_handler_id:guint); name 'gtk_idle_remove';
procedure gtk_idle_remove_by_data(data:gpointer); name 'gtk_idle_remove_by_data';
function  gtk_input_add_full(source:gint; condition:TGdkInputCondition; thefunction:TGdkInputfunction; marshal:TGtkCallbackMarshal; data:gpointer; destroy:TGtkDestroyNotify):guint; name 'gtk_input_add_full';
procedure gtk_input_remove(input_handler_id:guint); name 'gtk_input_remove';
function  gtk_key_snooper_install(snooper:TGtkKeySnoopFunc; func_data:gpointer):guint; name 'gtk_key_snooper_install';
procedure gtk_key_snooper_remove(snooper_handler_id:guint); name 'gtk_key_snooper_remove';
function  gtk_get_current_event:PGdkEvent; name 'gtk_get_current_event';
function  gtk_get_event_widget(event:PGdkEvent):PGtkWidget; name 'gtk_get_event_widget';
procedure gtk_propagate_event(widget:PGtkWidget; event:PGdkEvent); name 'gtk_propagate_event';

function  GTK_DRAWING_AREA_TYPE:TGtkType; name 'gtk_drawing_area_get_type';
function  gtk_drawing_area_get_type:TGtkType; name 'gtk_drawing_area_get_type';
function  gtk_drawing_area_new : PGtkWidget; name 'gtk_drawing_area_new';
procedure gtk_drawing_area_size(darea:PGtkDrawingArea; width:gint; height:gint); name 'gtk_drawing_area_size';
 

function  gtk_container_get_type:TGtkType; name 'gtk_container_get_type';
procedure gtk_container_set_border_width(container:PGtkContainer; border_width:guint); name 'gtk_container_set_border_width';
procedure gtk_container_add(container:PGtkContainer; widget:PGtkWidget); name 'gtk_container_add';
procedure gtk_container_remove(container:PGtkContainer; widget:PGtkWidget); name 'gtk_container_remove';
procedure gtk_container_set_resize_mode(container:PGtkContainer; resize_mode:TGtkResizeMode); name 'gtk_container_set_resize_mode';
procedure gtk_container_check_resize(container:PGtkContainer); name 'gtk_container_check_resize';
procedure gtk_container_foreach(container:PGtkContainer; callback:TGtkCallback; callback_data:gpointer); name 'gtk_container_foreach';
procedure gtk_container_foreach_full(container:PGtkContainer; callback:TGtkCallback; marshal:TGtkCallbackMarshal; callback_data:gpointer; notify:TGtkDestroyNotify); name 'gtk_container_foreach_full';
function  gtk_container_children (container:PGtkContainer):PGList; name 'gtk_container_children';
function  gtk_container_focus(container:PGtkContainer; direction:TGtkDirectionType):gint; name 'gtk_container_focus';
procedure gtk_container_set_focus_child(container:PGtkContainer; child:PGtkWidget); name 'gtk_container_set_focus_child';
procedure gtk_container_set_focus_vadjustment(container:PGtkContainer; adjustment:PGtkAdjustment); name 'gtk_container_set_focus_vadjustment';
procedure gtk_container_set_focus_hadjustment(container:PGtkContainer; adjustment:PGtkAdjustment); name 'gtk_container_set_focus_hadjustment';
procedure gtk_container_register_toplevel(container:PGtkContainer); name 'gtk_container_register_toplevel';
procedure gtk_container_unregister_toplevel(container:PGtkContainer); name 'gtk_container_unregister_toplevel';
function  gtk_container_get_toplevels:PGList; name 'gtk_container_get_toplevels';
procedure gtk_container_resize_children(container:PGtkContainer); name 'gtk_container_resize_children';
function  gtk_container_child_type(container:PGtkContainer):TGtkType; name 'gtk_container_child_type';
procedure gtk_container_add_child_arg_type(arg_name:Pgchar; arg_type:TGtkType; arg_flags:guint; arg_id:guint); name 'gtk_container_add_child_arg_type';
function  gtk_container_query_child_args(class_type:TGtkType; arg_flags:PPguint32; nargs:Pguint):PGtkArg; name 'gtk_container_query_child_args';
procedure gtk_container_child_getv(container:PGtkContainer; child:PGtkWidget; n_args:guint; args:PGtkArg); name 'gtk_container_child_getv';
procedure gtk_container_child_setv(container:PGtkContainer; child:PGtkWidget; n_args:guint; args:PGtkArg); name 'gtk_container_child_setv';
{procedure gtk_container_add_with_args(container:PGtkContainer; widget:PGtkWidget; first_arg_name:Pgchar; args:array of const); name 'gtk_container_add_with_args';}
procedure gtk_container_addv(container:PGtkContainer; widget:PGtkWidget; n_args:guint; args:PGtkArg); name 'gtk_container_addv';
{procedure gtk_container_child_set(container:PGtkContainer; child:PGtkWidget; first_arg_name:Pgchar; args:array of const); name 'gtk_container_child_set';}
procedure gtk_container_queue_resize(container:PGtkContainer); name 'gtk_container_queue_resize';
procedure gtk_container_clear_resize_widgets(container:PGtkContainer); name 'gtk_container_clear_resize_widgets';
procedure gtk_container_arg_set(container:PGtkContainer; child:PGtkWidget; arg:PGtkArg; info:PGtkArgInfo); name 'gtk_container_arg_set';
procedure gtk_container_arg_get(container:PGtkContainer; child:PGtkWidget; arg:PGtkArg; info:PGtkArgInfo); name 'gtk_container_arg_get';
{function  gtk_container_child_args_collect(object_type:TGtkType; arg_list_p:PPGSList; info_list_p:PPGSList; first_arg_name:Pgchar; args:array of const):Pgchar; name 'gtk_container_child_args_collect';}
function  gtk_container_child_arg_get_info(object_type:TGtkType; arg_name:Pgchar; info_p:PPGtkArgInfo):Pgchar; name 'gtk_container_child_arg_get_info';
procedure gtk_container_forall(container:PGtkContainer; callback:TGtkCallback; callback_data:gpointer); name 'gtk_container_forall';
function  gtk_container_child_composite_name(container:PGtkContainer; child:PGtkWidget):Pgchar; name 'gtk_container_child_composite_name';
function  gtk_object_get_type:TGtkType; name 'gtk_object_get_type';
{function  gtk_object_class_user_signal_new(klass:PGtkObjectClass; name:Pgchar; signal_flags:TGtkSignalRunType; marshaller:TGtkSignalMarshaller; return_val:TGtkType; nparams:guint; args:array of const):guint; name 'gtk_object_class_user_signal_new';}
function  gtk_object_class_user_signal_newv(klass:PGtkObjectClass; pname:Pgchar; signal_flags:TGtkSignalRunType; marshaller:TGtkSignalMarshaller; return_val:TGtkType; nparams:guint; params:PGtkType):guint; name 'gtk_object_class_user_signal_newv';
{function  gtk_object_new(thetype:TGtkType; first_arg_name:Pgchar; args:array of const):PGtkObject; name 'gtk_object_new';}
function  gtk_object_newv(theobject_type:TGtkType; n_args:guint; args:PGtkArg):PGtkObject; name 'gtk_object_newv';
procedure gtk_object_default_construct(theobject:PGtkObject); name 'gtk_object_default_construct';
procedure gtk_object_constructed(theobject:PGtkObject); name 'gtk_object_constructed';
procedure gtk_object_sink(theobject:PGtkObject); name 'gtk_object_sink';
procedure gtk_object_ref(theobject:PGtkObject); name 'gtk_object_ref';
procedure gtk_object_unref(theobject:PGtkObject); name 'gtk_object_unref';
procedure gtk_object_weakref(theobject:PGtkObject; notify:TGtkDestroyNotify; data:gpointer); name 'gtk_object_weakref';
procedure gtk_object_weakunref(theobject:PGtkObject; notify:TGtkDestroyNotify; data:gpointer); name 'gtk_object_weakunref';
procedure gtk_object_destroy(theobject:PGtkObject); name 'gtk_object_destroy';
procedure gtk_object_getv(theobject:PGtkObject; n_args:guint; args:PGtkArg); name 'gtk_object_getv';
{procedure gtk_object_get(theobject:PGtkObject; first_arg_name:Pgchar; args:array of const); name 'gtk_object_get';}
{procedure gtk_object_set(theobject:PGtkObject; first_arg_name:Pgchar; args:array of const); name 'gtk_object_set';}
procedure gtk_object_setv(theobject:PGtkObject; n_args:guint; args:PGtkArg); name 'gtk_object_setv';
function  gtk_object_query_args(class_type:TGtkType; arg_flags:PPguint32; n_args:Pguint):PGtkArg; name 'gtk_object_query_args';
procedure gtk_object_set_data(theobject:PGtkObject; key:Pgchar; data:gpointer); name 'gtk_object_set_data';
procedure gtk_object_set_data_full(theobject:PGtkObject; key:Pgchar; data:gpointer; destroy:TGtkDestroyNotify); name 'gtk_object_set_data_full';
procedure gtk_object_remove_data(theobject:PGtkObject; key:Pgchar); name 'gtk_object_remove_data';
function  gtk_object_get_data(theobject:PGtkObject; key:Pgchar):gpointer; name 'gtk_object_get_data';
procedure gtk_object_remove_no_notify(theobject:PGtkObject; key:Pgchar); name 'gtk_object_remove_no_notify';
procedure gtk_object_set_user_data(theobject:PGtkObject; data:gpointer); name 'gtk_object_set_user_data';
function  gtk_object_get_user_data(theobject:PGtkObject):gpointer; name 'gtk_object_get_user_data';
procedure gtk_object_class_add_signals(klass:PGtkObjectClass; signals:Pguint; nsignals:guint); name 'gtk_object_class_add_signals';
procedure gtk_object_add_arg_type(arg_name:Pgchar; arg_type:TGtkType; arg_flags:guint; arg_id:guint); name 'gtk_object_add_arg_type';
procedure gtk_object_set_data_by_id(theobject:PGtkObject; data_id:TGQuark; data:gpointer); name 'gtk_object_set_data_by_id';
procedure gtk_object_set_data_by_id_full(theobject:PGtkObject; data_id:TGQuark; data:gpointer; destroy:TGtkDestroyNotify); name 'gtk_object_set_data_by_id_full';
function  gtk_object_get_data_by_id(theobject:PGtkObject; data_id:TGQuark):gpointer; name 'gtk_object_get_data_by_id';
procedure gtk_object_remove_data_by_id(theobject:PGtkObject; data_id:TGQuark); name 'gtk_object_remove_data_by_id';
procedure gtk_object_remove_no_notify_by_id(theobject:PGtkObject; key_id:TGQuark); name 'gtk_object_remove_no_notify_by_id';
procedure gtk_object_arg_set(theobject:PGtkObject; arg:PGtkArg; info:PGtkArgInfo); name 'gtk_object_arg_set';
procedure gtk_object_arg_get(theobject:PGtkObject; arg:PGtkArg; info:PGtkArgInfo); name 'gtk_object_arg_get';
{function  gtk_object_args_collect(theobject_type:TGtkType; arg_list_p:PPGSList; info_list_p:PPGSList; first_arg_name:Pgchar; var_args:array of const):Pgchar; name 'gtk_object_args_collect';}
function  gtk_object_arg_get_info(theobject_type:TGtkType; arg_name:Pgchar; info_p:PPGtkArgInfo):Pgchar; name 'gtk_object_arg_get_info';
procedure gtk_trace_referencing(theobject:PGtkObject; func:Pgchar; dummy:guint; line:guint; do_ref:gboolean); name 'gtk_trace_referencing';

procedure gtk_type_init; name 'gtk_type_init';
function  gtk_type_unique(parent_thetype:TGtkType; type_info:PGtkTypeInfo):TGtkType; name 'gtk_type_unique';
procedure gtk_type_set_chunk_alloc(thetype:TGtkType; n_chunks:guint); name 'gtk_type_set_chunk_alloc';
function  gtk_type_name(thetype:guint):Pgchar; name 'gtk_type_name';
function  gtk_type_from_name(pname:Pgchar):TGtkType; name 'gtk_type_from_name';
function  gtk_type_parent(thetype:TGtkType):TGtkType; name 'gtk_type_parent';
function  gtk_type_class(thetype:TGtkType):gpointer; name 'gtk_type_class';
function  gtk_type_parent_class(thetype:TGtkType):gpointer; name 'gtk_type_parent_class';
function  gtk_type_children_types(thetype:TGtkType):PGList; name 'gtk_type_children_types';
function  gtk_type_new(thetype:TGtkType):gpointer; name 'gtk_type_new';
procedure gtk_type_free(thetype:TGtkType; mem:gpointer); name 'gtk_type_free';
procedure gtk_type_describe_heritage(thetype:TGtkType); name 'gtk_type_describe_heritage';
procedure gtk_type_describe_tree(thetype:TGtkType; show_size:gboolean); name 'gtk_type_describe_tree';
function  gtk_type_is_a(thetype:TGtkType; is_a_thetype:TGtkType):gboolean; name 'gtk_type_is_a';
function  gtk_type_check_object_cast(type_object:PGtkTypeObject; cast_thetype:TGtkType):PGtkTypeObject; name 'gtk_type_check_object_cast';
function  gtk_type_check_class_cast(klass:PGtkTypeClass; cast_thetype:TGtkType):PGtkTypeClass; name 'gtk_type_check_class_cast';
function  gtk_type_register_enum(type_name:Pgchar; values:PGtkEnumValue):TGtkType; name 'gtk_type_register_enum';
function  gtk_type_register_flags(type_name:Pgchar; values:PGtkFlagValue):TGtkType; name 'gtk_type_register_flags';
function  gtk_type_enum_get_values(enum_thetype:TGtkType):PGtkEnumValue; name 'gtk_type_enum_get_values';
function  gtk_type_flags_get_values(flags_thetype:TGtkType):PGtkFlagValue; name 'gtk_type_flags_get_values';
function  gtk_type_enum_find_value(enum_thetype:TGtkType; value_name:Pgchar):PGtkEnumValue; name 'gtk_type_enum_find_value';
function  gtk_type_flags_find_value(flag_thetype:TGtkType; value_name:Pgchar):PGtkFlagValue; name 'gtk_type_flags_find_value';
procedure gtk_type_set_varargs_type(foreign_thetype:TGtkType; varargs_thetype:TGtkType); name 'gtk_type_set_varargs_type';
function  gtk_type_get_varargs_type(foreign_thetype:TGtkType):TGtkType; name 'gtk_type_get_varargs_type';
function  gtk_type_query(thetype:TGtkType):PGtkTypeQuery; name 'gtk_type_query';

function  GTK_ADJUSTMENT_TYPE:TGtkType; name 'gtk_adjustment_get_type';
function  gtk_adjustment_get_type:TGtkType; name 'gtk_adjustment_get_type';
function  gtk_adjustment_new(_value:gfloat; lower:gfloat; upper:gfloat; step_increment:gfloat; page_increment:gfloat;page_size:gfloat):PGtkObject; name 'gtk_adjustment_new';
procedure gtk_adjustment_changed(adjustment:PGtkAdjustment); name 'gtk_adjustment_changed';
procedure gtk_adjustment_value_changed(adjustment:PGtkAdjustment); name 'gtk_adjustment_value_changed';
procedure gtk_adjustment_clamp_page(adjustment:PGtkAdjustment; lower:gfloat; upper:gfloat); name 'gtk_adjustment_clamp_page';
procedure gtk_adjustment_set_value(adjustment:PGtkAdjustment; _value:gfloat); name 'gtk_adjustment_set_value';

function  gtk_accel_group_new:PGtkAccelGroup; name 'gtk_accel_group_new';
function  gtk_accel_group_get_default:PGtkAccelGroup; name 'gtk_accel_group_get_default';
function  gtk_accel_group_ref(accel_group:PGtkAccelGroup):PGtkAccelGroup; name 'gtk_accel_group_ref';
procedure gtk_accel_group_unref(accel_group:PGtkAccelGroup); name 'gtk_accel_group_unref';
function  gtk_accel_group_activate(accel_group:PGtkAccelGroup; accel_key:guint; accel_mods:TGdkModifierType):gboolean; name 'gtk_accel_group_activate';
function  gtk_accel_groups_activate(_object:PGtkObject; accel_key:guint; accel_mods:TGdkModifierType):gboolean; name 'gtk_accel_groups_activate';
procedure gtk_accel_group_attach(accel_group:PGtkAccelGroup; _object:PGtkObject); name 'gtk_accel_group_attach';
procedure gtk_accel_group_detach(accel_group:PGtkAccelGroup; _object:PGtkObject); name 'gtk_accel_group_detach';
procedure gtk_accel_group_lock(accel_group:PGtkAccelGroup); name 'gtk_accel_group_lock';
procedure gtk_accel_group_unlock(accel_group:PGtkAccelGroup); name 'gtk_accel_group_unlock';
function  gtk_accel_group_get_entry(accel_group:PGtkAccelGroup; accel_key:guint; accel_mods:TGdkModifierType):PGtkAccelEntry; name 'gtk_accel_group_get_entry';
procedure gtk_accel_group_lock_entry(accel_group:PGtkAccelGroup; accel_key:guint; accel_mods:TGdkModifierType); name 'gtk_accel_group_lock_entry';
procedure gtk_accel_group_unlock_entry(accel_group:PGtkAccelGroup; accel_key:guint; accel_mods:TGdkModifierType); name 'gtk_accel_group_unlock_entry';
procedure gtk_accel_group_add(accel_group:PGtkAccelGroup; accel_key:guint; accel_mods:TGdkModifierType; accel_flags:TGtkAccelFlags; _object:PGtkObject; accel_signal:Pgchar); name 'gtk_accel_group_add';
procedure gtk_accel_group_remove(accel_group:PGtkAccelGroup; accel_key:guint; accel_mods:TGdkModifierType; _object:PGtkObject); name 'gtk_accel_group_remove';
procedure gtk_accel_group_handle_add(_object:PGtkObject; accel_signal_id:guint; accel_group:PGtkAccelGroup; accel_key:guint; accel_mods:TGdkModifierType; accel_flags:TGtkAccelFlags); name 'gtk_accel_group_handle_add';
procedure gtk_accel_group_handle_remove(_object:PGtkObject; accel_group:PGtkAccelGroup; accel_key:guint; accel_mods:TGdkModifierType); name 'gtk_accel_group_handle_remove';
function  gtk_accel_group_create_add(class_type:TGtkType; signal_flags:TGtkSignalRunType; handler_offset:guint):guint; name 'gtk_accel_group_create_add';
function  gtk_accel_group_create_remove(class_type:TGtkType; signal_flags:TGtkSignalRunType; handler_offset:guint):guint; name 'gtk_accel_group_create_remove';
{procedure gtk_accel_group_marshal_add(_object:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_accel_group_marshal_add';}
{procedure gtk_accel_group_marshal_remove(_object:PGtkObject; func:TGtkSignalFunc; func_data:gpointer; args:PGtkArg); name 'gtk_accel_group_marshal_remove';}
function  gtk_accel_groups_from_object(_object:PGtkObject):PGSList; name 'gtk_accel_groups_from_object';
function  gtk_accel_group_entries_from_object(_object:PGtkObject):PGSList; name 'gtk_accel_group_entries_from_object';
function  gtk_accelerator_valid(keyval:guint; modifiers:TGdkModifierType):gboolean; name 'gtk_accelerator_valid';
procedure gtk_accelerator_parse(accelerator:Pgchar; accelerator_key:Pguint; accelerator_mods:PGdkModifierType); name 'gtk_accelerator_parse';
function  gtk_accelerator_name(accelerator_key:guint; accelerator_mods:TGdkModifierType):Pgchar; name 'gtk_accelerator_name';
procedure gtk_accelerator_set_default_mod_mask(default_mod_mask:TGdkModifierType); name 'gtk_accelerator_set_default_mod_mask';
function  gtk_accelerator_get_default_mod_mask:guint; name 'gtk_accelerator_get_default_mod_mask';

function  GTK_WIDGET_TYPE:TGtkType; name 'gtk_widget_get_type';
function  gtk_widget_get_type:TGtkType; name 'gtk_widget_get_type';
{function  gtk_widget_new(thetype:TGtkType; first_arg_name:Pgchar; args:array of const):PGtkWidget; name 'gtk_widget_new';}
function  gtk_widget_newv(thetype:TGtkType; nargs:guint; args:PGtkArg):PGtkWidget; name 'gtk_widget_newv';
procedure gtk_widget_ref(widget:PGtkWidget); name 'gtk_widget_ref';
procedure gtk_widget_unref(widget:PGtkWidget); name 'gtk_widget_unref';
procedure gtk_widget_destroy(widget:PGtkWidget); name 'gtk_widget_destroy';
procedure gtk_widget_destroyed(widget:PGtkWidget; widget_pointer:PPGtkWidget); name 'gtk_widget_destroyed';
procedure gtk_widget_get(widget:PGtkWidget; arg:PGtkArg); name 'gtk_widget_get';
procedure gtk_widget_getv(widget:PGtkWidget; nargs:guint; args:PGtkArg); name 'gtk_widget_getv';
{procedure gtk_widget_set(widget:PGtkWidget; first_arg_name:Pgchar; args:array of const); name 'gtk_widget_set';}
procedure gtk_widget_setv(widget:PGtkWidget; nargs:guint; args:PGtkArg); name 'gtk_widget_setv';
procedure gtk_widget_unparent(widget:PGtkWidget); name 'gtk_widget_unparent';
procedure gtk_widget_show(widget:PGtkWidget); name 'gtk_widget_show';
procedure gtk_widget_show_now(widget:PGtkWidget); name 'gtk_widget_show_now';
procedure gtk_widget_hide(widget:PGtkWidget); name 'gtk_widget_hide';
procedure gtk_widget_show_all(widget:PGtkWidget); name 'gtk_widget_show_all';
procedure gtk_widget_hide_all(widget:PGtkWidget); name 'gtk_widget_hide_all';
procedure gtk_widget_map(widget:PGtkWidget); name 'gtk_widget_map';
procedure gtk_widget_unmap(widget:PGtkWidget); name 'gtk_widget_unmap';
procedure gtk_widget_realize(widget:PGtkWidget); name 'gtk_widget_realize';
procedure gtk_widget_unrealize(widget:PGtkWidget); name 'gtk_widget_unrealize';
procedure gtk_widget_queue_draw(widget:PGtkWidget); name 'gtk_widget_queue_draw';
procedure gtk_widget_queue_draw_area(widget:PGtkWidget; x:gint; y:gint; width:gint; height:gint); name 'gtk_widget_queue_draw_area';
procedure gtk_widget_queue_clear(widget:PGtkWidget); name 'gtk_widget_queue_clear';
procedure gtk_widget_queue_clear_area(widget:PGtkWidget; x:gint; y:gint; width:gint; height:gint); name 'gtk_widget_queue_clear_area';
procedure gtk_widget_queue_resize(widget:PGtkWidget); name 'gtk_widget_queue_resize';
procedure gtk_widget_draw(widget:PGtkWidget; area:PGdkRectangle); name 'gtk_widget_draw';
procedure gtk_widget_draw_focus(widget:PGtkWidget); name 'gtk_widget_draw_focus';
procedure gtk_widget_draw_default(widget:PGtkWidget); name 'gtk_widget_draw_default';
procedure gtk_widget_size_request(widget:PGtkWidget; requisition:PGtkRequisition); name 'gtk_widget_size_request';
procedure gtk_widget_size_allocate(widget:PGtkWidget; allocation:PGtkAllocation); name 'gtk_widget_size_allocate';
procedure gtk_widget_get_child_requisition(widget:PGtkWidget; requisition:PGtkRequisition); name 'gtk_widget_get_child_requisition';
procedure gtk_widget_add_accelerator(widget:PGtkWidget; accel_signal:Pgchar; accel_group:PGtkAccelGroup; accel_key:guint; accel_mods:guint; accel_flags:TGtkAccelFlags); name 'gtk_widget_add_accelerator';
procedure gtk_widget_remove_accelerator(widget:PGtkWidget; accel_group:PGtkAccelGroup; accel_key:guint; accel_mods:guint); name 'gtk_widget_remove_accelerator';
procedure gtk_widget_remove_accelerators(widget:PGtkWidget; accel_signal:Pgchar; visible_only:gboolean); name 'gtk_widget_remove_accelerators';
function  gtk_widget_accelerator_signal(widget:PGtkWidget; accel_group:PGtkAccelGroup; accel_key:guint; accel_mods:guint):guint; name 'gtk_widget_accelerator_signal';
procedure gtk_widget_lock_accelerators(widget:PGtkWidget); name 'gtk_widget_lock_accelerators';
procedure gtk_widget_unlock_accelerators(widget:PGtkWidget); name 'gtk_widget_unlock_accelerators';
function  gtk_widget_accelerators_locked(widget:PGtkWidget):gboolean; name 'gtk_widget_accelerators_locked';
function  gtk_widget_event(widget:PGtkWidget; event:PGdkEvent):gint; name 'gtk_widget_event';
function  gtk_widget_activate(widget:PGtkWidget):gboolean; name 'gtk_widget_activate';
function  gtk_widget_set_scroll_adjustments(widget:PGtkWidget; hadjustment:PGtkAdjustment; vadjustment:PGtkAdjustment):gboolean; name 'gtk_widget_set_scroll_adjustments';
procedure gtk_widget_reparent(widget:PGtkWidget; new_parent:PGtkWidget); name 'gtk_widget_reparent';
procedure gtk_widget_popup(widget:PGtkWidget; x:gint; y:gint); name 'gtk_widget_popup';
function  gtk_widget_intersect(widget:PGtkWidget; area:PGdkRectangle; intersection:PGdkRectangle):gint; name 'gtk_widget_intersect';
procedure gtk_widget_grab_focus(widget:PGtkWidget); name 'gtk_widget_grab_focus';
procedure gtk_widget_grab_default(widget:PGtkWidget); name 'gtk_widget_grab_default';
procedure gtk_widget_set_name(widget:PGtkWidget; pname:Pgchar); name 'gtk_widget_set_name';
function  gtk_widget_get_name (widget:PGtkWidget):Pgchar; name 'gtk_widget_get_name';
procedure gtk_widget_set_state(widget:PGtkWidget; state:TGtkStateType); name 'gtk_widget_set_state';
procedure gtk_widget_set_sensitive(widget:PGtkWidget; sensitive:gboolean); name 'gtk_widget_set_sensitive';
procedure gtk_widget_set_app_paintable(widget:PGtkWidget; app_paintable:gboolean); name 'gtk_widget_set_app_paintable';
procedure gtk_widget_set_parent(widget:PGtkWidget; parent:PGtkWidget); name 'gtk_widget_set_parent';
procedure gtk_widget_set_parent_window(widget:PGtkWidget; parent_window:PGdkWindow); name 'gtk_widget_set_parent_window';
function  gtk_widget_get_parent_window (widget:PGtkWidget):PGdkWindow; name 'gtk_widget_get_parent_window';
procedure gtk_widget_set_uposition(widget:PGtkWidget; x:gint; y:gint); name 'gtk_widget_set_uposition';
procedure gtk_widget_set_usize(widget:PGtkWidget; width:gint; height:gint); name 'gtk_widget_set_usize';
procedure gtk_widget_set_events(widget:PGtkWidget; events:gint); name 'gtk_widget_set_events';
procedure gtk_widget_add_events(widget:PGtkWidget; events:gint); name 'gtk_widget_add_events';
procedure gtk_widget_set_extension_events(widget:PGtkWidget; mode:TGdkExtensionMode); name 'gtk_widget_set_extension_events';
function  gtk_widget_get_extension_events(widget:PGtkWidget):TGdkExtensionMode; name 'gtk_widget_get_extension_events';
function  gtk_widget_get_toplevel (widget:PGtkWidget):PGtkWidget; name 'gtk_widget_get_toplevel';
function  gtk_widget_get_ancestor (widget:PGtkWidget; widget_thetype:TGtkType):PGtkWidget; name 'gtk_widget_get_ancestor';
function  gtk_widget_get_colormap (widget:PGtkWidget):PGdkColormap; name 'gtk_widget_get_colormap';
function  gtk_widget_get_visual (widget:PGtkWidget):PGdkVisual; name 'gtk_widget_get_visual';
procedure gtk_widget_set_colormap(widget:PGtkWidget; colormap:PGdkColormap); name 'gtk_widget_set_colormap';
procedure gtk_widget_set_visual(widget:PGtkWidget; visual:PGdkVisual); name 'gtk_widget_set_visual';
function  gtk_widget_get_events(widget:PGtkWidget):gint; name 'gtk_widget_get_events';
procedure gtk_widget_get_pointer(widget:PGtkWidget; x:Pgint; y:Pgint); name 'gtk_widget_get_pointer';
function  gtk_widget_is_ancestor(widget:PGtkWidget; ancestor:PGtkWidget):gint; name 'gtk_widget_is_ancestor';
function  gtk_widget_hide_on_delete(widget:PGtkWidget):gint; name 'gtk_widget_hide_on_delete';
procedure gtk_widget_set_style(widget:PGtkWidget; style:PGtkStyle); name 'gtk_widget_set_style';
procedure gtk_widget_set_rc_style(widget:PGtkWidget); name 'gtk_widget_set_rc_style';
procedure gtk_widget_ensure_style(widget:PGtkWidget); name 'gtk_widget_ensure_style';
function  gtk_widget_get_style (widget:PGtkWidget):PGtkStyle; name 'gtk_widget_get_style';
procedure gtk_widget_restore_default_style(widget:PGtkWidget); name 'gtk_widget_restore_default_style';
procedure gtk_widget_modify_style(widget:PGtkWidget; style:PGtkRcStyle); name 'gtk_widget_modify_style';
procedure gtk_widget_set_composite_name(widget:PGtkWidget; pname:Pgchar); name 'gtk_widget_set_composite_name';
function  gtk_widget_get_composite_name(widget:PGtkWidget):Pgchar; name 'gtk_widget_get_composite_name';
procedure gtk_widget_reset_rc_styles(widget:PGtkWidget); name 'gtk_widget_reset_rc_styles';
procedure gtk_widget_push_style(style:PGtkStyle); name 'gtk_widget_push_style';
procedure gtk_widget_push_colormap(cmap:PGdkColormap); name 'gtk_widget_push_colormap';
procedure gtk_widget_push_visual(visual:PGdkVisual); name 'gtk_widget_push_visual';
procedure gtk_widget_push_composite_child; name 'gtk_widget_push_composite_child';
procedure gtk_widget_pop_composite_child; name 'gtk_widget_pop_composite_child';
procedure gtk_widget_pop_style; name 'gtk_widget_pop_style';
procedure gtk_widget_pop_colormap; name 'gtk_widget_pop_colormap';
procedure gtk_widget_pop_visual; name 'gtk_widget_pop_visual';
procedure gtk_widget_set_default_style(style:PGtkStyle); name 'gtk_widget_set_default_style';
procedure gtk_widget_set_default_colormap(colormap:PGdkColormap); name 'gtk_widget_set_default_colormap';
procedure gtk_widget_set_default_visual(visual:PGdkVisual); name 'gtk_widget_set_default_visual';
function  gtk_widget_get_default_style : PGtkStyle; name 'gtk_widget_get_default_style';
function  gtk_widget_get_default_colormap : PGdkColormap; name 'gtk_widget_get_default_colormap';
function  gtk_widget_get_default_visual : PGdkVisual; name 'gtk_widget_get_default_visual';
procedure gtk_widget_shape_combine_mask(widget:PGtkWidget; shape_mask:PGdkBitmap; offset_x:gint; offset_y:gint); name 'gtk_widget_shape_combine_mask';
function  gtk_style_new : PGtkStyle; name 'gtk_style_new';
function  gtk_style_copy (style:PGtkStyle):PGtkStyle; name 'gtk_style_copy';
function  gtk_style_attach (style:PGtkStyle; window:PGdkWindow):PGtkStyle; name 'gtk_style_attach';
procedure gtk_style_detach(style:PGtkStyle); name 'gtk_style_detach';
function  gtk_style_ref (style:PGtkStyle):PGtkStyle; name 'gtk_style_ref';
procedure gtk_style_unref(style:PGtkStyle); name 'gtk_style_unref';
procedure gtk_style_set_background(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType); name 'gtk_style_set_background';
procedure gtk_style_apply_default_background(style:PGtkStyle; window:PGdkWindow; set_bg:gboolean; state_type:TGtkStateType; area:PGdkRectangle; x:gint; y:gint; width:gint; height:gint); name 'gtk_style_apply_default_background';
procedure gtk_draw_hline(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; x1:gint; x2:gint; y:gint); name 'gtk_draw_hline';
procedure gtk_draw_vline(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; y1:gint; y2:gint; x:gint); name 'gtk_draw_vline';
procedure gtk_draw_shadow(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; x:gint; y:gint; width:gint; height:gint); name 'gtk_draw_shadow';
procedure gtk_draw_polygon(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; points:PGdkPoint; npoints:gint; fill:gboolean); name 'gtk_draw_polygon';
procedure gtk_draw_arrow(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; arrow_type:TGtkArrowType; fill:gboolean; x:gint; y:gint; width:gint; height:gint); name 'gtk_draw_arrow';
procedure gtk_draw_diamond(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; x:gint; y:gint; width:gint; height:gint); name 'gtk_draw_diamond';
procedure gtk_draw_oval(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; x:gint; y:gint; width:gint; height:gint); name 'gtk_draw_oval';
procedure gtk_draw_string(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; x:gint; y:gint; thestring:Pgchar); name 'gtk_draw_string';
procedure gtk_draw_box(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; x:gint; y:gint; width:gint; height:gint); name 'gtk_draw_box';
procedure gtk_draw_flat_box(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; x:gint; y:gint; width:gint; height:gint); name 'gtk_draw_flat_box';
procedure gtk_draw_check(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; x:gint; y:gint; width:gint; height:gint); name 'gtk_draw_check';
procedure gtk_draw_option(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; x:gint; y:gint; width:gint; height:gint); name 'gtk_draw_option';
procedure gtk_draw_cross(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; x:gint; y:gint; width:gint; height:gint); name 'gtk_draw_cross';
procedure gtk_draw_ramp(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; arrow_type:TGtkArrowType; x:gint; y:gint; width:gint; height:gint); name 'gtk_draw_ramp';
procedure gtk_draw_tab(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; x:gint; y:gint; width:gint; height:gint); name 'gtk_draw_tab';
procedure gtk_draw_shadow_gap(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; x:gint; y:gint; width:gint; height:gint; gap_side:TGtkPositionType; gap_x:gint; gap_width:gint); name 'gtk_draw_shadow_gap';
procedure gtk_draw_box_gap(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; x:gint; y:gint; width:gint; height:gint; gap_side:TGtkPositionType; gap_x:gint; gap_width:gint); name 'gtk_draw_box_gap';
procedure gtk_draw_extension(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; x:gint; y:gint; width:gint; height:gint; gap_side:TGtkPositionType); name 'gtk_draw_extension';
procedure gtk_draw_focus(style:PGtkStyle; window:PGdkWindow; x:gint; y:gint; width:gint; height:gint); name 'gtk_draw_focus';
procedure gtk_draw_slider(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; x:gint; y:gint; width:gint; height:gint; orientation:TGtkOrientation); name 'gtk_draw_slider';
procedure gtk_draw_handle(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; x:gint; y:gint; width:gint; height:gint; orientation:TGtkOrientation); name 'gtk_draw_handle';
procedure gtk_paint_hline(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x1:gint; x2:gint; y:gint); name 'gtk_paint_hline';
procedure gtk_paint_vline(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; y1:gint; y2:gint; x:gint); name 'gtk_paint_vline';
procedure gtk_paint_shadow(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint); name 'gtk_paint_shadow';
procedure gtk_paint_polygon(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; points:PGdkPoint; npoints:gint; fill:gboolean); name 'gtk_paint_polygon';
procedure gtk_paint_arrow(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; arrow_type:TGtkArrowType; fill:gboolean; x:gint; y:gint; width:gint; height:gint); name 'gtk_paint_arrow';
procedure gtk_paint_diamond(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint); name 'gtk_paint_diamond';
procedure gtk_paint_oval(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint); name 'gtk_paint_oval';
procedure gtk_paint_string(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; thestring:Pgchar); name 'gtk_paint_string';
procedure gtk_paint_box(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint); name 'gtk_paint_box';
procedure gtk_paint_flat_box(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint); name 'gtk_paint_flat_box';
procedure gtk_paint_check(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint); name 'gtk_paint_check';
procedure gtk_paint_option(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint); name 'gtk_paint_option';
procedure gtk_paint_cross(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint); name 'gtk_paint_cross';
procedure gtk_paint_ramp(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; arrow_type:TGtkArrowType; x:gint; y:gint; width:gint; height:gint); name 'gtk_paint_ramp';
procedure gtk_paint_tab(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint); name 'gtk_paint_tab';
procedure gtk_paint_shadow_gap(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint; gap_side:TGtkPositionType; gap_x:gint; gap_width:gint); name 'gtk_paint_shadow_gap';
procedure gtk_paint_box_gap(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint; gap_side:TGtkPositionType; gap_x:gint; gap_width:gint); name 'gtk_paint_box_gap';
procedure gtk_paint_extension(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint; gap_side:TGtkPositionType); name 'gtk_paint_extension';
procedure gtk_paint_focus(style:PGtkStyle; window:PGdkWindow; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint); name 'gtk_paint_focus';
procedure gtk_paint_slider(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint; orientation:TGtkOrientation); name 'gtk_paint_slider';
procedure gtk_paint_handle(style:PGtkStyle; window:PGdkWindow; state_type:TGtkStateType; shadow_type:TGtkShadowType; area:PGdkRectangle; widget:PGtkWidget; detail:Pgchar; x:gint; y:gint; width:gint; height:gint; orientation:TGtkOrientation); name 'gtk_paint_handle';

function  GTK_LABEL_TYPE:TGtkType; name 'gtk_label_get_type';
function  gtk_label_get_type:TGtkType; name 'gtk_label_get_type';
function  gtk_label_new (str:pchar):PGtkWidget; name 'gtk_label_new';
procedure gtk_label_set_text(theLabel: PGtkLabel; str:pchar); name 'gtk_label_set_text';
procedure gtk_label_set_justify(thelabel:PGtkLabel; jtype:TGtkJustification); name 'gtk_label_set_justify';
procedure gtk_label_set_pattern(thelabel:PGtkLabel; pattern:Pgchar); name 'gtk_label_set_pattern';
procedure gtk_label_set_line_wrap(thelabel:PGtkLabel; wrap:gboolean); name 'gtk_label_set_line_wrap';
procedure gtk_label_get(thelabel:PGtkLabel; str:ppchar); name 'gtk_label_get';
function  gtk_label_parse_uline(thelabel:PGtkLabel;thestring:Pgchar):guint; name 'gtk_label_parse_uline';

function  GTK_ACCEL_LABEL_TYPE:TGtkType; name 'gtk_accel_label_get_type';
function  gtk_accel_label_get_type:TGtkType; name 'gtk_accel_label_get_type';
function  gtk_accel_label_new(thestring:Pgchar):PGtkWidget; name 'gtk_accel_label_new';
function  gtk_accel_label_get_accel_width(accel_label:PGtkAccelLabel):guint; name 'gtk_accel_label_get_accel_width';
procedure gtk_accel_label_set_accel_widget(accel_label:PGtkAccelLabel; accel_widget:PGtkWidget); name 'gtk_accel_label_set_accel_widget';
function  gtk_accel_label_refetch(accel_label:PGtkAccelLabel):gboolean; name 'gtk_accel_label_refetch';
 
 
 
 
 
function  gtk_theme_engine_get(pname:Pgchar):PGtkThemeEngine; name 'gtk_theme_engine_get';
procedure gtk_theme_engine_ref(engine:PGtkThemeEngine); name 'gtk_theme_engine_ref';
procedure gtk_theme_engine_unref(engine:PGtkThemeEngine); name 'gtk_theme_engine_unref';
{procedure gtk_themes_init(argc:plongint; argv:pppchar); name 'gtk_themes_init';
procedure gtk_themes_exit(error_code:gint); name 'gtk_themes_exit';
}
function  GTK_COMBO_TYPE:TGtkType; name 'gtk_combo_get_type';
function  gtk_combo_get_type:TGtkType; name 'gtk_combo_get_type';
function  gtk_combo_new : PGtkWidget; name 'gtk_combo_new';
procedure gtk_combo_set_value_in_list(combo:PGtkCombo; val:gint; ok_if_empty:gint); name 'gtk_combo_set_value_in_list';
procedure gtk_combo_set_use_arrows(combo:PGtkCombo; val:gint); name 'gtk_combo_set_use_arrows';
procedure gtk_combo_set_use_arrows_always(combo:PGtkCombo; val:gint); name 'gtk_combo_set_use_arrows_always';
procedure gtk_combo_set_case_sensitive(combo:PGtkCombo; val:gint); name 'gtk_combo_set_case_sensitive';
procedure gtk_combo_set_item_string(combo:PGtkCombo; item:PGtkItem; item_value:Pgchar); name 'gtk_combo_set_item_string';
procedure gtk_combo_set_popdown_strings(combo:PGtkCombo; strings:PGList); name 'gtk_combo_set_popdown_strings';
procedure gtk_combo_disable_activate(combo:PGtkCombo); name 'gtk_combo_disable_activate';

function  GTK_COLOR_SELECTION_TYPE:TGtkType; name 'gtk_color_selection_get_type';
function  gtk_color_selection_get_type:TGtkType; name 'gtk_color_selection_get_type';
function  gtk_color_selection_new:PGtkWidget; name 'gtk_color_selection_new';
procedure gtk_color_selection_set_update_policy(colorsel:PGtkColorSelection; policy:TGtkUpdateType); name 'gtk_color_selection_set_update_policy';
procedure gtk_color_selection_set_opacity(colorsel:PGtkColorSelection; use_opacity:gint); name 'gtk_color_selection_set_opacity';
procedure gtk_color_selection_set_color(colorsel:PGtkColorSelection; color:Pgdouble); name 'gtk_color_selection_set_color';
procedure gtk_color_selection_get_color(colorsel:PGtkColorSelection; color:Pgdouble); name 'gtk_color_selection_get_color';
function  gtk_color_selection_dialog_get_type:guint; name 'gtk_color_selection_dialog_get_type';
function  gtk_color_selection_dialog_new (title:Pgchar):PGtkWidget; name 'gtk_color_selection_dialog_new';

function  GTK_GAMMA_CURVE_TYPE:TGtkType; name 'gtk_gamma_curve_get_type';
function  gtk_gamma_curve_get_type:TGtkType; name 'gtk_gamma_curve_get_type';
function  gtk_gamma_curve_new :PGtkWidget; name 'gtk_gamma_curve_new';

function  GTK_STATUSBAR_TYPE:TGtkType; name 'gtk_statusbar_get_type';
function  gtk_statusbar_get_type:TGtkType; name 'gtk_statusbar_get_type';
function  gtk_statusbar_new:PGtkWidget; name 'gtk_statusbar_new';
function  gtk_statusbar_get_context_id(statusbar:PGtkStatusbar; context_description:Pgchar):guint; name 'gtk_statusbar_get_context_id';
function  gtk_statusbar_push(statusbar:PGtkStatusbar; context_id:guint; thetext:Pgchar):guint; name 'gtk_statusbar_push';
procedure gtk_statusbar_pop(statusbar:PGtkStatusbar; context_id:guint); name 'gtk_statusbar_pop';
procedure gtk_statusbar_remove(statusbar:PGtkStatusbar; context_id:guint; message_id:guint); name 'gtk_statusbar_remove';

function  GTK_CLIST_TYPE:TGtkType; name 'gtk_clist_get_type';
function  gtk_clist_get_type:TGtkType; name 'gtk_clist_get_type';
procedure gtk_clist_construct(clist:PGtkCList; columns:gint; titles:PPgchar); name 'gtk_clist_construct';
function  gtk_clist_new (columns:gint):PGtkWidget; name 'gtk_clist_new';
function  gtk_clist_new_with_titles (columns:gint; titles:PPgchar):PGtkWidget; name 'gtk_clist_new_with_titles';
procedure gtk_clist_set_hadjustment(clist:PGtkCList; adjustment:PGtkAdjustment); name 'gtk_clist_set_hadjustment';
procedure gtk_clist_set_vadjustment(clist:PGtkCList; adjustment:PGtkAdjustment); name 'gtk_clist_set_vadjustment';
function  gtk_clist_get_hadjustment(clist:PGtkCList):PGtkAdjustment; name 'gtk_clist_get_hadjustment';
function  gtk_clist_get_vadjustment(clist:PGtkCList):PGtkAdjustment; name 'gtk_clist_get_vadjustment';
procedure gtk_clist_set_shadow_type(clist:PGtkCList; thetype:TGtkShadowType); name 'gtk_clist_set_shadow_type';
procedure gtk_clist_set_selection_mode(clist:PGtkCList; mode:TGtkSelectionMode); name 'gtk_clist_set_selection_mode';
procedure gtk_clist_set_reorderable(clist:PGtkCList; reorderable:gboolean); name 'gtk_clist_set_reorderable';
procedure gtk_clist_set_use_drag_icons(clist:PGtkCList; use_icons:gboolean); name 'gtk_clist_set_use_drag_icons';
procedure gtk_clist_set_button_actions(clist:PGtkCList; button:guint; button_actions:guint8); name 'gtk_clist_set_button_actions';
procedure gtk_clist_freeze(clist:PGtkCList); name 'gtk_clist_freeze';
procedure gtk_clist_thaw(clist:PGtkCList); name 'gtk_clist_thaw';
procedure gtk_clist_column_titles_show(clist:PGtkCList); name 'gtk_clist_column_titles_show';
procedure gtk_clist_column_titles_hide(clist:PGtkCList); name 'gtk_clist_column_titles_hide';
procedure gtk_clist_column_title_active(clist:PGtkCList; column:gint); name 'gtk_clist_column_title_active';
procedure gtk_clist_column_title_passive(clist:PGtkCList; column:gint); name 'gtk_clist_column_title_passive';
procedure gtk_clist_column_titles_active(clist:PGtkCList); name 'gtk_clist_column_titles_active';
procedure gtk_clist_column_titles_passive(clist:PGtkCList); name 'gtk_clist_column_titles_passive';
procedure gtk_clist_set_column_title(clist:PGtkCList; column:gint; title:Pgchar); name 'gtk_clist_set_column_title';
function  gtk_clist_get_column_title(clist:PGtkCList; column:gint):Pgchar; name 'gtk_clist_get_column_title';
procedure gtk_clist_set_column_widget(clist:PGtkCList; column:gint; widget:PGtkWidget); name 'gtk_clist_set_column_widget';
function  gtk_clist_get_column_widget(clist:PGtkCList; column:gint):PGtkWidget; name 'gtk_clist_get_column_widget';
procedure gtk_clist_set_column_justification(clist:PGtkCList; column:gint; justification:TGtkJustification); name 'gtk_clist_set_column_justification';
procedure gtk_clist_set_column_visibility(clist:PGtkCList; column:gint; visible:gboolean); name 'gtk_clist_set_column_visibility';
procedure gtk_clist_set_column_resizeable(clist:PGtkCList; column:gint; resizeable:gboolean); name 'gtk_clist_set_column_resizeable';
procedure gtk_clist_set_column_auto_resize(clist:PGtkCList; column:gint; auto_resize:gboolean); name 'gtk_clist_set_column_auto_resize';
function  gtk_clist_columns_autosize(clist:PGtkCList):gint; name 'gtk_clist_columns_autosize';
function  gtk_clist_optimal_column_width(clist:PGtkCList; column:gint):gint; name 'gtk_clist_optimal_column_width';
procedure gtk_clist_set_column_width(clist:PGtkCList; column:gint; width:gint); name 'gtk_clist_set_column_width';
procedure gtk_clist_set_column_min_width(clist:PGtkCList; column:gint; min_width:gint); name 'gtk_clist_set_column_min_width';
procedure gtk_clist_set_column_max_width(clist:PGtkCList; column:gint; max_width:gint); name 'gtk_clist_set_column_max_width';
procedure gtk_clist_set_row_height(clist:PGtkCList; height:guint); name 'gtk_clist_set_row_height';
procedure gtk_clist_moveto(clist:PGtkCList; row:gint; column:gint; row_align:gfloat; col_align:gfloat); name 'gtk_clist_moveto';
function  gtk_clist_row_is_visible(clist:PGtkCList; row:gint):TGtkVisibility; name 'gtk_clist_row_is_visible';
function  gtk_clist_get_cell_type(clist:PGtkCList; row:gint; column:gint):TGtkCellType; name 'gtk_clist_get_cell_type';
procedure gtk_clist_set_text(clist:PGtkCList; row:gint; column:gint; thetext:Pgchar); name 'gtk_clist_set_text';
function  gtk_clist_get_text(clist:PGtkCList; row:gint; column:gint; thetext:PPgchar):gint; name 'gtk_clist_get_text';
procedure gtk_clist_set_pixmap(clist:PGtkCList; row:gint; column:gint; pixmap:PGdkPixmap; mask:PGdkBitmap); name 'gtk_clist_set_pixmap';
function  gtk_clist_get_pixmap(clist:PGtkCList; row:gint; column:gint; pixmap:PPGdkPixmap; mask:PPGdkBitmap):gint; name 'gtk_clist_get_pixmap';
procedure gtk_clist_set_pixtext(clist:PGtkCList; row:gint; column:gint; thetext:Pgchar; spacing:guint8;pixmap:PGdkPixmap; mask:PGdkBitmap); name 'gtk_clist_set_pixtext';
function  gtk_clist_get_pixtext(clist:PGtkCList; row:gint; column:gint; thetext:PPgchar; spacing:Pguint8;pixmap:PPGdkPixmap; mask:PPGdkBitmap):gint; name 'gtk_clist_get_pixtext';
procedure gtk_clist_set_foreground(clist:PGtkCList; row:gint; color:PGdkColor); name 'gtk_clist_set_foreground';
procedure gtk_clist_set_background(clist:PGtkCList; row:gint; color:PGdkColor); name 'gtk_clist_set_background';
procedure gtk_clist_set_cell_style(clist:PGtkCList; row:gint; column:gint; style:PGtkStyle); name 'gtk_clist_set_cell_style';
function  gtk_clist_get_cell_style(clist:PGtkCList; row:gint; column:gint):PGtkStyle; name 'gtk_clist_get_cell_style';
procedure gtk_clist_set_row_style(clist:PGtkCList; row:gint; style:PGtkStyle); name 'gtk_clist_set_row_style';
function  gtk_clist_get_row_style(clist:PGtkCList; row:gint):PGtkStyle; name 'gtk_clist_get_row_style';
procedure gtk_clist_set_shift(clist:PGtkCList; row:gint; column:gint; vertical:gint; horizontal:gint); name 'gtk_clist_set_shift';
function  gtk_clist_prepend(clist:PGtkCList; thetext:PPgchar):gint; name 'gtk_clist_prepend';
function  gtk_clist_append(clist:PGtkCList; thetext:PPgchar):gint; name 'gtk_clist_append';
procedure gtk_clist_insert(clist:PGtkCList; row:gint; thetext:PPgchar); name 'gtk_clist_insert';
procedure gtk_clist_remove(clist:PGtkCList; row:gint); name 'gtk_clist_remove';
procedure gtk_clist_set_row_data(clist:PGtkCList; row:gint; data:gpointer); name 'gtk_clist_set_row_data';
procedure gtk_clist_set_row_data_full(clist:PGtkCList; row:gint; data:gpointer; destroy:TGtkDestroyNotify); name 'gtk_clist_set_row_data_full';
function  gtk_clist_get_row_data(clist:PGtkCList; row:gint):gpointer; name 'gtk_clist_get_row_data';
function  gtk_clist_find_row_from_data(clist:PGtkCList; data:gpointer):gint; name 'gtk_clist_find_row_from_data';
procedure gtk_clist_select_row(clist:PGtkCList; row:gint; column:gint); name 'gtk_clist_select_row';
procedure gtk_clist_unselect_row(clist:PGtkCList; row:gint; column:gint); name 'gtk_clist_unselect_row';
procedure gtk_clist_clear(clist:PGtkCList); name 'gtk_clist_clear';
function  gtk_clist_get_selection_info(clist:PGtkCList; x:gint; y:gint; row:Pgint; column:Pgint):gint; name 'gtk_clist_get_selection_info';
procedure gtk_clist_select_all(clist:PGtkCList); name 'gtk_clist_select_all';
procedure gtk_clist_unselect_all(clist:PGtkCList); name 'gtk_clist_unselect_all';
procedure gtk_clist_swap_rows(clist:PGtkCList; row1:gint; row2:gint); name 'gtk_clist_swap_rows';
procedure gtk_clist_row_move(clist:PGtkCList; source_row:gint; dest_row:gint); name 'gtk_clist_row_move';
procedure gtk_clist_set_compare_func(clist:PGtkCList; cmp_func:TGtkCListCompareFunc); name 'gtk_clist_set_compare_func';
procedure gtk_clist_set_sort_column(clist:PGtkCList; column:gint); name 'gtk_clist_set_sort_column';
procedure gtk_clist_set_sort_type(clist:PGtkCList; sort_type:TGtkSortType); name 'gtk_clist_set_sort_type';
procedure gtk_clist_sort(clist:PGtkCList); name 'gtk_clist_sort';
procedure gtk_clist_set_auto_sort(clist:PGtkCList; auto_sort:gboolean); name 'gtk_clist_set_auto_sort';
function  GTK_CTREE_TYPE:TGtkType; name 'gtk_ctree_get_type';
function  gtk_ctree_get_type:TGtkType; name 'gtk_ctree_get_type';
procedure gtk_ctree_construct(ctree:PGtkCTree; columns:gint; tree_column:gint; titles:Pgchar); name 'gtk_ctree_construct';
function  gtk_ctree_new_with_titles(columns:gint; tree_column:gint; titles:Pgchar):PGtkWidget; name 'gtk_ctree_new_with_titles';
function  gtk_ctree_new(columns:gint; tree_column:gint):PGtkWidget; name 'gtk_ctree_new';
function  gtk_ctree_insert_node(ctree:PGtkCTree; parent:PGtkCTreeNode; sibling:PGtkCTreeNode; text:Pgchar; spacing:guint8; pixmap_closed:PGdkPixmap; mask_closed:PGdkBitmap; pixmap_opened:PGdkPixmap; mask_opened:PGdkBitmap; is_leaf:gboolean; expanded:gboolean):PGtkCTreeNode; name 'gtk_ctree_insert_node';
procedure gtk_ctree_remove_node(ctree:PGtkCTree; node:PGtkCTreeNode); name 'gtk_ctree_remove_node';
function  gtk_ctree_insert_gnode(ctree:PGtkCTree; parent:PGtkCTreeNode; sibling:PGtkCTreeNode; gnode:PGNode; func:TGtkCTreeGNodeFunc; data:gpointer):PGtkCTreeNode; name 'gtk_ctree_insert_gnode';
function  gtk_ctree_export_to_gnode(ctree:PGtkCTree; parent:PGNode; sibling:PGNode; node:PGtkCTreeNode; func:TGtkCTreeGNodeFunc; data:gpointer):PGNode; name 'gtk_ctree_export_to_gnode';
procedure gtk_ctree_post_recursive(ctree:PGtkCTree; node:PGtkCTreeNode; func:TGtkCTreeFunc; data:gpointer); name 'gtk_ctree_post_recursive';
procedure gtk_ctree_post_recursive_to_depth(ctree:PGtkCTree; node:PGtkCTreeNode; depth:gint; func:TGtkCTreeFunc; data:gpointer); name 'gtk_ctree_post_recursive_to_depth';
procedure gtk_ctree_pre_recursive(ctree:PGtkCTree; node:PGtkCTreeNode; func:TGtkCTreeFunc; data:gpointer); name 'gtk_ctree_pre_recursive';
procedure gtk_ctree_pre_recursive_to_depth(ctree:PGtkCTree; node:PGtkCTreeNode; depth:gint; func:TGtkCTreeFunc; data:gpointer); name 'gtk_ctree_pre_recursive_to_depth';
function  gtk_ctree_is_viewable(ctree:PGtkCTree; node:PGtkCTreeNode):gboolean; name 'gtk_ctree_is_viewable';
function  gtk_ctree_last(ctree:PGtkCTree; node:PGtkCTreeNode):PGtkCTreeNode; name 'gtk_ctree_last';
function  gtk_ctree_find_node_ptr(ctree:PGtkCTree; ctree_row:PGtkCTreeRow):PGtkCTreeNode; name 'gtk_ctree_find_node_ptr';
function  gtk_ctree_node_nth(ctree:PGtkCTree; row:guint):PGtkCTreeNode; name 'gtk_ctree_node_nth';
function  gtk_ctree_find(ctree:PGtkCTree; node:PGtkCTreeNode; child:PGtkCTreeNode):gboolean; name 'gtk_ctree_find';
function  gtk_ctree_is_ancestor(ctree:PGtkCTree; node:PGtkCTreeNode; child:PGtkCTreeNode):gboolean; name 'gtk_ctree_is_ancestor';
function  gtk_ctree_find_by_row_data(ctree:PGtkCTree; node:PGtkCTreeNode; data:gpointer):PGtkCTreeNode; name 'gtk_ctree_find_by_row_data';
function  gtk_ctree_find_all_by_row_data(ctree:PGtkCTree; node:PGtkCTreeNode; data:gpointer):PGList; name 'gtk_ctree_find_all_by_row_data';
function  gtk_ctree_find_by_row_data_custom(ctree:PGtkCTree; node:PGtkCTreeNode; data:gpointer; func:TGCompareFunc):PGtkCTreeNode; name 'gtk_ctree_find_by_row_data_custom';
function  gtk_ctree_find_all_by_row_data_custom(ctree:PGtkCTree; node:PGtkCTreeNode; data:gpointer; func:TGCompareFunc):PGList; name 'gtk_ctree_find_all_by_row_data_custom';
function  gtk_ctree_is_hot_spot(ctree:PGtkCTree; x:gint; y:gint):gboolean; name 'gtk_ctree_is_hot_spot';
procedure gtk_ctree_node_set_text(ctree:PGtkCTree; node:PGtkCTreeNode; column:gint; text:Pgchar); name 'gtk_ctree_node_set_text';
procedure gtk_ctree_node_set_pixmap(ctree:PGtkCTree; node:PGtkCTreeNode; column:gint; pixmap:PGdkPixmap; mask:PGdkBitmap); name 'gtk_ctree_node_set_pixmap';
procedure gtk_ctree_node_set_pixtext(ctree:PGtkCTree; node:PGtkCTreeNode; column:gint; text:Pgchar; spacing:guint8; pixmap:PGdkPixmap; mask:PGdkBitmap); name 'gtk_ctree_node_set_pixtext';
procedure gtk_ctree_set_node_info(ctree:PGtkCTree; node:PGtkCTreeNode; text:Pgchar; spacing:guint8; pixmap_closed:PGdkPixmap; mask_closed:PGdkBitmap; pixmap_opened:PGdkPixmap; mask_opened:PGdkBitmap; is_leaf:gboolean; expanded:gboolean); name 'gtk_ctree_set_node_info';
procedure gtk_ctree_node_set_shift(ctree:PGtkCTree; node:PGtkCTreeNode; column:gint; vertical:gint; horizontal:gint); name 'gtk_ctree_node_set_shift';
function  gtk_ctree_node_get_selectable(ctree:PGtkCTree; node:PGtkCTreeNode):gboolean; name 'gtk_ctree_node_get_selectable';
function  gtk_ctree_node_get_cell_type(ctree:PGtkCTree; node:PGtkCTreeNode; column:gint):TGtkCellType; name 'gtk_ctree_node_get_cell_type';
function  gtk_ctree_node_get_text(ctree:PGtkCTree; node:PGtkCTreeNode; column:gint; text:PPgchar):gint; name 'gtk_ctree_node_get_text';
function  gtk_ctree_node_get_pixmap(ctree:PGtkCTree; node:PGtkCTreeNode; column:gint; pixmap:PPGdkPixmap; mask:PPGdkBitmap):gint; name 'gtk_ctree_node_get_pixmap';
function  gtk_ctree_node_get_pixtext(ctree:PGtkCTree; node:PGtkCTreeNode; column:gint; text:PPgchar; spacing:Pguint8; pixmap:PPGdkPixmap; mask:PPGdkBitmap):gint; name 'gtk_ctree_node_get_pixtext';
function  gtk_ctree_get_node_info(ctree:PGtkCTree; node:PGtkCTreeNode; text:PPgchar; spacing:Pguint8; pixmap_closed:PPGdkPixmap; mask_closed:PPGdkBitmap; pixmap_opened:PPGdkPixmap; mask_opened:PPGdkBitmap; is_leaf:Pgboolean; expanded:Pgboolean):gint; name 'gtk_ctree_get_node_info';
procedure gtk_ctree_node_set_row_style(ctree:PGtkCTree; node:PGtkCTreeNode; style:PGtkStyle); name 'gtk_ctree_node_set_row_style';
function  gtk_ctree_node_get_row_style(ctree:PGtkCTree; node:PGtkCTreeNode):PGtkStyle; name 'gtk_ctree_node_get_row_style';
procedure gtk_ctree_node_set_cell_style(ctree:PGtkCTree; node:PGtkCTreeNode; column:gint; style:PGtkStyle); name 'gtk_ctree_node_set_cell_style';
function  gtk_ctree_node_get_cell_style(ctree:PGtkCTree; node:PGtkCTreeNode; column:gint):PGtkStyle; name 'gtk_ctree_node_get_cell_style';
procedure gtk_ctree_node_set_foreground(ctree:PGtkCTree; node:PGtkCTreeNode; color:PGdkColor); name 'gtk_ctree_node_set_foreground';
procedure gtk_ctree_node_set_background(ctree:PGtkCTree; node:PGtkCTreeNode; color:PGdkColor); name 'gtk_ctree_node_set_background';
procedure gtk_ctree_node_set_row_data(ctree:PGtkCTree; node:PGtkCTreeNode; data:gpointer); name 'gtk_ctree_node_set_row_data';
procedure gtk_ctree_node_set_row_data_full(ctree:PGtkCTree; node:PGtkCTreeNode; data:gpointer; destroy:TGtkDestroyNotify); name 'gtk_ctree_node_set_row_data_full';
function  gtk_ctree_node_get_row_data(ctree:PGtkCTree; node:PGtkCTreeNode):gpointer; name 'gtk_ctree_node_get_row_data';
procedure gtk_ctree_node_moveto(ctree:PGtkCTree; node:PGtkCTreeNode; column:gint; row_align:gfloat; col_align:gfloat); name 'gtk_ctree_node_moveto';
function  gtk_ctree_node_is_visible(ctree:PGtkCTree; node:PGtkCTreeNode):TGtkVisibility; name 'gtk_ctree_node_is_visible';
procedure gtk_ctree_set_indent(ctree:PGtkCTree; indent:gint); name 'gtk_ctree_set_indent';
procedure gtk_ctree_set_spacing(ctree:PGtkCTree; spacing:gint); name 'gtk_ctree_set_spacing';
procedure gtk_ctree_set_show_stub(ctree:PGtkCTree; show_stub:gboolean); name 'gtk_ctree_set_show_stub';
procedure gtk_ctree_set_line_style(ctree:PGtkCTree; line_style:TGtkCTreeLineStyle); name 'gtk_ctree_set_line_style';
procedure gtk_ctree_set_expander_style(ctree:PGtkCTree; expander_style:TGtkCTreeExpanderStyle); name 'gtk_ctree_set_expander_style';
procedure gtk_ctree_set_drag_compare_func(ctree:PGtkCTree; cmp_func:TGtkCTreeCompareDragFunc); name 'gtk_ctree_set_drag_compare_func';
procedure gtk_ctree_sort_node(ctree:PGtkCTree; node:PGtkCTreeNode); name 'gtk_ctree_sort_node';
procedure gtk_ctree_sort_recursive(ctree:PGtkCTree; node:PGtkCTreeNode); name 'gtk_ctree_sort_recursive';
function  GTK_NOTEBOOK_TYPE:TGtkType; name 'gtk_notebook_get_type';
function  gtk_notebook_get_type:TGtkType; name 'gtk_notebook_get_type';
function  gtk_notebook_new:PGtkWidget; name 'gtk_notebook_new';
procedure gtk_notebook_append_page(notebook:PGtkNotebook; child:PGtkWidget; tab_label:PGtkWidget); name 'gtk_notebook_append_page';
procedure gtk_notebook_append_page_menu(notebook:PGtkNotebook; child:PGtkWidget; tab_label:PGtkWidget; menu_label:PGtkWidget); name 'gtk_notebook_append_page_menu';
procedure gtk_notebook_prepend_page(notebook:PGtkNotebook; child:PGtkWidget; tab_label:PGtkWidget); name 'gtk_notebook_prepend_page';
procedure gtk_notebook_prepend_page_menu(notebook:PGtkNotebook; child:PGtkWidget; tab_label:PGtkWidget; menu_label:PGtkWidget); name 'gtk_notebook_prepend_page_menu';
procedure gtk_notebook_insert_page(notebook:PGtkNotebook; child:PGtkWidget; tab_label:PGtkWidget; position:gint); name 'gtk_notebook_insert_page';
procedure gtk_notebook_insert_page_menu(notebook:PGtkNotebook; child:PGtkWidget; tab_label:PGtkWidget; menu_label:PGtkWidget; position:gint); name 'gtk_notebook_insert_page_menu';
procedure gtk_notebook_remove_page(notebook:PGtkNotebook; page_num:gint); name 'gtk_notebook_remove_page';
function  gtk_notebook_get_current_page(notebook:PGtkNotebook):gint; name 'gtk_notebook_get_current_page';
function  gtk_notebook_get_nth_page(notebook:PGtkNotebook; page_num:gint):PGtkWidget; name 'gtk_notebook_get_nth_page';
function  gtk_notebook_page_num(notebook:PGtkNotebook; child:PGtkWidget):gint; name 'gtk_notebook_page_num';
procedure gtk_notebook_set_page(notebook:PGtkNotebook; page_num:gint); name 'gtk_notebook_set_page';
procedure gtk_notebook_next_page(notebook:PGtkNotebook); name 'gtk_notebook_next_page';
procedure gtk_notebook_prev_page(notebook:PGtkNotebook); name 'gtk_notebook_prev_page';
procedure gtk_notebook_set_show_border(notebook:PGtkNotebook; show_border:gboolean); name 'gtk_notebook_set_show_border';
procedure gtk_notebook_set_show_tabs(notebook:PGtkNotebook; show_tabs:gboolean); name 'gtk_notebook_set_show_tabs';
procedure gtk_notebook_set_tab_pos(notebook:PGtkNotebook; pos:TGtkPositionType); name 'gtk_notebook_set_tab_pos';
procedure gtk_notebook_set_homogeneous_tabs(notebook:PGtkNotebook; homogeneous:gboolean); name 'gtk_notebook_set_homogeneous_tabs';
procedure gtk_notebook_set_tab_border(notebook:PGtkNotebook; border_width:guint); name 'gtk_notebook_set_tab_border';
procedure gtk_notebook_set_tab_hborder(notebook:PGtkNotebook; tab_hborder:guint); name 'gtk_notebook_set_tab_hborder';
procedure gtk_notebook_set_tab_vborder(notebook:PGtkNotebook; tab_vborder:guint); name 'gtk_notebook_set_tab_vborder';
procedure gtk_notebook_set_scrollable(notebook:PGtkNotebook; scrollable:gboolean); name 'gtk_notebook_set_scrollable';
procedure gtk_notebook_popup_enable(notebook:PGtkNotebook); name 'gtk_notebook_popup_enable';
procedure gtk_notebook_popup_disable(notebook:PGtkNotebook); name 'gtk_notebook_popup_disable';
function  gtk_notebook_get_tab_label(notebook:PGtkNotebook; child:PGtkWidget):PGtkWidget; name 'gtk_notebook_get_tab_label';
procedure gtk_notebook_set_tab_label(notebook:PGtkNotebook; child:PGtkWidget; tab_label:PGtkWidget); name 'gtk_notebook_set_tab_label';
procedure gtk_notebook_set_tab_label_text(notebook:PGtkNotebook; child:PGtkWidget; tab_text:Pgchar); name 'gtk_notebook_set_tab_label_text';
function  gtk_notebook_get_menu_label(notebook:PGtkNotebook; child:PGtkWidget):PGtkWidget; name 'gtk_notebook_get_menu_label';
procedure gtk_notebook_set_menu_label(notebook:PGtkNotebook; child:PGtkWidget; menu_label:PGtkWidget); name 'gtk_notebook_set_menu_label';
procedure gtk_notebook_set_menu_label_text(notebook:PGtkNotebook; child:PGtkWidget; menu_text:Pgchar); name 'gtk_notebook_set_menu_label_text';
procedure gtk_notebook_query_tab_label_packing(notebook:PGtkNotebook; child:PGtkWidget; expand:Pgboolean; fill:Pgboolean; pack_type:PGtkPackType); name 'gtk_notebook_query_tab_label_packing';
procedure gtk_notebook_set_tab_label_packing(notebook:PGtkNotebook; child:PGtkWidget; expand:gboolean; fill:gboolean; pack_type:TGtkPackType); name 'gtk_notebook_set_tab_label_packing';
procedure gtk_notebook_reorder_child(notebook:PGtkNotebook; child:PGtkWidget; position:gint); name 'gtk_notebook_reorder_child';

function  GTK_CALENDAR_TYPE:TGtkType; name 'gtk_calendar_get_type';
function  gtk_calendar_get_type:TGtkType; name 'gtk_calendar_get_type';
function  gtk_calendar_new:PGtkWidget; name 'gtk_calendar_new';
function  gtk_calendar_select_month(calendar:PGtkCalendar; month:guint; year:guint):gint; name 'gtk_calendar_select_month';
procedure gtk_calendar_select_day(calendar:PGtkCalendar; day:guint); name 'gtk_calendar_select_day';
function  gtk_calendar_mark_day(calendar:PGtkCalendar; day:guint):gint; name 'gtk_calendar_mark_day';
function  gtk_calendar_unmark_day(calendar:PGtkCalendar; day:guint):gint; name 'gtk_calendar_unmark_day';
procedure gtk_calendar_clear_marks(calendar:PGtkCalendar); name 'gtk_calendar_clear_marks';
procedure gtk_calendar_display_options(calendar:PGtkCalendar; flags:TGtkCalendarDisplayOptions); name 'gtk_calendar_display_options';
procedure gtk_calendar_get_date(calendar:PGtkCalendar; year:Pguint; month:Pguint; day:Pguint); name 'gtk_calendar_get_date';
procedure gtk_calendar_freeze(calendar:PGtkCalendar); name 'gtk_calendar_freeze';
procedure gtk_calendar_thaw(calendar:PGtkCalendar); name 'gtk_calendar_thaw';
function  GTK_FONT_SELECTION_TYPE:TGtkType; name 'gtk_font_selection_get_type';
function  gtk_font_selection_get_type:TGtkType; name 'gtk_font_selection_get_type';
function  gtk_font_selection_new:PGtkWidget; name 'gtk_font_selection_new';
function  gtk_font_selection_get_font_name(fontsel:PGtkFontSelection):Pgchar; name 'gtk_font_selection_get_font_name';
function  gtk_font_selection_get_font(fontsel:PGtkFontSelection):PGdkFont; name 'gtk_font_selection_get_font';
function  gtk_font_selection_set_font_name(fontsel:PGtkFontSelection; fontname:Pgchar):gboolean; name 'gtk_font_selection_set_font_name';
procedure gtk_font_selection_set_filter(fontsel:PGtkFontSelection; filter_type:TGtkFontFilterType; font_type:TGtkFontType; foundries:PPgchar; weights:PPgchar; slants:PPgchar; setwidths:PPgchar; spacings:PPgchar; charsets:PPgchar); name 'gtk_font_selection_set_filter';
function  gtk_font_selection_get_preview_text(fontsel:PGtkFontSelection):Pgchar; name 'gtk_font_selection_get_preview_text';
procedure gtk_font_selection_set_preview_text(fontsel:PGtkFontSelection; text:Pgchar); name 'gtk_font_selection_set_preview_text';
function  GTK_FONT_SELECTION_DIALOG_TYPE:TGtkType; name 'gtk_font_selection_dialog_get_type';
function  gtk_font_selection_dialog_get_type:TGtkType; name 'gtk_font_selection_dialog_get_type';
function  gtk_font_selection_dialog_new(title:Pgchar):PGtkWidget; name 'gtk_font_selection_dialog_new';
function  gtk_font_selection_dialog_get_font_name(fsd:PGtkFontSelectionDialog):Pgchar; name 'gtk_font_selection_dialog_get_font_name';
function  gtk_font_selection_dialog_get_font(fsd:PGtkFontSelectionDialog):PGdkFont; name 'gtk_font_selection_dialog_get_font';
function  gtk_font_selection_dialog_set_font_name(fsd:PGtkFontSelectionDialog; fontname:Pgchar):gboolean; name 'gtk_font_selection_dialog_set_font_name';
procedure gtk_font_selection_dialog_set_filter(fsd:PGtkFontSelectionDialog; filter_type:TGtkFontFilterType; font_type:TGtkFontType; foundries:PPgchar; weights:PPgchar; slants:PPgchar; setwidths:PPgchar; spacings:PPgchar; charsets:PPgchar); name 'gtk_font_selection_dialog_set_filter';
function  gtk_font_selection_dialog_get_preview_text(fsd:PGtkFontSelectionDialog):Pgchar; name 'gtk_font_selection_dialog_get_preview_text';
procedure gtk_font_selection_dialog_set_preview_text(fsd:PGtkFontSelectionDialog; text:Pgchar); name 'gtk_font_selection_dialog_set_preview_text';
end;

 
 
end public
 
 
 
function  GTK_CHECK_VERSION(major,minor,micro:longint):boolean;
begin
  exit((GTK_MAJOR_VERSION_CONST>major) or
     ((GTK_MAJOR_VERSION_CONST=major) and (GTK_MINOR_VERSION_CONST>minor)) or
     ((GTK_MAJOR_VERSION_CONST=major) and (GTK_MINOR_VERSION_CONST=minor) and (GTK_MICRO_VERSION_CONST>=micro)));
end;
 
 
 
 
 
 
 
    function GTK_OBJECT_TYPE(obj : PGtkobject) : TGtkType;
      begin
       exit(obj^.klass^.thetype);
      end;

    function GTK_OBJECT_SIGNALS(obj : PGtkobject) : Pguint;
      begin
         exit(obj^.klass^.signals);
      end;

    function GTK_OBJECT_NSIGNALS(obj : PGtkobject) : guint;
      begin
         exit(obj^.klass^.nsignals);
      end;

    function GTK_OBJECT_FLAGS(obj : PGtkobject) : longint;
      begin
         exit(obj^.flags);
      end;

    function GTK_OBJECT_DESTROYED(obj : PGtkobject) : boolean;
      begin
        exit((gtk_object_flags(obj)) and (GTK_DESTROYED as longint)<>0);
      end;

    function GTK_OBJECT_FLOATING(obj : PGtkobject) : boolean;
      begin
         exit((gtk_object_flags(obj)) and (GTK_FLOATING as longint)<>0);
      end;

    function GTK_OBJECT_CONNECTED(obj : PGtkobject) : boolean;
      begin
         exit(((gtk_object_flags(obj)) and (GTK_CONNECTED as longint)) <> 0);
      end;

    function GTK_OBJECT_IS_CONSTRUCTED(obj : PGtkobject) : boolean;
      begin
         exit(((gtk_object_flags(obj)) and (GTK_CONSTRUCTED as longint)) <> 0);
       end;

function  GTK_IS_OBJECT(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_OBJECT_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_OBJECT_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=(GTK_TYPE_OBJECT as longint)));
end;
 
 
 
 
function  GTK_CHECK_CLASS_TYPE(type_class:PGtkTypeClass;otype:TGtkType) : boolean;cdecl;
begin
	exit((type_class<>nil) and (gtk_type_is_a(type_class^.thetype,otype) <> 0));
end;

function  GTK_IS_IDENTIFIER(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_IDENTIFIER_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_IDENTIFIER_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_IDENTIFIER_TYPE));
end;

function  GTK_TYPE_MAKE(parent_t,seqno:TGtkType):TGtkType;
begin
	exit((seqno shl 8) or (GTK_FUNDAMENTAL_TYPE(parent_t) as longint));
end;

function  GTK_FUNDAMENTAL_TYPE(thetype : TGtkType) : TGtkFundamentalType;
begin
	exit(((thetype as longint) and $FF) as TGtkFundamentalType);
end;

function  GTK_TYPE_SEQNO(thetype : TGtkType) : TGtkType;
begin
  if (thetype as longint)>$FF then
    exit((thetype as longint) shr 8)
  else
    exit(thetype);
end;

function  GTK_VALUE_CHAR(const a : TGtkArg) : gchar;
begin
	exit(a.d.char_data);
end;

function  GTK_VALUE_UCHAR(const a : TGtkArg) : guchar;
begin
 	exit(a.d.uchar_data);
end;

function  GTK_VALUE_BOOL(const a : TGtkArg) : gboolean;
begin
	exit(a.d.bool_data);
end;

function  GTK_VALUE_INT(const a : TGtkArg) : gint;
begin
	exit(a.d.int_data);
end;

function  GTK_VALUE_UINT(const a : TGtkArg) : guint;
begin
	exit(a.d.uint_data);
end;

function  GTK_VALUE_LONG(const a : TGtkArg) : glong;
begin
	exit(a.d.long_data);
end;

function  GTK_VALUE_ULONG(const a : TGtkArg) : gulong;
begin
	exit(a.d.ulong_data);
end;

function  GTK_VALUE_FLOAT(const a : TGtkArg) : gfloat;
begin
	exit(a.d.float_data);
end;

function  GTK_VALUE_DOUBLE(const a : TGtkArg) : gdouble;
begin
  exit(a.d.double_data);
end;

function  GTK_VALUE_ENUM(const a : TGtkArg) : longint;
begin
	exit(a.d.int_data);
end;

function  GTK_VALUE_FLAGS(const a : TGtkArg) : longint;
begin
	exit(a.d.uint_data);
end;
function  GTK_VALUE_BOXED(const a : TGtkArg) : gpointer;
begin
  exit(a.d.pointer_data);
end;

function  GTK_VALUE_POINTER(const a : TGtkArg) : gpointer;
begin
	exit(a.d.pointer_data);
end;

function  GTK_VALUE_OBJECT(const a : TGtkArg): gpointer;
begin
	exit(a.d.object_data);
end;
 
function  GTK_RETLOC_CHAR(const a : TGtkArg) : Pgchar;
      begin
         exit(a.d.pointer_data as PGChar);
      end;

function  GTK_RETLOC_UCHAR(const a : TGtkArg) : Pguchar;
      begin
         exit(a.d.pointer_data as PGUChar);
      end;

function  GTK_RETLOC_BOOL(const a : TGtkArg) : Pgboolean;
      begin
         exit(a.d.pointer_data as PGBoolean);
      end;

function  GTK_RETLOC_INT(const a : TGtkArg) : Pgint;
      begin
         exit(a.d.pointer_data as PGInt);
      end;

function  GTK_RETLOC_UINT(const a : TGtkArg) : Pguint;
      begin
         exit(a.d.pointer_data as PGUint);
      end;

function  GTK_RETLOC_LONG(const a : TGtkArg) : Pglong;
      begin
         exit(a.d.pointer_data as PGLong);
      end;

function  GTK_RETLOC_ULONG(const a : TGtkArg) : Pgulong;
      begin
         exit(a.d.pointer_data as PGULong);
      end;

function  GTK_RETLOC_FLOAT(const a : TGtkArg) : Pgfloat;
      begin
         exit(a.d.pointer_data as PGFloat);
      end;

function  GTK_RETLOC_DOUBLE(const a : TGtkArg) : Pgdouble;
      begin
         exit(a.d.pointer_data as PGDOuble);
      end;

function  GTK_RETLOC_ENUM(const a : TGtkArg) : Pgint;
      begin
         exit(a.d.pointer_data as PGInt);
      end;

function  GTK_RETLOC_FLAGS(const a : TGtkArg) : Pguint;
      begin
         exit(a.d.pointer_data as PGUint);
      end;

function  GTK_RETLOC_BOXED(const a : TGtkArg) : Pgpointer;
      begin
         exit(a.d.pointer_data as PGPointer);
      end;

function  GTK_RETLOC_POINTER(const a : TGtkArg) : Pgpointer;
      begin
         exit(a.d.pointer_data as PGPointer);
      end;
 
 
 
 
function  GTK_IS_DATA(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_DATA_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_DATA_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_DATA_TYPE));
end;
 
 
 
 
function  GTK_IS_ADJUSTMENT(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_ADJUSTMENT_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_ADJUSTMENT_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_ADJUSTMENT_TYPE));
end;
 
 
 
 
 
 
 
 
function  GTK_WIDGET_STATE(wid : PGtkwidget) : longint;
      begin
         exit(wid^.state);
      end;

function  GTK_WIDGET_SAVED_STATE(wid : PGtkwidget) : longint;
      begin
         exit(wid^.saved_state);
      end;
function  GTK_WIDGET_FLAGS(wid : PGtkwidget) : longint;
      begin
         exit((wid as PGTKObject)^.flags);
      end;

function  GTK_WIDGET_TOPLEVEL(wid : PGtkwidget) : boolean;
      begin
         exit(((GTK_WIDGET_FLAGS(wid)) and (GTK_TOPLEVEL as longint)) <> 0);
      end;

function  GTK_WIDGET_NO_WINDOW(wid : PGtkwidget) : boolean;
      begin
         exit(((GTK_WIDGET_FLAGS(wid)) and (GTK_NO_WINDOW as longint)) <> 0);
      end;

function  GTK_WIDGET_REALIZED(wid : PGtkwidget) : boolean;
      begin
         exit(((GTK_WIDGET_FLAGS(wid)) and (GTK_REALIZED as longint)) <> 0);
      end;

function  GTK_WIDGET_MAPPED(wid : PGtkwidget) : boolean;
      begin
         exit(((GTK_WIDGET_FLAGS(wid)) and (GTK_MAPPED as longint)) <> 0);
      end;

function  GTK_WIDGET_VISIBLE(wid : PGtkwidget) : boolean;
      begin
         exit(((GTK_WIDGET_FLAGS(wid)) and (GTK_VISIBLE as longint)) <> 0);
      end;

function  GTK_WIDGET_DRAWABLE(wid : PGtkwidget) : boolean;
      begin
        exit((GTK_WIDGET_VISIBLE(wid) and GTK_WIDGET_MAPPED(wid)));
      end;

function  GTK_WIDGET_SENSITIVE(wid : PGtkwidget) : boolean;
      begin
         exit(((GTK_WIDGET_FLAGS(wid)) and (GTK_SENSITIVE as longint)) <> 0);
      end;

function  GTK_WIDGET_PARENT_SENSITIVE(wid : PGtkwidget) : boolean;
      begin
        exit(((GTK_WIDGET_FLAGS(wid)) and (GTK_PARENT_SENSITIVE as longint)) <> 0);
      end;

function  GTK_WIDGET_IS_SENSITIVE(wid : PGtkwidget) : boolean;
      begin
         exit((GTK_WIDGET_SENSITIVE(wid) and
                                   GTK_WIDGET_PARENT_SENSITIVE(wid)));
      end;

function  GTK_WIDGET_CAN_FOCUS(wid : PGtkwidget) : boolean;
      begin
       	exit(((GTK_WIDGET_FLAGS(wid)) and (GTK_CAN_FOCUS as longint)) <> 0);
      end;

function  GTK_WIDGET_HAS_FOCUS(wid : PGtkwidget) : boolean;
      begin
         exit(((GTK_WIDGET_FLAGS(wid)) and (GTK_HAS_FOCUS as longint)) <> 0);
      end;

function  GTK_WIDGET_CAN_DEFAULT(wid : PGtkwidget) : boolean;
      begin
         exit(((GTK_WIDGET_FLAGS(wid)) and (GTK_CAN_DEFAULT as longint)) <> 0);
      end;

function  GTK_WIDGET_HAS_DEFAULT(wid : PGtkwidget) : boolean;
      begin
         exit(((GTK_WIDGET_FLAGS(wid)) and (GTK_HAS_DEFAULT as longint)) <> 0);
      end;

function  GTK_WIDGET_HAS_GRAB(wid : PGtkwidget) : boolean;
      begin
         exit(((GTK_WIDGET_FLAGS(wid)) and (GTK_HAS_GRAB as longint)) <> 0);
      end;

function  GTK_WIDGET_RC_STYLE(wid : PGtkwidget) : boolean;
begin
	exit(((GTK_WIDGET_FLAGS(wid)) and (GTK_RC_STYLE as longint)) <> 0);
end;

function  GTK_WIDGET_COMPOSITE_CHILD(wid : PGtkWidget) : boolean;
begin
	exit(((GTK_WIDGET_FLAGS(wid)) and (GTK_COMPOSITE_CHILD as longint)) <> 0);
end;

function  GTK_WIDGET_APP_PAINTABLE(wid : PGtkWidget) : boolean;
begin
	exit(((GTK_WIDGET_FLAGS(wid)) and (GTK_APP_PAINTABLE as longint)) <> 0);
end;

function  GTK_WIDGET_RECEIVES_DEFAULT(wid : PGtkWidget) : boolean;
    begin
       exit(((GTK_WIDGET_FLAGS(wid)) and (GTK_RECEIVES_DEFAULT as longint)) <> 0);
    end;

procedure GTK_WIDGET_SET_FLAGS(wid : PGtkwidget;flag:longint);
begin
  (wid as PGtkObject)^.flags:=(wid as PGtkObject)^.flags or flag;
end;
procedure GTK_WIDGET_UNSET_FLAGS(wid : PGtkwidget;flag:longint);
begin
  (wid as PGtkObject)^.flags:=(wid as PGtkObject)^.flags and (not(flag));
end;

function  GTK_IS_WIDGET(obj:pointer):boolean;
begin
 exit((obj<>nil) and GTK_IS_WIDGET_CLASS((obj as PGtkTypeObject)^.klass));
end;
function  GTK_IS_WIDGET_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_WIDGET_TYPE));
end;
 
 
 
 
function  GTK_STYLE_ATTACHED(style : PGtkstyle) : boolean;
      begin
         exit((style^.attach_count) > 0);
      end;
 
 
 
 
function  GTK_IS_MISC(obj:pointer):boolean;
begin
  exit((obj<>nil) and GTK_IS_MISC_CLASS((obj as PGtkTypeObject)^.klass));
end;
function  GTK_IS_MISC_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_MISC_TYPE));
end;
 
 
 
 
function  max_width(var a : TGtkLabel) : guint;
    begin
       exit((a.flag0 and bm_TGtkLabel_max_width) shr bp_TGtkLabel_max_width);
    end;

procedure set_max_width(var a : TGtkLabel; __max_width : guint);
    begin
       a.flag0:=a.flag0 or ((__max_width shl bp_TGtkLabel_max_width) and bm_TGtkLabel_max_width);
    end;
function  jtype(var a : TGtkLabel) : guint;
    begin
      exit((a.flag0 and bm_TGtkLabel_jtype) shr bp_TGtkLabel_jtype);
    end;
procedure set_jtype(var a : TGtkLabel; __jtype : guint);
    begin
       a.flag0:=a.flag0 or ((__jtype shl bp_TGtkLabel_jtype) and bm_TGtkLabel_jtype);
    end;

function  GTK_IS_LABEL(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_LABEL_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_LABEL_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_LABEL_TYPE));
end;
 
 
 
 
function  GTK_PRIVATE_FLAGS(wid : PGtkWidget) : longint;
    begin
       exit(wid^.private_flags);
    end;

function  GTK_WIDGET_USER_STYLE(obj : PGtkWidget) : boolean;
    begin
       exit(((GTK_PRIVATE_FLAGS(obj)) and (PRIVATE_GTK_USER_STYLE as longint)) <> 0);
    end;

function  GTK_WIDGET_REDRAW_PENDING(obj : PGtkWidget) : boolean;
    begin
      exit(((GTK_PRIVATE_FLAGS(obj)) and (PRIVATE_GTK_REDRAW_PENDING as longint)) <> 0);
    end;

function  GTK_CONTAINER_RESIZE_PENDING(obj : PGtkWidget) : boolean;
    begin
     	exit(((GTK_PRIVATE_FLAGS(obj)) and (PRIVATE_GTK_RESIZE_PENDING as longint)) <> 0);
    end;
function  GTK_WIDGET_RESIZE_NEEDED(obj : PGtkWidget) : boolean;
    begin
      exit(((GTK_PRIVATE_FLAGS(obj)) and (PRIVATE_GTK_RESIZE_NEEDED as longint)) <> 0);
    end;
function  GTK_WIDGET_LEAVE_PENDING(obj : PGtkWidget) : boolean;
    begin
       exit(((GTK_PRIVATE_FLAGS(obj)) and (PRIVATE_GTK_LEAVE_PENDING as longint)) <> 0);
    end;
function  GTK_WIDGET_HAS_SHAPE_MASK(obj : PGtkWidget) : boolean;
    begin
       exit(((GTK_PRIVATE_FLAGS(obj)) and (PRIVATE_GTK_HAS_SHAPE_MASK as longint)) <> 0);
    end;

function  GTK_WIDGET_IN_REPARENT(obj : PGtkWidget) : boolean;
    begin
       exit(((GTK_PRIVATE_FLAGS(obj)) and (PRIVATE_GTK_IN_REPARENT as longint)) <> 0);
    end;

function  GTK_WIDGET_IS_OFFSCREEN(obj : PGtkWidget) : boolean;
    begin
       exit(((GTK_PRIVATE_FLAGS(obj)) and (PRIVATE_GTK_IS_OFFSCREEN as longint)) <> 0);
    end;
 
 
 
 
function  latin1_to_char(var a : TGtkAccelLabelClass) : guint;
    begin
       exit((a.flag0 and bm_TGtkAccelLabelClass_latin1_to_char) shr bp_TGtkAccelLabelClass_latin1_to_char);
    end;
procedure set_latin1_to_char(var a : TGtkAccelLabelClass; __latin1_to_char : guint);
    begin
       a.flag0:=a.flag0 or ((__latin1_to_char shl bp_TGtkAccelLabelClass_latin1_to_char) and bm_TGtkAccelLabelClass_latin1_to_char);
    end;
function  GTK_IS_ACCEL_LABEL(obj:pointer):boolean;
begin
  exit((obj<>nil) and GTK_IS_ACCEL_LABEL_CLASS((obj as PGtkTypeObject)^.klass));
end;
function  GTK_IS_ACCEL_LABEL_CLASS(klass:pointer):boolean;
begin
  exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_ACCEL_LABEL_TYPE));
end;
 
 
 
 
 
 
 
 
 
 
 
 
function  GTK_IS_DRAWING_AREA(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_DRAWING_AREA_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_DRAWING_AREA_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_DRAWING_AREA_TYPE));
end;
 
 
 
 
function  border_width(var a : TGtkContainer) : guint;
    begin
       exit((a.flag0 and bm_TGtkContainer_border_width) shr bp_TGtkContainer_border_width);
    end;

procedure set_border_width(var a : TGtkContainer; __border_width : guint);
    begin
       a.flag0:=a.flag0 or ((__border_width shl bp_TGtkContainer_border_width) and bm_TGtkContainer_border_width);
    end;

function  need_resize(var a : TGtkContainer) : guint;
    begin
       exit((a.flag0 and bm_TGtkContainer_need_resize) shr bp_TGtkContainer_need_resize);
    end;

procedure set_need_resize(var a : TGtkContainer; __need_resize : guint);
    begin
       a.flag0:=a.flag0 or ((__need_resize shl bp_TGtkContainer_need_resize) and bm_TGtkContainer_need_resize);
    end;

function  resize_mode(var a : TGtkContainer) : guint;
    begin
       exit((a.flag0 and bm_TGtkContainer_resize_mode) shr bp_TGtkContainer_resize_mode);
    end;

procedure set_resize_mode(var a : TGtkContainer; __resize_mode : guint);
    begin
       a.flag0:=a.flag0 or ((__resize_mode shl bp_TGtkContainer_resize_mode) and bm_TGtkContainer_resize_mode);
    end;

function  GTK_IS_CONTAINER(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_CONTAINER_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_CONTAINER_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_CONTAINER_TYPE));
end;
 
 
 
 
function  GTK_IS_BIN(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_BIN_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_BIN_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_BIN_TYPE));
end;
 
 
 
 
function  is_user_signal(var a : TGtkSignalQuery) : guint;
      begin
         exit((a.flag0 and bm_TGtkSignalQuery_is_user_signal) shr bp_TGtkSignalQuery_is_user_signal);
      end;

procedure set_is_user_signal(var a : TGtkSignalQuery; __is_user_signal : guint);
      begin
         a.flag0:=a.flag0 or ((__is_user_signal shl bp_TGtkSignalQuery_is_user_signal) and bm_TGtkSignalQuery_is_user_signal);
      end;
 
 
 
 
function  GTK_IS_ITEM(obj:pointer):boolean;
begin
  exit((obj<>nil) and GTK_IS_ITEM_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_ITEM_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_ITEM_TYPE));
end;
 
 
 
 
 
 
 
 
 
 
 
 
function  destroyed(var a : TGtkBindingEntry) : guint;
    begin
      exit((a.flag0 and bm_TGtkBindingEntry_destroyed) shr bp_TGtkBindingEntry_destroyed);
    end;

procedure set_destroyed(var a : TGtkBindingEntry; __destroyed : guint);
    begin
       a.flag0:=a.flag0 or ((__destroyed shl bp_TGtkBindingEntry_destroyed) and bm_TGtkBindingEntry_destroyed);
    end;

function  in_emission(var a : TGtkBindingEntry) : guint;
    begin
       exit((a.flag0 and bm_TGtkBindingEntry_in_emission) shr bp_TGtkBindingEntry_in_emission);
    end;

procedure set_in_emission(var a : TGtkBindingEntry; __in_emission : guint);
    begin
       a.flag0:=a.flag0 or ((__in_emission shl bp_TGtkBindingEntry_in_emission) and bm_TGtkBindingEntry_in_emission);
    end;
 
 
 
 
function  GTK_IS_INVISIBLE(obj:pointer):boolean;
begin
 exit((obj<>nil) and GTK_IS_INVISIBLE_CLASS((obj as PGtkTypeObject)^.klass));
end;
function  GTK_IS_INVISIBLE_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_INVISIBLE_TYPE));
end;
 
 
 
 
function  GTK_IS_ALIGNMENT(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_ALIGNMENT_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_ALIGNMENT_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_ALIGNMENT_TYPE));
end;
 
 
 
 
function  modal(var a : TGtkWindow) : guint;
  begin
    exit((a.flag0 and bm_modal) shr bp_modal);
  end;

procedure set_modal(var a : TGtkWindow; __modal : guint);
  begin
     a.flag0:=a.flag0 or ((__modal shl bp_modal) and bm_modal);
  end;

function  allow_shrink(var a : TGtkWindow) : guint;
  begin
     exit((a.flag0 and bm_allow_shrink) shr bp_allow_shrink);
  end;

procedure set_allow_shrink(var a : TGtkWindow; __allow_shrink : guint);
  begin
     a.flag0:=a.flag0 or ((__allow_shrink shl bp_allow_shrink) and bm_allow_shrink);
  end;

function  allow_grow(var a : TGtkWindow) : guint;
  begin
     exit((a.flag0 and bm_allow_grow) shr bp_allow_grow);
  end;

procedure set_allow_grow(var a : TGtkWindow; __allow_grow : guint);
  begin
    a.flag0 := a.flag0 or ((__allow_grow shl bp_allow_grow) and bm_allow_grow);
  end;

function  auto_shrink(var a : TGtkWindow) : guint;
  begin
     exit((a.flag0 and bm_auto_shrink) shr bp_auto_shrink);
  end;

procedure set_auto_shrink(var a : TGtkWindow; __auto_shrink : guint);
  begin
     a.flag0:=a.flag0 or ((__auto_shrink shl bp_auto_shrink) and bm_auto_shrink);
  end;
function  handling_resize(var a : TGtkWindow) : guint;cdecl;
  begin
     exit((a.flag0 and bm_handling_resize) shr bp_handling_resize);
  end;

procedure set_handling_resize(var a : TGtkWindow; __handling_resize : guint);cdecl;
  begin
     a.flag0:=a.flag0 or ((__handling_resize shl bp_handling_resize) and bm_handling_resize);
  end;
function  position(var a : TGtkWindow) : guint;
  begin
     exit((a.flag0 and bm_position) shr bp_position);
  end;

procedure set_position(var a : TGtkWindow; __position : guint);
  begin
     a.flag0:=a.flag0 or ((__position shl bp_position) and bm_position);
  end;
function  use_uposition(var a : TGtkWindow) : guint;
  begin
     exit((a.flag0 and bm_use_uposition) shr bp_use_uposition);
  end;
procedure set_use_uposition(var a : TGtkWindow; __use_uposition : guint);
  begin
     a.flag0:=a.flag0 or ((__use_uposition shl bp_use_uposition) and bm_use_uposition);
  end;

function  GTK_IS_WINDOW(obj:pointer):boolean;
begin
  exit((obj<>nil) and GTK_IS_WINDOW_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_WINDOW_CLASS(klass:pointer):boolean;
begin
 exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_WINDOW_TYPE));
end;
 
 
 
 
 
 
 
 
function  same_app(var a : TGtkSocket) : guint;
    begin
       exit((a.flag0 and bm_TGtkSocket_same_app) shr bp_TGtkSocket_same_app);
    end;
procedure set_same_app(var a : TGtkSocket; __same_app : guint);
    begin
       a.flag0:=a.flag0 or ((__same_app shl bp_TGtkSocket_same_app) and bm_TGtkSocket_same_app);
    end;
function  focus_in(var a : TGtkSocket) : guint;
    begin
       exit((a.flag0 and bm_TGtkSocket_focus_in) shr bp_TGtkSocket_focus_in);
    end;
procedure set_focus_in(var a : TGtkSocket; __focus_in : guint);
    begin
       a.flag0:=a.flag0 or ((__focus_in shl bp_TGtkSocket_focus_in) and bm_TGtkSocket_focus_in);
    end;
function  have_size(var a : TGtkSocket) : guint;
    begin
      exit((a.flag0 and bm_TGtkSocket_have_size) shr bp_TGtkSocket_have_size);
    end;
procedure set_have_size(var a : TGtkSocket; __have_size : guint);
    begin
       a.flag0:=a.flag0 or ((__have_size shl bp_TGtkSocket_have_size) and bm_TGtkSocket_have_size);
    end;
function  need_map(var a : TGtkSocket) : guint;
    begin
       exit((a.flag0 and bm_TGtkSocket_need_map) shr bp_TGtkSocket_need_map);
    end;
procedure set_need_map(var a : TGtkSocket; __need_map : guint);
    begin
       a.flag0:=a.flag0 or ((__need_map shl bp_TGtkSocket_need_map) and bm_TGtkSocket_need_map);
    end;
 
 
 
 
function  GTK_IS_PACKER(obj:pointer):boolean;
begin
 exit((obj<>nil) and GTK_IS_PACKER_CLASS((obj as PGtkTypeObject)^.klass));
end;
function  GTK_IS_PACKER_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_PACKER_TYPE));
end;
 
 
 
 
function  GTK_IS_LAYOUT(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_LAYOUT_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_LAYOUT_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_LAYOUT_TYPE));
end;
 
 
function  GTK_IS_FRAME(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_FRAME_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_FRAME_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_FRAME_TYPE));
end;
 
function  GTK_IS_ASPECT_FRAME(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_ASPECT_FRAME_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_ASPECT_FRAME_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_ASPECT_FRAME_TYPE));
end;
 
function  GTK_IS_VIEWPORT(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_VIEWPORT_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_VIEWPORT_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_VIEWPORT_TYPE));
end;
 
 
 
 
function  policy(var a : TGtkRange) : guint;
      begin
         exit((a.flag0 and bm_policy) shr bp_policy);
      end;

procedure set_policy(var a : TGtkRange; __policy : guint);
      begin
         a.flag0:=a.flag0 or ((__policy shl bp_policy) and bm_policy);
      end;
function  scroll_type(var a : TGtkRange) : guint;
      begin
         exit((a.flag0 and bm_scroll_type) shr bp_scroll_type);
      end;

procedure set_scroll_type(var a : TGtkRange; __scroll_type : guint);
      begin
         a.flag0:=a.flag0 or ((__scroll_type shl bp_scroll_type) and bm_scroll_type);
      end;

function  in_child(var a : TGtkRange) : guint;overload;
begin
	exit((a.flag0 and bm_in_child) shr bp_in_child);
end;

procedure set_in_child(var a : TGtkRange; __in_child : guint);overload;
begin
   a.flag0:=a.flag0 or ((__in_child shl bp_in_child) and bm_in_child);
end;

function  click_child(var a : TGtkRange) : guint;overload;
begin
	exit((a.flag0 and bm_click_child) shr bp_click_child);
end;

procedure set_click_child(var a : TGtkRange; __click_child : guint);overload;
      begin
         a.flag0:=a.flag0 or ((__click_child shl bp_click_child) and bm_click_child);
      end;

function  need_timer(var a : TGtkRange) : guint;overload;
      begin
        exit((a.flag0 and bm_need_timer) shr bp_need_timer);
      end;

procedure set_need_timer(var a : TGtkRange; __need_timer : guint);overload;
      begin
         a.flag0:=a.flag0 or ((__need_timer shl bp_need_timer) and bm_need_timer);
      end;

function  GTK_IS_RANGE(obj:pointer):boolean;
begin
  exit((obj<>nil) and GTK_IS_RANGE_CLASS((obj as PGtkTypeObject)^.klass));
end;
function  GTK_IS_RANGE_CLASS(klass:pointer):boolean;
begin
  exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_RANGE_TYPE));
end;
 
 
 
 
 
 
 
 
function  has_selection(var a : TGtkEditable) : guint;
    begin
       exit((a.flag0 and bm_TGtkEditable_has_selection) shr bp_TGtkEditable_has_selection);
    end;
procedure set_has_selection(var a : TGtkEditable; __has_selection : guint);
    begin
       a.flag0:=a.flag0 or ((__has_selection shl bp_TGtkEditable_has_selection) and bm_TGtkEditable_has_selection);
    end;
function  editable(var a : TGtkEditable) : guint;
    begin
       exit((a.flag0 and bm_TGtkEditable_editable) shr bp_TGtkEditable_editable);
    end;
procedure set_editable(var a : TGtkEditable; __editable : guint);
    begin
       a.flag0:=a.flag0 or ((__editable shl bp_TGtkEditable_editable) and bm_TGtkEditable_editable);
    end;
function  visible(var a : TGtkEditable) : guint;overload;
    begin
       exit((a.flag0 and bm_TGtkEditable_visible) shr bp_TGtkEditable_visible);
    end;

procedure set_visible(var a : TGtkEditable; __visible : guint);overload;
    begin
       a.flag0:=a.flag0 or ((__visible shl bp_TGtkEditable_visible) and bm_TGtkEditable_visible);
    end;
function  GTK_IS_EDITABLE(obj:pointer):boolean;
begin
  exit((obj<>nil) and GTK_IS_EDITABLE_CLASS((obj as PGtkTypeObject)^.klass));
end;
function  GTK_IS_EDITABLE_CLASS(klass:pointer):boolean;
begin
  exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_EDITABLE_TYPE));
end;
 
 
 
 
function  line_wrap(var a : TGtkText) : guint;
    begin
       exit((a.flag0 and bm_TGtkText_line_wrap) shr bp_TGtkText_line_wrap);
    end;
procedure set_line_wrap(var a : TGtkText; __line_wrap : guint);
    begin
       a.flag0:=a.flag0 or ((__line_wrap shl bp_TGtkText_line_wrap) and bm_TGtkText_line_wrap);
    end;
function  word_wrap(var a : TGtkText) : guint;
    begin
       exit((a.flag0 and bm_TGtkText_word_wrap) shr bp_TGtkText_word_wrap);
    end;
procedure set_word_wrap(var a : TGtkText; __word_wrap : guint);
    begin
       a.flag0:=a.flag0 or ((__word_wrap shl bp_TGtkText_word_wrap) and bm_TGtkText_word_wrap);
    end;
function  use_wchar(var a : TGtkText) : guint;overload;
begin
	exit((a.flag0 and bm_TGtkText_use_wchar) shr bp_TGtkText_use_wchar);
end;

procedure set_use_wchar(var a : TGtkText; __use_wchar : guint);overload;
begin
       a.flag0:=a.flag0 or ((__use_wchar shl bp_TGtkText_use_wchar) and bm_TGtkText_use_wchar);
end;

function  GTK_TEXT_INDEX(t:PGtkText; index:longint):char;
begin
  if use_wchar(t^ )<>0 then
   begin
     if index<t^.gap_position then
      exit((((t^.text.wc+index) as PGdkWChar)^) as char)
     else
      exit(((t^.text.wc+index+t^.gap_position) as PGdkWChar)^ as char);
   end
  else
   begin
     if index<t^.gap_position then
      exit((t^.text.ch+index)^)
     else
      exit((t^.text.ch+index+t^.gap_position)^);
   end;
end;

function  GTK_IS_TEXT(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_TEXT_CLASS((obj as PGtkTypeObject)^.klass));
end;


function  GTK_IS_TEXT_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_TEXT_TYPE));
end;
 
 
function  GTK_IS_ARROW(obj:pointer):boolean;
begin
 exit((obj<>nil) and GTK_IS_ARROW_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_ARROW_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_ARROW_TYPE));
end;
 
 
 
 
function  build_insensitive(var a : TGtkPixmap) : guint;
 begin
   exit((a.flag0 and bm_TGtkPixmap_build_insensitive) shr bp_TGtkPixmap_build_insensitive);
 end;

procedure set_build_insensitive(var a : TGtkPixmap; __build_insensitive : guint);
    begin
       a.flag0:=a.flag0 or ((__build_insensitive shl bp_TGtkPixmap_build_insensitive) and bm_TGtkPixmap_build_insensitive);
    end;
function  GTK_IS_PIXMAP(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_PIXMAP_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_PIXMAP_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_PIXMAP_TYPE));
end;
 
 
 
 
function  in_button(var a : TGtkButton) : guint;overload;
begin
	exit((a.flag0 and bm_in_button) shr bp_in_button);
end;

procedure set_in_button(var a : TGtkButton; __in_button : guint);overload;
      begin
         a.flag0:=a.flag0 or ((__in_button shl bp_in_button) and bm_in_button);
      end;

function  button_down(var a : TGtkButton) : guint;
begin
	exit((a.flag0 and bm_button_down) shr bp_button_down);
end;

procedure set_button_down(var a : TGtkButton; __button_down : guint);
      begin
         a.flag0:=a.flag0 or ((__button_down shl bp_button_down) and bm_button_down);
      end;

function  relief(var a : TGtkButton) : guint;
begin
	exit((a.flag0 and bm_relief) shr bp_relief);
end;

procedure set_relief(var a : TGtkButton; __button_down : guint);
      begin
         a.flag0:=a.flag0 or ((__button_down shl bp_relief) and bm_relief);
      end;

function  GTK_IS_BUTTON(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_BUTTON_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_BUTTON_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_BUTTON_TYPE));
end;
 
 
 
 
function  active(var a : TGtkToggleButton) : guint;overload;
    begin
       exit((a.flag0 and bm_TGtkToggleButton_active) shr bp_TGtkToggleButton_active);
    end;

procedure set_active(var a : TGtkToggleButton; __active : guint);overload;
    begin
       a.flag0:=a.flag0 or ((__active shl bp_TGtkToggleButton_active) and bm_TGtkToggleButton_active);
    end;

function  draw_indicator(var a : TGtkToggleButton) : guint;
    begin
      exit((a.flag0 and bm_TGtkToggleButton_draw_indicator) shr bp_TGtkToggleButton_draw_indicator);
    end;

procedure set_draw_indicator(var a : TGtkToggleButton; __draw_indicator : guint);
    begin
       a.flag0:=a.flag0 or ((__draw_indicator shl bp_TGtkToggleButton_draw_indicator) and bm_TGtkToggleButton_draw_indicator);
    end;

function  GTK_IS_TOGGLE_BUTTON(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_TOGGLE_BUTTON_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_TOGGLE_BUTTON_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_TOGGLE_BUTTON_TYPE));
end;
 
function  GTK_IS_CHECK_BUTTON(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_CHECK_BUTTON_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_CHECK_BUTTON_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_CHECK_BUTTON_TYPE));
end;
 
 
 
 
function  show_toggle_indicator(var a : TGtkMenuItem) : guint;
      begin
         exit((a.flag0 and bm_show_toggle_indicator) shr bp_show_toggle_indicator);
      end;
procedure set_show_toggle_indicator(var a : TGtkMenuItem; __show_toggle_indicator : guint);
      begin
         a.flag0:=a.flag0 or ((__show_toggle_indicator shl bp_show_toggle_indicator) and bm_show_toggle_indicator);
      end;
function  show_submenu_indicator(var a : TGtkMenuItem) : guint;
      begin
         exit((a.flag0 and bm_show_submenu_indicator) shr bp_show_submenu_indicator);
      end;

procedure set_show_submenu_indicator(var a : TGtkMenuItem; __show_submenu_indicator : guint);
      begin
         a.flag0:=a.flag0 or ((__show_submenu_indicator shl bp_show_submenu_indicator) and bm_show_submenu_indicator);
      end;
function  submenu_placement(var a : TGtkMenuItem) : guint;overload;
begin
         exit((a.flag0 and bm_submenu_placement) shr bp_submenu_placement);
end;

procedure set_submenu_placement(var a : TGtkMenuItem; __submenu_placement : guint);overload;
      begin
         a.flag0:=a.flag0 or ((__submenu_placement shl bp_submenu_placement) and bm_submenu_placement);
      end;

function  submenu_direction(var a : TGtkMenuItem) : guint;
 begin
         exit((a.flag0 and bm_submenu_direction) shr bp_submenu_direction);
  end;

procedure set_submenu_direction(var a : TGtkMenuItem; __submenu_direction : guint);
      begin
         a.flag0:=a.flag0 or ((__submenu_direction shl bp_submenu_direction) and bm_submenu_direction);
      end;

function  right_justify(var a : TGtkMenuItem) : guint;
      begin
         exit((a.flag0 and bm_right_justify) shr bp_right_justify);
      end;

procedure set_right_justify(var a : TGtkMenuItem; __right_justify : guint);
      begin
         a.flag0:=a.flag0 or ((__right_justify shl bp_right_justify) and bm_right_justify);
      end;

function  GTK_IS_MENU_ITEM(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_MENU_ITEM_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_MENU_ITEM_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_MENU_ITEM_TYPE));
end;
 
 
 
 
function  active(var a : TGtkCheckMenuItem) : guint;overload;
      begin
         exit((a.flag0 and bm_checkmenuitem_active) shr bp_checkmenuitem_active);
      end;
procedure set_active(var a : TGtkCheckMenuItem; __active : guint);overload;
      begin
         a.flag0:=a.flag0 or ((__active shl bp_checkmenuitem_active) and bm_checkmenuitem_active);
      end;

function  always_show_toggle(var a : TGtkCheckMenuItem) : guint;
begin
	exit((a.flag0 and bm_checkmenuitem_always_show_toggle) shr bp_checkmenuitem_always_show_toggle);
end;

procedure set_always_show_toggle(var a : TGtkCheckMenuItem; __always_show_toggle : guint);
      begin
         a.flag0:=a.flag0 or ((__always_show_toggle shl bp_checkmenuitem_always_show_toggle) and bm_checkmenuitem_always_show_toggle);
      end;

function  GTK_IS_CHECK_MENU_ITEM(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_CHECK_MENU_ITEM_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_CHECK_MENU_ITEM_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_CHECK_MENU_ITEM_TYPE));
end;
 
 
 
 
function  torn_off(var a : TGtkTearoffMenuItem) : guint;overload;
begin
	exit((a.flag0 and bm_TGtkTearoffMenuItem_torn_off) shr bp_TGtkTearoffMenuItem_torn_off);
end;

procedure set_torn_off(var a : TGtkTearoffMenuItem; __torn_off : guint);overload;
begin
       a.flag0:=a.flag0 or ((__torn_off shl bp_TGtkTearoffMenuItem_torn_off) and bm_TGtkTearoffMenuItem_torn_off);
end;

function  GTK_IS_TEAROFF_MENU_ITEM(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_TEAROFF_MENU_ITEM_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_TEAROFF_MENU_ITEM_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_TEAROFF_MENU_ITEM_TYPE));
end;
 
 
 
 
function  GTK_IS_CURVE(obj:pointer):boolean;
begin
  exit((obj<>nil) and GTK_IS_CURVE_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_CURVE_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_CURVE_TYPE));
end;
 
function  GTK_IS_DIALOG(obj:pointer):boolean;
begin
  exit((obj<>nil) and GTK_IS_DIALOG_CLASS((obj as PGtkTypeObject)^.klass));
end;
function  GTK_IS_DIALOG_CLASS(klass:pointer):boolean;
begin
  exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_DIALOG_TYPE));
end;
 
function  visible(var a : TGtkEntry) : guint;overload;
begin
	exit((a.flag0 and bm_TGtkEntry_visible) shr bp_TGtkEntry_visible);
end;

procedure set_visible(var a : TGtkEntry; __visible : guint);overload;
    begin
       a.flag0:=a.flag0 or ((__visible shl bp_TGtkEntry_visible) and bm_TGtkEntry_visible);
    end;

function  text_mb_dirty(var a : TGtkEntry) : guint;
    begin
      exit((a.flag1 and bm_TGtkEntry_text_mb_dirty) shr bp_TGtkEntry_text_mb_dirty);
    end;

procedure set_text_mb_dirty(var a : TGtkEntry; __text_mb_dirty : guint);
    begin
       a.flag1:=a.flag1 or ((__text_mb_dirty shl bp_TGtkEntry_text_mb_dirty) and bm_TGtkEntry_text_mb_dirty);
    end;

function  use_wchar(var a : TGtkEntry) : guint;overload;
    begin
       exit((a.flag1 and bm_TGtkEntry_use_wchar) shr bp_TGtkEntry_use_wchar);
    end;

procedure set_use_wchar(var a : TGtkEntry; __use_wchar : guint);overload;
    begin
       a.flag1:=a.flag1 or ((__use_wchar shl bp_TGtkEntry_use_wchar) and bm_TGtkEntry_use_wchar);
    end;

function  GTK_IS_ENTRY(obj:pointer):boolean;
begin
  exit((obj<>nil) and GTK_IS_ENTRY_CLASS((obj as PGtkTypeObject)^.klass));
end;


function  GTK_IS_ENTRY_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_ENTRY_TYPE));
end;
 
 
 
 
function  GTK_IS_EVENT_BOX(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_EVENT_BOX_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_EVENT_BOX_CLASS(klass:pointer):boolean;
begin
  exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_EVENT_BOX_TYPE));
end;
 
 
function  GTK_IS_FILE_SELECTION(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_FILE_SELECTION_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_FILE_SELECTION_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_FILE_SELECTION_TYPE));
end;
 
function  GTK_IS_FIXED(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_FIXED_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_FIXED_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_FIXED_TYPE));
end;
 
 
 
function  handle_position(var a : TGtkHandleBox) : guint;
    begin
     	exit((a.flag0 and bm_TGtkHandleBox_handle_position) shr bp_TGtkHandleBox_handle_position);
    end;

procedure set_handle_position(var a : TGtkHandleBox; __handle_position : guint);
    begin
       a.flag0:=a.flag0 or ((__handle_position shl bp_TGtkHandleBox_handle_position) and bm_TGtkHandleBox_handle_position);
    end;

function  float_window_mapped(var a : TGtkHandleBox) : guint;
    begin
      exit((a.flag0 and bm_TGtkHandleBox_float_window_mapped) shr bp_TGtkHandleBox_float_window_mapped);
    end;

procedure set_float_window_mapped(var a : TGtkHandleBox; __float_window_mapped : guint);
    begin
       a.flag0:=a.flag0 or ((__float_window_mapped shl bp_TGtkHandleBox_float_window_mapped) and bm_TGtkHandleBox_float_window_mapped);
    end;

function  child_detached(var a : TGtkHandleBox) : guint;
    begin
      exit((a.flag0 and bm_TGtkHandleBox_child_detached) shr bp_TGtkHandleBox_child_detached);
    end;

procedure set_child_detached(var a : TGtkHandleBox; __child_detached : guint);
    begin
       a.flag0:=a.flag0 or ((__child_detached shl bp_TGtkHandleBox_child_detached) and bm_TGtkHandleBox_child_detached);
    end;

function  in_drag(var a : TGtkHandleBox) : guint;overload;
    begin
       exit((a.flag0 and bm_TGtkHandleBox_in_drag) shr bp_TGtkHandleBox_in_drag);
    end;

procedure set_in_drag(var a : TGtkHandleBox; __in_drag : guint);overload;
    begin
       a.flag0:=a.flag0 or ((__in_drag shl bp_TGtkHandleBox_in_drag) and bm_TGtkHandleBox_in_drag);
    end;

function  shrink_on_detach(var a : TGtkHandleBox) : guint;
    begin
       exit((a.flag0 and bm_TGtkHandleBox_shrink_on_detach) shr bp_TGtkHandleBox_shrink_on_detach);
    end;

procedure set_shrink_on_detach(var a : TGtkHandleBox; __shrink_on_detach : guint);
    begin
       a.flag0:=a.flag0 or ((__shrink_on_detach shl bp_TGtkHandleBox_shrink_on_detach) and bm_TGtkHandleBox_shrink_on_detach);
    end;
function  snap_edge(var a : TGtkHandleBox) : gint;
    begin
       exit((a.flag0 and bm_TGtkHandleBox_snap_edge) shr bp_TGtkHandleBox_snap_edge);
    end;
procedure set_snap_edge(var a : TGtkHandleBox; __snap_edge : gint);
    begin
       a.flag0:=a.flag0 or ((__snap_edge shl bp_TGtkHandleBox_snap_edge) and bm_TGtkHandleBox_snap_edge);
    end;
function  GTK_IS_HANDLE_BOX(obj:pointer):boolean;
begin
  exit((obj<>nil) and GTK_IS_HANDLE_BOX_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_HANDLE_BOX_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_HANDLE_BOX_TYPE));
end;
  
function  GTK_IS_IMAGE(obj:pointer):boolean;
begin
  exit((obj<>nil) and GTK_IS_IMAGE_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_IMAGE_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_IMAGE_TYPE));
end;
 
function  GTK_IS_INPUT_DIALOG(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_INPUT_DIALOG_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_INPUT_DIALOG_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_INPUT_DIALOG_TYPE));
end;
 
function  selection_mode(var a : TGtkList) : guint;overload;
    begin
       exit((a.flag0 and bm_TGtkList_selection_mode) shr bp_TGtkList_selection_mode);
    end;
procedure set_selection_mode(var a : TGtkList; __selection_mode : guint);overload;
    begin
       a.flag0:=a.flag0 or ((__selection_mode shl bp_TGtkList_selection_mode) and bm_TGtkList_selection_mode);
    end;
function  drag_selection(var a : TGtkList) : guint;cdecl;
    begin
       exit((a.flag0 and bm_TGtkList_drag_selection) shr bp_TGtkList_drag_selection);
    end;
procedure set_drag_selection(var a : TGtkList; __drag_selection : guint);cdecl;
    begin
       a.flag0:=a.flag0 or ((__drag_selection shl bp_TGtkList_drag_selection) and bm_TGtkList_drag_selection);
    end;
function  add_mode(var a : TGtkList) : guint;
    begin
       exit((a.flag0 and bm_TGtkList_add_mode) shr bp_TGtkList_add_mode);
    end;

procedure set_add_mode(var a : TGtkList; __add_mode : guint);
    begin
       a.flag0:=a.flag0 or ((__add_mode shl bp_TGtkList_add_mode) and bm_TGtkList_add_mode);
    end;

function  GTK_IS_LIST(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_LIST_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_LIST_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_LIST_TYPE));
end;
 
 
 
 
function  GTK_IS_LIST_ITEM(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_LIST_ITEM_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_LIST_ITEM_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_LIST_ITEM_TYPE));
end;
 
 
 
 
function  active(var a : TGtkMenuShell) : guint;overload;
begin
       exit((a.flag0 and bm_TGtkMenuShell_active) shr bp_TGtkMenuShell_active);
end;

procedure set_active(var a : TGtkMenuShell; __active : guint);overload;
    begin
       a.flag0:=a.flag0 or ((__active shl bp_TGtkMenuShell_active) and bm_TGtkMenuShell_active);
    end;

function  have_grab(var a : TGtkMenuShell) : guint;
    begin
       exit((a.flag0 and bm_TGtkMenuShell_have_grab) shr bp_TGtkMenuShell_have_grab);
    end;

procedure set_have_grab(var a : TGtkMenuShell; __have_grab : guint);
    begin
       a.flag0:=a.flag0 or ((__have_grab shl bp_TGtkMenuShell_have_grab) and bm_TGtkMenuShell_have_grab);
    end;

function  have_xgrab(var a : TGtkMenuShell) : guint;
    begin
       exit((a.flag0 and bm_TGtkMenuShell_have_xgrab) shr bp_TGtkMenuShell_have_xgrab);
    end;

procedure set_have_xgrab(var a : TGtkMenuShell; __have_xgrab : guint);
    begin
       a.flag0:=a.flag0 or ((__have_xgrab shl bp_TGtkMenuShell_have_xgrab) and bm_TGtkMenuShell_have_xgrab);
    end;

function  button(var a : TGtkMenuShell) : guint;overload;
    begin
       exit((a.flag0 and bm_TGtkMenuShell_button) shr bp_TGtkMenuShell_button);
    end;

procedure set_button(var a : TGtkMenuShell; __button : guint);overload;
    begin
       a.flag0:=a.flag0 or ((__button shl bp_TGtkMenuShell_button) and bm_TGtkMenuShell_button);
    end;

function  ignore_leave(var a : TGtkMenuShell) : guint;
    begin
       exit((a.flag0 and bm_TGtkMenuShell_ignore_leave) shr bp_TGtkMenuShell_ignore_leave);
    end;

procedure set_ignore_leave(var a : TGtkMenuShell; __ignore_leave : guint);
    begin
       a.flag0:=a.flag0 or ((__ignore_leave shl bp_TGtkMenuShell_ignore_leave) and bm_TGtkMenuShell_ignore_leave);
    end;

function  menu_flag(var a : TGtkMenuShell) : guint;
    begin
       exit((a.flag0 and bm_TGtkMenuShell_menu_flag) shr bp_TGtkMenuShell_menu_flag);
    end;

procedure set_menu_flag(var a : TGtkMenuShell; __menu_flag : guint);
    begin
       a.flag0:=a.flag0 or ((__menu_flag shl bp_TGtkMenuShell_menu_flag) and bm_TGtkMenuShell_menu_flag);
    end;
function  ignore_enter(var a : TGtkMenuShell) : guint;
    begin
       exit((a.flag0 and bm_TGtkMenuShell_ignore_enter) shr bp_TGtkMenuShell_ignore_enter);
    end;
procedure set_ignore_enter(var a : TGtkMenuShell; __ignore_enter : guint);
    begin
       a.flag0:=a.flag0 or ((__ignore_enter shl bp_TGtkMenuShell_ignore_enter) and bm_TGtkMenuShell_ignore_enter);
    end;
function  submenu_placement(var a : TGtkMenuShellClass) : guint;overload;
begin
	exit((a.flag0 and bm_TGtkMenuShellClass_submenu_placement) shr bp_TGtkMenuShellClass_submenu_placement);
end;

procedure set_submenu_placement(var a : TGtkMenuShellClass; __submenu_placement : guint);overload;
begin
       a.flag0:=a.flag0 or ((__submenu_placement shl bp_TGtkMenuShellClass_submenu_placement) and bm_TGtkMenuShellClass_submenu_placement);
end;

function  GTK_IS_MENU_SHELL(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_MENU_SHELL_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_MENU_SHELL_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_MENU_SHELL_TYPE));
end;
 
 
function  torn_off(var a : TGtkMenu) : guint;overload;
    begin
      exit((a.flag0 and bm_TGtkMenu_torn_off) shr bp_TGtkMenu_torn_off);
    end;

procedure set_torn_off(var a : TGtkMenu; __torn_off : guint);overload;
    begin
       a.flag0:=a.flag0 or ((__torn_off shl bp_TGtkMenu_torn_off) and bm_TGtkMenu_torn_off);
    end;

function  GTK_IS_MENU(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_MENU_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_MENU_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_MENU_TYPE));
end;
 
function  GTK_IS_MENU_BAR(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_MENU_BAR_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_MENU_BAR_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_MENU_BAR_TYPE));
end;
 
 
function  GTK_IS_OPTION_MENU(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_OPTION_MENU_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_OPTION_MENU_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_OPTION_MENU_TYPE));
end;
 
 
 
 
function  thetype(var a : TGtkPreview) : guint;
    begin
       exit((a.flag0 and bm_TGtkPreview_type) shr bp_TGtkPreview_type);
    end;

procedure set_thetype(var a : TGtkPreview; __type : guint);
    begin
       a.flag0:=a.flag0 or ((__type shl bp_TGtkPreview_type) and bm_TGtkPreview_type);
    end;

function  expand(var a : TGtkPreview) : guint;overload;
    begin
      exit((a.flag0 and bm_TGtkPreview_expand) shr bp_TGtkPreview_expand);
    end;

procedure set_expand(var a : TGtkPreview; __expand : guint);overload;
    begin
       a.flag0:=a.flag0 or ((__expand shl bp_TGtkPreview_expand) and bm_TGtkPreview_expand);
    end;

function  GTK_IS_PREVIEW(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_PREVIEW_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_PREVIEW_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_PREVIEW_TYPE));
end;
 
 
 
 
function  modified(var a : TGtkItemFactoryItem) : guint;
    begin
       exit((a.flag0 and bm_TGtkItemFactoryItem_modified) shr bp_TGtkItemFactoryItem_modified);
    end;

procedure set_modified(var a : TGtkItemFactoryItem; __modified : guint);
    begin
       a.flag0:=a.flag0 or ((__modified shl bp_TGtkItemFactoryItem_modified) and bm_TGtkItemFactoryItem_modified);
    end;
function  in_propagation(var a : TGtkItemFactoryItem) : guint;
    begin
     	exit((a.flag0 and bm_TGtkItemFactoryItem_in_propagation) shr bp_TGtkItemFactoryItem_in_propagation);
    end;
procedure set_in_propagation(var a : TGtkItemFactoryItem; __in_propagation : guint);
    begin
       a.flag0:=a.flag0 or ((__in_propagation shl bp_TGtkItemFactoryItem_in_propagation) and bm_TGtkItemFactoryItem_in_propagation);
    end;

function  GTK_IS_ITEM_FACTORY(obj:pointer):boolean;
begin
 	exit((obj<>nil) and GTK_IS_ITEM_FACTORY_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_ITEM_FACTORY_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_ITEM_FACTORY_TYPE));
end;
 
 
 
 
function  show_text(var a : TGtkProgress) : guint;
    begin
       exit((a.flag0 and bm_TGtkProgress_show_text) shr bp_TGtkProgress_show_text);
    end;

procedure set_show_text(var a : TGtkProgress; __show_text : guint);
    begin
       a.flag0:=a.flag0 or ((__show_text shl bp_TGtkProgress_show_text) and bm_TGtkProgress_show_text);
    end;

function  activity_mode(var a : TGtkProgress) : guint;
    begin
       exit((a.flag0 and bm_TGtkProgress_activity_mode) shr bp_TGtkProgress_activity_mode);
    end;

procedure set_activity_mode(var a : TGtkProgress; __activity_mode : guint);
    begin
       a.flag0:=a.flag0 or ((__activity_mode shl bp_TGtkProgress_activity_mode) and bm_TGtkProgress_activity_mode);
    end;

function  GTK_IS_PROGRESS(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_PROGRESS_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_PROGRESS_CLASS(klass:pointer):boolean;
begin
 	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_PROGRESS_TYPE));
end;
 
 
 
 
function  activity_dir(var a : TGtkProgressBar) : guint;
    begin
       exit((a.flag0 and bm_TGtkProgressBar_activity_dir) shr bp_TGtkProgressBar_activity_dir);
    end;

procedure set_activity_dir(var a : TGtkProgressBar; __activity_dir : guint);
    begin
       a.flag0:=a.flag0 or ((__activity_dir shl bp_TGtkProgressBar_activity_dir) and bm_TGtkProgressBar_activity_dir);
    end;

function  GTK_IS_PROGRESS_BAR(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_PROGRESS_BAR_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_PROGRESS_BAR_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_PROGRESS_BAR_TYPE));
end;
 
function  GTK_IS_RADIO_BUTTON(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_RADIO_BUTTON_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_RADIO_BUTTON_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_RADIO_BUTTON_TYPE));
end;
 
function  GTK_IS_RADIO_MENU_ITEM(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_RADIO_MENU_ITEM_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_RADIO_MENU_ITEM_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_RADIO_MENU_ITEM_TYPE));
end;
 
 
function  hscrollbar_policy(var a : TGtkScrolledWindow) : guint;
begin
 	exit((a.flag0 and bm_TGtkScrolledWindow_hscrollbar_policy) shr bp_TGtkScrolledWindow_hscrollbar_policy);
end;

procedure set_hscrollbar_policy(var a : TGtkScrolledWindow; __hscrollbar_policy : guint);
begin
   a.flag0:=a.flag0 or ((__hscrollbar_policy shl bp_TGtkScrolledWindow_hscrollbar_policy) and bm_TGtkScrolledWindow_hscrollbar_policy);
end;

function  vscrollbar_policy(var a : TGtkScrolledWindow) : guint;
begin
   exit((a.flag0 and bm_TGtkScrolledWindow_vscrollbar_policy) shr bp_TGtkScrolledWindow_vscrollbar_policy);
end;

procedure set_vscrollbar_policy(var a : TGtkScrolledWindow; __vscrollbar_policy : guint);
    begin
       a.flag0:=a.flag0 or ((__vscrollbar_policy shl bp_TGtkScrolledWindow_vscrollbar_policy) and bm_TGtkScrolledWindow_vscrollbar_policy);
    end;

function  hscrollbar_visible(var a : TGtkScrolledWindow) : guint;
    begin
       exit((a.flag0 and bm_TGtkScrolledWindow_hscrollbar_visible) shr bp_TGtkScrolledWindow_hscrollbar_visible);
    end;

procedure set_hscrollbar_visible(var a : TGtkScrolledWindow; __hscrollbar_visible : guint);
    begin
       a.flag0:=a.flag0 or ((__hscrollbar_visible shl bp_TGtkScrolledWindow_hscrollbar_visible) and bm_TGtkScrolledWindow_hscrollbar_visible);
    end;

function  vscrollbar_visible(var a : TGtkScrolledWindow) : guint;
    begin
       exit((a.flag0 and bm_TGtkScrolledWindow_vscrollbar_visible) shr bp_TGtkScrolledWindow_vscrollbar_visible);
    end;

procedure set_vscrollbar_visible(var a : TGtkScrolledWindow; __vscrollbar_visible : guint);
    begin
       a.flag0:=a.flag0 or ((__vscrollbar_visible shl bp_TGtkScrolledWindow_vscrollbar_visible) and bm_TGtkScrolledWindow_vscrollbar_visible);
    end;
function  window_placement(var a : TGtkScrolledWindow) : guint;
    begin
       exit((a.flag0 and bm_TGtkScrolledWindow_window_placement) shr bp_TGtkScrolledWindow_window_placement);
    end;

procedure set_window_placement(var a : TGtkScrolledWindow; __window_placement : guint);
    begin
       a.flag0:=a.flag0 or ((__window_placement shl bp_TGtkScrolledWindow_window_placement) and bm_TGtkScrolledWindow_window_placement);
    end;

function  GTK_IS_SCROLLED_WINDOW(obj:pointer):boolean;
begin
  exit((obj<>nil) and GTK_IS_SCROLLED_WINDOW_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_SCROLLED_WINDOW_CLASS(klass:pointer):boolean;
begin
  	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_SCROLLED_WINDOW_TYPE));
end;
 
 
 
 
 
 
 
 
function  in_child(var a : TGtkSpinButton) : guint;overload;
begin
	exit((a.flag0 and bm_TGtkSpinButton_in_child) shr bp_TGtkSpinButton_in_child);
end;

procedure set_in_child(var a : TGtkSpinButton; __in_child : guint); overload;
    begin
       a.flag0:=a.flag0 or ((__in_child shl bp_TGtkSpinButton_in_child) and bm_TGtkSpinButton_in_child);
    end;

function  click_child(var a : TGtkSpinButton) : guint;overload;
begin
	exit((a.flag0 and bm_TGtkSpinButton_click_child) shr bp_TGtkSpinButton_click_child);
 end;

procedure set_click_child(var a : TGtkSpinButton; __click_child : guint);overload;
    begin
       a.flag0:=a.flag0 or ((__click_child shl bp_TGtkSpinButton_click_child) and bm_TGtkSpinButton_click_child);
    end;

function  button(var a : TGtkSpinButton) : guint;overload;
    begin
       exit((a.flag0 and bm_TGtkSpinButton_button) shr bp_TGtkSpinButton_button);
    end;

procedure set_button(var a : TGtkSpinButton; __button : guint);overload;
    begin
       a.flag0:=a.flag0 or ((__button shl bp_TGtkSpinButton_button) and bm_TGtkSpinButton_button);
    end;

function  need_timer(var a : TGtkSpinButton) : guint;overload;
    begin
       exit((a.flag0 and bm_TGtkSpinButton_need_timer) shr bp_TGtkSpinButton_need_timer);
    end;

procedure set_need_timer(var a : TGtkSpinButton; __need_timer : guint);overload;
    begin
       a.flag0:=a.flag0 or ((__need_timer shl bp_TGtkSpinButton_need_timer) and bm_TGtkSpinButton_need_timer);
    end;

function  timer_calls(var a : TGtkSpinButton) : guint;
    begin
       exit((a.flag0 and bm_TGtkSpinButton_timer_calls) shr bp_TGtkSpinButton_timer_calls);
    end;

procedure set_timer_calls(var a : TGtkSpinButton; __timer_calls : guint);
    begin
       a.flag0:=a.flag0 or ((__timer_calls shl bp_TGtkSpinButton_timer_calls) and bm_TGtkSpinButton_timer_calls);
    end;

function  digits(var a : TGtkSpinButton) : guint;
    begin
       exit((a.flag0 and bm_TGtkSpinButton_digits) shr bp_TGtkSpinButton_digits);
    end;

procedure set_digits(var a : TGtkSpinButton; __digits : guint);
    begin
       a.flag0:=a.flag0 or ((__digits shl bp_TGtkSpinButton_digits) and bm_TGtkSpinButton_digits);
    end;

function  numeric(var a : TGtkSpinButton) : guint;
    begin
      exit((a.flag0 and bm_TGtkSpinButton_numeric) shr bp_TGtkSpinButton_numeric);
    end;
procedure set_numeric(var a : TGtkSpinButton; __numeric : guint);
    begin
       a.flag0:=a.flag0 or ((__numeric shl bp_TGtkSpinButton_numeric) and bm_TGtkSpinButton_numeric);
    end;

function  wrap(var a : TGtkSpinButton) : guint;
    begin
       exit((a.flag0 and bm_TGtkSpinButton_wrap) shr bp_TGtkSpinButton_wrap);
    end;
procedure set_wrap(var a : TGtkSpinButton; __wrap : guint);
    begin
       a.flag0:=a.flag0 or ((__wrap shl bp_TGtkSpinButton_wrap) and bm_TGtkSpinButton_wrap);
    end;

function  snap_to_ticks(var a : TGtkSpinButton) : guint;
    begin
       exit((a.flag0 and bm_TGtkSpinButton_snap_to_ticks) shr bp_TGtkSpinButton_snap_to_ticks);
    end;

procedure set_snap_to_ticks(var a : TGtkSpinButton; __snap_to_ticks : guint);
    begin
       a.flag0:=a.flag0 or ((__snap_to_ticks shl bp_TGtkSpinButton_snap_to_ticks) and bm_TGtkSpinButton_snap_to_ticks);
    end;

function  GTK_IS_SPIN_BUTTON(obj:pointer):boolean;
begin
  exit((obj<>nil) and GTK_IS_SPIN_BUTTON_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_SPIN_BUTTON_CLASS(klass:pointer):boolean;
begin
  	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_SPIN_BUTTON_TYPE));
end;
 
 
 
 
function  homogeneous(var a : TGtkTable) : guint;overload;
    begin
       exit((a.flag0 and bm_TGtkTable_homogeneous) shr bp_TGtkTable_homogeneous);
    end;
procedure set_homogeneous(var a : TGtkTable; __homogeneous : guint); overload;
    begin
       a.flag0:=a.flag0 or ((__homogeneous shl bp_TGtkTable_homogeneous) and bm_TGtkTable_homogeneous);
    end;

function  xexpand(var a : TGtkTableChild) : guint;
    begin
       exit((a.flag0 and bm_TGtkTableChild_xexpand) shr bp_TGtkTableChild_xexpand);
    end;
procedure set_xexpand(var a : TGtkTableChild; __xexpand : guint);
    begin
       a.flag0:=a.flag0 or ((__xexpand shl bp_TGtkTableChild_xexpand) and bm_TGtkTableChild_xexpand);
    end;

function  yexpand(var a : TGtkTableChild) : guint;
    begin
      exit((a.flag0 and bm_TGtkTableChild_yexpand) shr bp_TGtkTableChild_yexpand);
    end;

procedure set_yexpand(var a : TGtkTableChild; __yexpand : guint);
    begin
       a.flag0:=a.flag0 or ((__yexpand shl bp_TGtkTableChild_yexpand) and bm_TGtkTableChild_yexpand);
    end;

function  xshrink(var a : TGtkTableChild) : guint;
begin
	exit((a.flag0 and bm_TGtkTableChild_xshrink) shr bp_TGtkTableChild_xshrink);
end;

procedure set_xshrink(var a : TGtkTableChild; __xshrink : guint);
    begin
       a.flag0:=a.flag0 or ((__xshrink shl bp_TGtkTableChild_xshrink) and bm_TGtkTableChild_xshrink);
    end;

function  yshrink(var a : TGtkTableChild) : guint;
    begin
       exit((a.flag0 and bm_TGtkTableChild_yshrink) shr bp_TGtkTableChild_yshrink);
    end;
procedure set_yshrink(var a : TGtkTableChild; __yshrink : guint);
    begin
       a.flag0:=a.flag0 or ((__yshrink shl bp_TGtkTableChild_yshrink) and bm_TGtkTableChild_yshrink);
    end;
function  xfill(var a : TGtkTableChild) : guint;
    begin
       exit((a.flag0 and bm_TGtkTableChild_xfill) shr bp_TGtkTableChild_xfill);
    end;
procedure set_xfill(var a : TGtkTableChild; __xfill : guint);
    begin
       a.flag0:=a.flag0 or ((__xfill shl bp_TGtkTableChild_xfill) and bm_TGtkTableChild_xfill);
    end;
function  yfill(var a : TGtkTableChild) : guint;
    begin
      exit((a.flag0 and bm_TGtkTableChild_yfill) shr bp_TGtkTableChild_yfill);
    end;
procedure set_yfill(var a : TGtkTableChild; __yfill : guint);
    begin
       a.flag0:=a.flag0 or ((__yfill shl bp_TGtkTableChild_yfill) and bm_TGtkTableChild_yfill);
    end;
function  need_expand(var a : TGtkTableRowCol) : guint;
    begin
       exit((a.flag0 and bm_TGtkTableRowCol_need_expand) shr bp_TGtkTableRowCol_need_expand);
    end;

procedure set_need_expand(var a : TGtkTableRowCol; __need_expand : guint);
    begin
       a.flag0:=a.flag0 or ((__need_expand shl bp_TGtkTableRowCol_need_expand) and bm_TGtkTableRowCol_need_expand);
    end;

function  need_shrink(var a : TGtkTableRowCol) : guint;
begin
	exit((a.flag0 and bm_TGtkTableRowCol_need_shrink) shr bp_TGtkTableRowCol_need_shrink);
end;

procedure set_need_shrink(var a : TGtkTableRowCol; __need_shrink : guint);
    begin
       a.flag0:=a.flag0 or ((__need_shrink shl bp_TGtkTableRowCol_need_shrink) and bm_TGtkTableRowCol_need_shrink);
    end;

function  expand(var a : TGtkTableRowCol) : guint;overload;
    begin
      exit((a.flag0 and bm_TGtkTableRowCol_expand) shr bp_TGtkTableRowCol_expand);
    end;

procedure set_expand(var a : TGtkTableRowCol; __expand : guint);overload;
    begin
       a.flag0:=a.flag0 or ((__expand shl bp_TGtkTableRowCol_expand) and bm_TGtkTableRowCol_expand);
    end;

function  shrink(var a : TGtkTableRowCol) : guint;
    begin
       exit((a.flag0 and bm_TGtkTableRowCol_shrink) shr bp_TGtkTableRowCol_shrink);
    end;

procedure set_shrink(var a : TGtkTableRowCol; __shrink : guint);
    begin
       a.flag0:=a.flag0 or ((__shrink shl bp_TGtkTableRowCol_shrink) and bm_TGtkTableRowCol_shrink);
    end;
function  empty(var a : TGtkTableRowCol) : guint;
    begin
      exit((a.flag0 and bm_TGtkTableRowCol_empty) shr bp_TGtkTableRowCol_empty);
    end;

procedure set_empty(var a : TGtkTableRowCol; __empty : guint);
    begin
       a.flag0:=a.flag0 or ((__empty shl bp_TGtkTableRowCol_empty) and bm_TGtkTableRowCol_empty);
    end;

function  GTK_IS_TABLE(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_TABLE_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_TABLE_CLASS(klass:pointer):boolean;
begin
  exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_TABLE_TYPE));
end;
 
 
 
 
function  emit_always(var a : TGtkTipsQuery) : guint;
    begin
       exit((a.flag0 and bm_TGtkTipsQuery_emit_always) shr bp_TGtkTipsQuery_emit_always);
    end;
procedure set_emit_always(var a : TGtkTipsQuery; __emit_always : guint);
    begin
       a.flag0:=a.flag0 or ((__emit_always shl bp_TGtkTipsQuery_emit_always) and bm_TGtkTipsQuery_emit_always);
    end;
function  in_query(var a : TGtkTipsQuery) : guint;
    begin
       exit((a.flag0 and bm_TGtkTipsQuery_in_query) shr bp_TGtkTipsQuery_in_query);
    end;
procedure set_in_query(var a : TGtkTipsQuery; __in_query : guint);
    begin
       a.flag0:=a.flag0 or ((__in_query shl bp_TGtkTipsQuery_in_query) and bm_TGtkTipsQuery_in_query);
    end;

function  GTK_IS_TIPS_QUERY(obj:pointer):boolean;
begin
  	exit((obj<>nil) and GTK_IS_TIPS_QUERY_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_TIPS_QUERY_CLASS(klass:pointer):boolean;
begin
  exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_TIPS_QUERY_TYPE));
end;
 
 
 
 
function  delay(var a : TGtkTooltips) : guint;
    begin
       exit((a.flag0 and bm_TGtkTooltips_delay) shr bp_TGtkTooltips_delay);
    end;

procedure set_delay(var a : TGtkTooltips; __delay : guint);
    begin
       a.flag0:=a.flag0 or ((__delay shl bp_TGtkTooltips_delay) and bm_TGtkTooltips_delay);
    end;

function  enabled(var a : TGtkTooltips) : guint;
    begin
       exit((a.flag0 and bm_TGtkTooltips_enabled) shr bp_TGtkTooltips_enabled);
    end;

procedure set_enabled(var a : TGtkTooltips; __enabled : guint);
    begin
       a.flag0:=a.flag0 or ((__enabled shl bp_TGtkTooltips_enabled) and bm_TGtkTooltips_enabled);
    end;

function  GTK_IS_TOOLTIPS(obj:pointer):boolean;
begin
 	exit((obj<>nil) and GTK_IS_TOOLTIPS_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_TOOLTIPS_CLASS(klass:pointer):boolean;
begin
 exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_TOOLTIPS_TYPE));
end;

function  GTK_TREE_ITEM_SUBTREE(obj : PGtktreeitem) : PGtkwidget;
    begin
       exit(obj^.subtree);
    end;

function  expanded(var a : TGtkTreeItem) : guint;
    begin
       exit((a.flag0 and bm_TGtkTreeItem_expanded) shr bp_TGtkTreeItem_expanded);
    end;

procedure set_expanded(var a : TGtkTreeItem; __expanded : guint);
    begin
       a.flag0:=a.flag0 or ((__expanded shl bp_TGtkTreeItem_expanded) and bm_TGtkTreeItem_expanded);
    end;

function  GTK_IS_TREE_ITEM(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_TREE_ITEM_CLASS((obj as PGtkTypeObject)^.klass));
end;
function  GTK_IS_TREE_ITEM_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_TREE_ITEM_TYPE));
end;
 
 
 
 
function  selection_mode(var a : TGtkTree) : guint;overload;
    begin
       exit((a.flag0 and bm_TGtkTree_selection_mode) shr bp_TGtkTree_selection_mode);
    end;

procedure set_selection_mode(var a : TGtkTree; __selection_mode : guint);overload;
    begin
       a.flag0:=a.flag0 or ((__selection_mode shl bp_TGtkTree_selection_mode) and bm_TGtkTree_selection_mode);
    end;
function  view_mode(var a : TGtkTree) : guint;
    begin
      exit((a.flag0 and bm_TGtkTree_view_mode) shr bp_TGtkTree_view_mode);
    end;
procedure set_view_mode(var a : TGtkTree; __view_mode : guint);
    begin
       a.flag0:=a.flag0 or ((__view_mode shl bp_TGtkTree_view_mode) and bm_TGtkTree_view_mode);
    end;
function  view_line(var a : TGtkTree) : guint;
    begin
       exit((a.flag0 and bm_TGtkTree_view_line) shr bp_TGtkTree_view_line);
    end;

procedure set_view_line(var a : TGtkTree; __view_line : guint);
    begin
       a.flag0:=a.flag0 or ((__view_line shl bp_TGtkTree_view_line) and bm_TGtkTree_view_line);
    end;

function  GTK_IS_ROOT_TREE(obj : PGtkTree) : gboolean;
begin
  exit((obj^.root_tree=obj) as gboolean);
end;

function  GTK_TREE_ROOT_TREE(obj : PGtkTree) : PGtkTree;
begin
  if (obj as PGtkTree)^.root_tree<>nil then
    exit((obj as PGtkTree)^.root_tree)
  else
    exit(obj as PGtkTree);
end;
function  GTK_TREE_SELECTION(obj : PGtkTree) : PGList;
begin
  exit((GTK_TREE_ROOT_TREE(obj))^.selection);
end;
 
 
 
 
function  homogeneous(var a : TGtkBox) : guint;overload;
 begin
    exit((a.flag0 and bm_box_homogeneous) shr bp_box_homogeneous);
 end;

procedure set_homogeneous(var a : TGtkBox; __homogeneous : guint);overload;
      begin
         a.flag0:=a.flag0 or ((__homogeneous shl bp_box_homogeneous) and bm_box_homogeneous);
      end;
function  expand(var a : TGtkBoxChild) : guint;overload;
      begin
         exit((a.flag0 and bm_box_expand) shr bp_box_expand);
      end;
procedure set_expand(var a : TGtkBoxChild; __expand : guint);overload;
      begin
         a.flag0:=a.flag0 or ((__expand shl bp_box_expand) and bm_box_expand);
      end;
function  fill(var a : TGtkBoxChild) : guint;overload;
      begin
         exit((a.flag0 and bm_box_fill) shr bp_box_fill);
      end;

procedure set_fill(var a : TGtkBoxChild; __fill : guint);overload;
      begin
         a.flag0:=a.flag0 or ((__fill shl bp_box_fill) and bm_box_fill);
      end;
function  pack(var a : TGtkBoxChild) : guint;overload;
      begin
         exit((a.flag0 and bm_box_pack) shr bp_box_pack);
      end;

procedure set_pack(var a : TGtkBoxChild; __pack : guint);overload;
      begin
         a.flag0:=a.flag0 or ((__pack shl bp_box_pack) and bm_box_pack);
      end;

function  GTK_IS_BOX(obj:pointer):boolean;
begin
 exit((obj<>nil) and GTK_IS_BOX_CLASS((obj as PGtkTypeObject)^.klass));
end;
function  GTK_IS_BOX_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_BOX_TYPE));
end;
 
 
 
 
function  GTK_IS_HBOX(obj:pointer):boolean;
begin
  exit((obj<>nil) and GTK_IS_HBOX_CLASS((obj as PGtkTypeObject)^.klass));
end;
function  GTK_IS_HBOX_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_HBOX_TYPE));
end;
 
 
 
 
function  GTK_IS_VBOX(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_VBOX_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_VBOX_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_VBOX_TYPE));
end;
 
 
 
 
function  GTK_IS_BUTTON_BOX(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_BUTTON_BOX_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_BUTTON_BOX_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_BUTTON_BOX_TYPE));
end;
 
 
 
 
function  GTK_IS_HBUTTON_BOX(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_HBUTTON_BOX_CLASS((obj as PGtkTypeObject)^.klass));
end;
function  GTK_IS_HBUTTON_BOX_CLASS(klass:pointer):boolean;
begin
  exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_HBUTTON_BOX_TYPE));
end;
 
 
 
 
function  GTK_IS_VBUTTON_BOX(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_VBUTTON_BOX_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_VBUTTON_BOX_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_VBUTTON_BOX_TYPE));
end;
 
 
 
 
function  position_set(var a : TGtkPaned) : guint;
    begin
       exit((a.flag0 and bm_TGtkPaned_position_set) shr bp_TGtkPaned_position_set);
    end;

procedure set_position_set(var a : TGtkPaned; __position_set : guint);
    begin
       a.flag0:=a.flag0 or ((__position_set shl bp_TGtkPaned_position_set) and bm_TGtkPaned_position_set);
    end;
function  in_drag(var a : TGtkPaned) : guint;overload;
    begin
      exit((a.flag0 and bm_TGtkPaned_in_drag) shr bp_TGtkPaned_in_drag);
    end;

procedure set_in_drag(var a : TGtkPaned; __in_drag : guint);overload;
    begin
       a.flag0:=a.flag0 or ((__in_drag shl bp_TGtkPaned_in_drag) and bm_TGtkPaned_in_drag);
    end;
function  child1_shrink(var a : TGtkPaned) : guint;
    begin
       exit((a.flag0 and bm_TGtkPaned_child1_shrink) shr bp_TGtkPaned_child1_shrink);
    end;

procedure set_child1_shrink(var a : TGtkPaned; __child1_shrink : guint);
    begin
       a.flag0:=a.flag0 or ((__child1_shrink shl bp_TGtkPaned_child1_shrink) and bm_TGtkPaned_child1_shrink);
    end;
function  child1_resize(var a : TGtkPaned) : guint;
    begin
      exit((a.flag0 and bm_TGtkPaned_child1_resize) shr bp_TGtkPaned_child1_resize);
    end;

procedure set_child1_resize(var a : TGtkPaned; __child1_resize : guint);
    begin
       a.flag0:=a.flag0 or ((__child1_resize shl bp_TGtkPaned_child1_resize) and bm_TGtkPaned_child1_resize);
    end;

function  child2_shrink(var a : TGtkPaned) : guint;
    begin
       exit((a.flag0 and bm_TGtkPaned_child2_shrink) shr bp_TGtkPaned_child2_shrink);
    end;

procedure set_child2_shrink(var a : TGtkPaned; __child2_shrink : guint);
    begin
       a.flag0:=a.flag0 or ((__child2_shrink shl bp_TGtkPaned_child2_shrink) and bm_TGtkPaned_child2_shrink);
    end;

function  child2_resize(var a : TGtkPaned) : guint;
begin
   exit((a.flag0 and bm_TGtkPaned_child2_resize) shr bp_TGtkPaned_child2_resize);
end;

procedure set_child2_resize(var a : TGtkPaned; __child2_resize : guint);
    begin
       a.flag0:=a.flag0 or ((__child2_resize shl bp_TGtkPaned_child2_resize) and bm_TGtkPaned_child2_resize);
    end;

function  GTK_IS_PANED(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_PANED_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_PANED_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_PANED_TYPE));
end;
 
 
 
 
function  GTK_IS_HPANED(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_HPANED_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_HPANED_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_HPANED_TYPE));
end;
 
 
 
 
function  GTK_IS_VPANED(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_VPANED_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_VPANED_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_VPANED_TYPE));
end;
 
function  GTK_IS_RULER(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_RULER_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_RULER_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_RULER_TYPE));
end;
 
 
function  GTK_IS_HRULER(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_HRULER_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_HRULER_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_HRULER_TYPE));
end;
 
 
 
 
function  GTK_IS_VRULER(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_VRULER_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_VRULER_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_VRULER_TYPE));
end;
 
 
 
 
function  draw_value(var a : TGtkScale) : guint;
    begin
       exit((a.flag0 and bm_TGtkScale_draw_value) shr bp_TGtkScale_draw_value);
    end;

procedure set_draw_value(var a : TGtkScale; __draw_value : guint);
    begin
       a.flag0:=a.flag0 or ((__draw_value shl bp_TGtkScale_draw_value) and bm_TGtkScale_draw_value);
    end;

function  value_pos(var a : TGtkScale) : guint;
    begin
       exit((a.flag0 and bm_TGtkScale_value_pos) shr bp_TGtkScale_value_pos);
    end;
procedure set_value_pos(var a : TGtkScale; __value_pos : guint);
    begin
       a.flag0:=a.flag0 or ((__value_pos shl bp_TGtkScale_value_pos) and bm_TGtkScale_value_pos);
    end;

function  GTK_IS_SCALE(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_SCALE_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_SCALE_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_SCALE_TYPE));
end;
 
  
function  GTK_IS_HSCALE(obj:pointer):boolean;
begin
 	exit((obj<>nil) and GTK_IS_HSCALE_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_HSCALE_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_HSCALE_TYPE));
end;
 
function  GTK_IS_VSCALE(obj:pointer):boolean;
begin
  exit((obj<>nil) and GTK_IS_VSCALE_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_VSCALE_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_VSCALE_TYPE));
end;
 
function  GTK_IS_SCROLLBAR(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_SCROLLBAR_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_SCROLLBAR_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_SCROLLBAR_TYPE));
end;
 
function  GTK_IS_HSCROLLBAR(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_HSCROLLBAR_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_HSCROLLBAR_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_HSCROLLBAR_TYPE));
end;
 
 
function  GTK_IS_VSCROLLBAR(obj:pointer):boolean;
begin
  exit((obj<>nil) and GTK_IS_VSCROLLBAR_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_VSCROLLBAR_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_VSCROLLBAR_TYPE));
end;
 
 
 
 
function  GTK_IS_SEPARATOR(obj:pointer):boolean;
begin
  exit((obj<>nil) and GTK_IS_SEPARATOR_CLASS((obj as PGtkTypeObject)^.klass));
end;
function  GTK_IS_SEPARATOR_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_SEPARATOR_TYPE));
end;
 
 
 
 
function  GTK_IS_HSEPARATOR(obj:pointer):boolean;
begin
  exit((obj<>nil) and GTK_IS_HSEPARATOR_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_HSEPARATOR_CLASS(klass:pointer):boolean;
begin
 exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_HSEPARATOR_TYPE));
end;
 
 
 
 
function  GTK_IS_VSEPARATOR(obj:pointer):boolean;
begin
 	exit((obj<>nil) and GTK_IS_VSEPARATOR_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_VSEPARATOR_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_VSEPARATOR_TYPE));
end;
 
 
 
 
function  value_in_list(var a : TGtkCombo) : guint;
    begin
      exit((a.flag0 and bm_value_in_list) shr bp_value_in_list);
    end;

procedure set_value_in_list(var a : TGtkCombo; __value_in_list : guint);
    begin
       a.flag0:=a.flag0 or ((__value_in_list shl bp_value_in_list) and bm_value_in_list);
    end;

function  ok_if_empty(var a : TGtkCombo) : guint;
    begin
       exit((a.flag0 and bm_ok_if_empty) shr bp_ok_if_empty);
    end;
procedure set_ok_if_empty(var a : TGtkCombo; __ok_if_empty : guint);
    begin
       a.flag0:=a.flag0 or ((__ok_if_empty shl bp_ok_if_empty) and bm_ok_if_empty);
    end;

function  case_sensitive(var a : TGtkCombo) : guint;
    begin
      exit((a.flag0 and bm_case_sensitive) shr bp_case_sensitive);
    end;

procedure set_case_sensitive(var a : TGtkCombo; __case_sensitive : guint);
    begin
       a.flag0:=a.flag0 or ((__case_sensitive shl bp_case_sensitive) and bm_case_sensitive);
    end;

function  use_arrows(var a : TGtkCombo) : guint;
    begin
      exit((a.flag0 and bm_use_arrows) shr bp_use_arrows);
    end;


procedure set_use_arrows(var a : TGtkCombo; __use_arrows : guint);
    begin
       a.flag0:=a.flag0 or ((__use_arrows shl bp_use_arrows) and bm_use_arrows);
    end;

function  use_arrows_always(var a : TGtkCombo) : guint;
    begin
       exit((a.flag0 and bm_use_arrows_always) shr bp_use_arrows_always);
    end;

procedure set_use_arrows_always(var a : TGtkCombo; __use_arrows_always : guint);
    begin
       a.flag0:=a.flag0 or ((__use_arrows_always shl bp_use_arrows_always) and bm_use_arrows_always);
    end;
function  GTK_IS_COMBO(obj:pointer):boolean;
begin
 	exit((obj<>nil) and GTK_IS_COMBO_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_COMBO_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_COMBO_TYPE));
end;
 
 
function  GTK_IS_STATUSBAR(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_STATUSBAR_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_STATUSBAR_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_STATUSBAR_TYPE));
end;
 
function  GTK_IS_COLOR_SELECTION(obj:pointer):boolean;
begin
 exit((obj<>nil) and GTK_IS_COLOR_SELECTION_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_COLOR_SELECTION_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_COLOR_SELECTION_TYPE));
end;
 
 
 
 
function  GTK_IS_GAMMA_CURVE(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_GAMMA_CURVE_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_GAMMA_CURVE_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_GAMMA_CURVE_TYPE));
end;
 
function  visible(var a : TGtkCListColumn) : guint;overload;
begin
	exit((a.flag0 and bm_TGtkCListColumn_visible) shr bp_TGtkCListColumn_visible);
end;

procedure set_visible(var a : TGtkCListColumn; __visible : guint);overload;
      begin
         a.flag0:=a.flag0 or ((__visible shl bp_TGtkCListColumn_visible) and bm_TGtkCListColumn_visible);
      end;

function  width_set(var a : TGtkCListColumn) : guint;
      begin
         exit((a.flag0 and bm_TGtkCListColumn_width_set) shr bp_TGtkCListColumn_width_set);
      end;

procedure set_width_set(var a : TGtkCListColumn; __width_set : guint);
      begin
         a.flag0:=a.flag0 or ((__width_set shl bp_TGtkCListColumn_width_set) and bm_TGtkCListColumn_width_set);
      end;

function  resizeable(var a : TGtkCListColumn) : guint;
      begin
         exit((a.flag0 and bm_TGtkCListColumn_resizeable) shr bp_TGtkCListColumn_resizeable);
      end;

procedure set_resizeable(var a : TGtkCListColumn; __resizeable : guint);
      begin
         a.flag0:=a.flag0 or ((__resizeable shl bp_TGtkCListColumn_resizeable) and bm_TGtkCListColumn_resizeable);
      end;

function  auto_resize(var a : TGtkCListColumn) : guint;
      begin
         exit((a.flag0 and bm_TGtkCListColumn_auto_resize) shr bp_TGtkCListColumn_auto_resize);
      end;

procedure set_auto_resize(var a : TGtkCListColumn; __auto_resize : guint);
      begin
         a.flag0:=a.flag0 or ((__auto_resize shl bp_TGtkCListColumn_auto_resize) and bm_TGtkCListColumn_auto_resize);
      end;

function  button_passive(var a : TGtkCListColumn) : guint;
      begin
         exit((a.flag0 and bm_TGtkCListColumn_button_passive) shr bp_TGtkCListColumn_button_passive);
      end;

procedure set_button_passive(var a : TGtkCListColumn; __button_passive : guint);
      begin
         a.flag0:=a.flag0 or ((__button_passive shl bp_TGtkCListColumn_button_passive) and bm_TGtkCListColumn_button_passive);
      end;

function  fg_set(var a : TGtkCListRow) : guint;cdecl;
      begin
         exit((a.flag0 and bm_TGtkCListRow_fg_set) shr bp_TGtkCListRow_fg_set);
      end;

procedure set_fg_set(var a : TGtkCListRow; __fg_set : guint);cdecl;
      begin
         a.flag0:=a.flag0 or ((__fg_set shl bp_TGtkCListRow_fg_set) and bm_TGtkCListRow_fg_set);
      end;

function  bg_set(var a : TGtkCListRow) : guint;cdecl;
      begin
        	exit((a.flag0 and bm_TGtkCListRow_bg_set) shr bp_TGtkCListRow_bg_set);
      end;

procedure set_bg_set(var a : TGtkCListRow; __bg_set : guint);cdecl;
      begin
         a.flag0:=a.flag0 or ((__bg_set shl bp_TGtkCListRow_bg_set) and bm_TGtkCListRow_bg_set);
      end;
function  selectable(var a : TGtkCListRow) : guint;
      begin
         exit((a.flag0 and bm_TGtkCListRow_selectable) shr bp_TGtkCListRow_selectable);
      end;
procedure set_selectable(var a : TGtkCListRow; __selectable : guint);
      begin
         a.flag0:=a.flag0 or ((__selectable shl bp_TGtkCListRow_selectable) and bm_TGtkCListRow_selectable);
      end;

function  GTK_IS_CLIST(obj:pointer):boolean;
begin
  exit((obj<>nil) and GTK_IS_CLIST_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_CLIST_CLASS(klass:pointer):boolean;
begin
  exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_CLIST_TYPE));
end;
 
 
 
 
function  show_tabs(var a : TGtkNotebook) : guint;
    begin
       exit((a.flag0 and bm_TGtkNotebook_show_tabs) shr bp_TGtkNotebook_show_tabs);
    end;
procedure set_show_tabs(var a : TGtkNotebook; __show_tabs : guint);
    begin
       a.flag0:=a.flag0 or ((__show_tabs shl bp_TGtkNotebook_show_tabs) and bm_TGtkNotebook_show_tabs);
    end;
function  homogeneous(var a : TGtkNotebook) : guint;overload;
    begin
      	exit((a.flag0 and bm_TGtkNotebook_homogeneous) shr bp_TGtkNotebook_homogeneous);
    end;

procedure set_homogeneous(var a : TGtkNotebook; __homogeneous : guint);overload;
    begin
       a.flag0:=a.flag0 or ((__homogeneous shl bp_TGtkNotebook_homogeneous) and bm_TGtkNotebook_homogeneous);
    end;
function  show_border(var a : TGtkNotebook) : guint;
    begin
       exit((a.flag0 and bm_TGtkNotebook_show_border) shr bp_TGtkNotebook_show_border);
    end;
procedure set_show_border(var a : TGtkNotebook; __show_border : guint);
    begin
       a.flag0:=a.flag0 or ((__show_border shl bp_TGtkNotebook_show_border) and bm_TGtkNotebook_show_border);
    end;
function  tab_pos(var a : TGtkNotebook) : guint;
    begin
       exit((a.flag0 and bm_TGtkNotebook_tab_pos) shr bp_TGtkNotebook_tab_pos);
    end;

procedure set_tab_pos(var a : TGtkNotebook; __tab_pos : guint);
    begin
       a.flag0:=a.flag0 or ((__tab_pos shl bp_TGtkNotebook_tab_pos) and bm_TGtkNotebook_tab_pos);
    end;
function  scrollable(var a : TGtkNotebook) : guint;
    begin
       exit((a.flag0 and bm_TGtkNotebook_scrollable) shr bp_TGtkNotebook_scrollable);
    end;

procedure set_scrollable(var a : TGtkNotebook; __scrollable : guint);
    begin
       a.flag0:=a.flag0 or ((__scrollable shl bp_TGtkNotebook_scrollable) and bm_TGtkNotebook_scrollable);
    end;

function  in_child(var a : TGtkNotebook) : guint;overload;
    begin
       exit((a.flag0 and bm_TGtkNotebook_in_child) shr bp_TGtkNotebook_in_child);
    end;

procedure set_in_child(var a : TGtkNotebook; __in_child : guint);overload;
    begin
       a.flag0:=a.flag0 or ((__in_child shl bp_TGtkNotebook_in_child) and bm_TGtkNotebook_in_child);
    end;

function  click_child(var a : TGtkNotebook) : guint;overload;
begin
   exit((a.flag0 and bm_TGtkNotebook_click_child) shr bp_TGtkNotebook_click_child);
end;

procedure set_click_child(var a : TGtkNotebook; __click_child : guint);overload;
    begin
       a.flag0:=a.flag0 or ((__click_child shl bp_TGtkNotebook_click_child) and bm_TGtkNotebook_click_child);
    end;

function  button(var a : TGtkNotebook) : guint;overload;
 begin
    exit((a.flag0 and bm_TGtkNotebook_button) shr bp_TGtkNotebook_button);
 end;

procedure set_button(var a : TGtkNotebook; __button : guint);overload;
    begin
       a.flag0:=a.flag0 or ((__button shl bp_TGtkNotebook_button) and bm_TGtkNotebook_button);
    end;

function  need_timer(var a : TGtkNotebook) : guint;overload;
    begin
       exit((a.flag0 and bm_TGtkNotebook_need_timer) shr bp_TGtkNotebook_need_timer);
    end;

procedure set_need_timer(var a : TGtkNotebook; __need_timer : guint);overload;
    begin
       a.flag0:=a.flag0 or ((__need_timer shl bp_TGtkNotebook_need_timer) and bm_TGtkNotebook_need_timer);
    end;

function  child_has_focus(var a : TGtkNotebook) : guint;
    begin
       exit((a.flag0 and bm_TGtkNotebook_child_has_focus) shr bp_TGtkNotebook_child_has_focus);
    end;
procedure set_child_has_focus(var a : TGtkNotebook; __child_has_focus : guint);
    begin
       a.flag0:=a.flag0 or ((__child_has_focus shl bp_TGtkNotebook_child_has_focus) and bm_TGtkNotebook_child_has_focus);
    end;
function  have_visible_child(var a : TGtkNotebook) : guint;
    begin
       exit((a.flag0 and bm_TGtkNotebook_have_visible_child) shr bp_TGtkNotebook_have_visible_child);
    end;

procedure set_have_visible_child(var a : TGtkNotebook; __have_visible_child : guint);
    begin
       a.flag0:=a.flag0 or ((__have_visible_child shl bp_TGtkNotebook_have_visible_child) and bm_TGtkNotebook_have_visible_child);
    end;
function  default_menu(var a : TGtkNotebookPage) : guint;
    begin
       exit((a.flag0 and bm_TGtkNotebookPage_default_menu) shr bp_TGtkNotebookPage_default_menu);
    end;
procedure set_default_menu(var a : TGtkNotebookPage; __default_menu : guint);
    begin
       a.flag0:=a.flag0 or ((__default_menu shl bp_TGtkNotebookPage_default_menu) and bm_TGtkNotebookPage_default_menu);
    end;
function  default_tab(var a : TGtkNotebookPage) : guint;
    begin
       exit((a.flag0 and bm_TGtkNotebookPage_default_tab) shr bp_TGtkNotebookPage_default_tab);
    end;
procedure set_default_tab(var a : TGtkNotebookPage; __default_tab : guint);
    begin
       a.flag0:=a.flag0 or ((__default_tab shl bp_TGtkNotebookPage_default_tab) and bm_TGtkNotebookPage_default_tab);
    end;
function  expand(var a : TGtkNotebookPage) : guint;overload;
    begin
       exit((a.flag0 and bm_TGtkNotebookPage_expand) shr bp_TGtkNotebookPage_expand);
    end;

procedure set_expand(var a : TGtkNotebookPage; __expand : guint);overload;
    begin
       a.flag0:=a.flag0 or ((__expand shl bp_TGtkNotebookPage_expand) and bm_TGtkNotebookPage_expand);
    end;
function  fill(var a : TGtkNotebookPage) : guint;overload;
    begin
       exit((a.flag0 and bm_TGtkNotebookPage_fill) shr bp_TGtkNotebookPage_fill);
    end;

procedure set_fill(var a : TGtkNotebookPage; __fill : guint);overload;
    begin
       a.flag0:=a.flag0 or ((__fill shl bp_TGtkNotebookPage_fill) and bm_TGtkNotebookPage_fill);
    end;
function  pack(var a : TGtkNotebookPage) : guint;overload;
    begin
       exit((a.flag0 and bm_TGtkNotebookPage_pack) shr bp_TGtkNotebookPage_pack);
    end;

procedure set_pack(var a : TGtkNotebookPage; __pack : guint);overload;
    begin
       a.flag0:=a.flag0 or ((__pack shl bp_TGtkNotebookPage_pack) and bm_TGtkNotebookPage_pack);
    end;


function  GTK_NOTEBOOK_PAGE(_glist_ : PGList) : PGtkNotebookPage;
    begin
     	exit((_glist_^.data) as PGtkNoteBookPage);
    end;

function  GTK_IS_NOTEBOOK(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_NOTEBOOK_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_NOTEBOOK_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_NOTEBOOK_TYPE));
end;
 
 
 
 
function  GTK_CTREE_ROW(_node_ : PGList) : PGtkCTreeRow;
    begin
       exit(((_node_ as PGList)^.data) as PGtkCTreeRow);
    end;

function  GTK_CTREE_NODE(_node_ : PGList) : PGtkCTreeNode;
    begin
       exit((_node_) as PGtkCTreeNode);
    end;

function  GTK_CTREE_NODE_NEXT(_nnode_ : PGList) : PGtkCTreeNode;
begin
       exit(((_nnode_ as PGList)^.next) as PGtkCTreeNode);
end;

function  GTK_CTREE_NODE_PREV(_pnode_ : PGList) : PGtkCTreeNode;
begin
    exit(((_pnode_ as PGList)^.prev) as PGtkCTreeNode);
end;

function  GTK_CTREE_FUNC(_func_ : pointer) : TGtkCTreeFunc;
    begin
       exit((_func_) as TGtkCTreeFunc);
    end;

function  line_style(var a : TGtkCTree) : guint;
    begin
       exit((a.flag0 and bm_TGtkCTree_line_style) shr bp_TGtkCTree_line_style);
    end;

procedure set_line_style(var a : TGtkCTree; __line_style : guint);
    begin
       a.flag0:=a.flag0 or ((__line_style shl bp_TGtkCTree_line_style) and bm_TGtkCTree_line_style);
    end;

function  expander_style(var a : TGtkCTree) : guint;
    begin
       exit((a.flag0 and bm_TGtkCTree_expander_style) shr bp_TGtkCTree_expander_style);
    end;

procedure set_expander_style(var a : TGtkCTree; __expander_style : guint);
    begin
       a.flag0:=a.flag0 or ((__expander_style shl bp_TGtkCTree_expander_style) and bm_TGtkCTree_expander_style);
    end;
function  show_stub(var a : TGtkCTree) : guint;
    begin
       exit((a.flag0 and bm_TGtkCTree_show_stub) shr bp_TGtkCTree_show_stub);
    end;
procedure set_show_stub(var a : TGtkCTree; __show_stub : guint);
    begin
       a.flag0:=a.flag0 or ((__show_stub shl bp_TGtkCTree_show_stub) and bm_TGtkCTree_show_stub);
    end;

function  is_leaf(var a : TGtkCTreeRow) : guint;
    begin
       exit((a.flag0 and bm_TGtkCTreeRow_is_leaf) shr bp_TGtkCTreeRow_is_leaf);
    end;

procedure set_is_leaf(var a : TGtkCTreeRow; __is_leaf : guint);
    begin
       a.flag0:=a.flag0 or ((__is_leaf shl bp_TGtkCTreeRow_is_leaf) and bm_TGtkCTreeRow_is_leaf);
end;

function  expanded(var a : TGtkCTreeRow) : guint;overload;
begin
	exit((a.flag0 and bm_TGtkCTreeRow_expanded) shr bp_TGtkCTreeRow_expanded);
end;

procedure set_expanded(var a : TGtkCTreeRow; __expanded : guint);overload;
begin
       a.flag0:=a.flag0 or ((__expanded shl bp_TGtkCTreeRow_expanded) and bm_TGtkCTreeRow_expanded);
end;

function  GTK_IS_CTREE(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_CTREE_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_CTREE_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_CTREE_TYPE));
end;
 
 
 
 
function  GTK_IS_CALENDAR(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_CALENDAR_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_CALENDAR_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_CALENDAR_TYPE));
end;
 
function  GTK_IS_FONT_SELECTION(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_FONT_SELECTION_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_FONT_SELECTION_CLASS(klass:pointer):boolean;
begin
	exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_FONT_SELECTION_TYPE));
end;

function  GTK_IS_FONT_SELECTION_DIALOG(obj:pointer):boolean;
begin
	exit((obj<>nil) and GTK_IS_FONT_SELECTION_DIALOG_CLASS((obj as PGtkTypeObject)^.klass));
end;

function  GTK_IS_FONT_SELECTION_DIALOG_CLASS(klass:pointer):boolean;
begin
  exit((klass<>nil) and ((klass as PGtkTypeClass)^.thetype=GTK_FONT_SELECTION_DIALOG_TYPE));
end;
 
 
end.
 
