{   Mysql unit for the  Elaya, the compiler for the elaya language
    Copyright (C) 1999 - 2002  J.v.Iddekinge.
    email: iddekingej@lycos.com
    web  : www.elaya.org
    
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
}

{
  Derived from freepascal mysql units
  Import unit for the mysql header files.
  Translated form the original mysql.h by Michael Van Canneyt
  (michael@tfdec1.fys.kuleuven.ac.be)
  
}
unit;


uses mysql_com;

public



type 
   align 4;
   my_bool = byte;
   gptr   = pasc;
   Socket = Longint;
   

{$ifdef Unix}    
{Var
  mysql_port      : long; external name 'mysql_port';
  mysql_unix_port : pasc; external name 'mysql_unix_port';
}{$endif}

{
#define IS_PRI_KEY(n)	((n) & PRI_KEY_FLAG)
#define IS_NOT_NULL(n)	((n) & NOT_NULL_FLAG)
#define IS_BLOB(n)	((n) & BLOB_FLAG)
#define IS_NUM(t)	((t) <= FIELD_TYPE_INT24)
}

Type

my_ulonglong=record
       vlL1,vlL2:long;
end;
My_longlong=long;

st_mysql_field = record 
  col_name   : PAsc;			{ Name of column }
  table      : pasc;		        { Table of column if column was a field }
  def        : pasc;			{ Default value (set by mysql_list_fields) }
  ftype      : enum_field_types;	{ Type of field. See mysql_com.h for types }
  length     : long;		{ Width of column }
  max_length : long;	        { Max width of selected set }
  flags      : long;		        { Div flags }
  decimals   : long;	        { Number of decimals in field }
end;
TMYSQL_FIELD = st_mysql_field;
PMYSQL_FIELD = ptr TMYSQL_FIELD;

TMYSQL_ROW = PPAsc;		 { return data as array of strings }
TMYSQL_FIELD_OFFSET = long;  { offset to current field }


PST_MYSQL_Rows = ptr st_mysql_rows;
st_mysql_rows = Record
  next : pst_mysql_rows;		{ list of rows }
  Data : TMYSQL_ROW;
end;
TMYSQL_ROWS = st_mysql_rows;
PMYSQL_ROWS = ptr TMYSQL_ROWS;


TMYSQL_ROW_OFFSET = PMYSQL_ROWS;	{ offset to current row }

st_mysql_data  = record
  rows   : my_ulonglong; 
  fields : long;
  data   : PMYSQL_ROWS;
  alloc  : TMEM_ROOT;
end;

TMYSQL_DATA = st_mysql_data;
PMYSQL_DATA = ptr TMYSQL_DATA;

st_mysql_options = record 
  connect_timeout          : long;
  client_flag              : long;
  compress,named_pipe      : my_bool;
  port                     : long;
  host		           : pasc;
  init_command             : pasc;
  user		           : pasc;
  password	           : pasc;
  unix_socket,db           : pasc;
  my_cnf_file,my_cnf_group : pasc;
end;  

mysql_status = enum
	MYSQL_STATUS_READY;
        MYSQL_STATUS_GET_RESULT;
        MYSQL_STATUS_USE_RESULT;
END;


st_mysql = Record
  NET                 : TNET;			{ Communication parameters }
  host                : pasc;
  user                : pasc;
  passwd              : pasc;
  unix_socket         : pasc;
  server_version      : pasc;
  host_info           : pasc;
  info,db             : pasc;
  port		      : long;
  client_flag         : long;
  server_capabilities : long;
  protocol_version    : long;
  field_count         : long;
  thread_id           : long;		{ Id for connection in server }
  affected_rows       : my_ulonglong;
  insert_id           : my_ulonglong;		{ id if insert on table with NEXTNR }
  extra_info          : my_ulonglong;    	{ Used by mysqlshow }
  packet_length       : long; 
  status              : mysql_status;
  fields              : PMYSQL_FIELD;
  field_alloc         : TMEM_ROOT;
  free_me             : my_bool;		{ If free in mysql_close }
  reconnect           : my_bool;		{ set to 1 if automatic reconnect }
  options             : st_mysql_options;   
end;
TMYSQL = st_mysql;
PMYSQL = ptr TMYSQL;


st_mysql_res = record
  row_count : my_ulonglong; 
  field_count, current_field : long;
  fields :         PMYSQL_FIELD;
  data :           PMYSQL_DATA;
  data_cursor :    PMYSQL_ROWS;
  field_alloc :    TMEM_ROOT;
  row :            TMYSQL_ROW;			{ If unbuffered read }
  current_row :    TMYSQL_ROW;		{ buffer to current row }
  lengths :        plong;		{ column lengths of current row }
  handle :         PMYSQL;		{ for unbuffered reads }
  eof :            my_bool;			{ Used my mysql_fetch_row }
end;
TMYSQL_RES  = st_mysql_res;
PMYSQL_RES  = ptr TMYSQL_RES;


{ Translated Macros }

Function mysql_num_rows (res : PMYSQL_RES) : my_ulonglong;
Function mysql_num_fields(res : PMYSQL_RES) : long;
Function mysql_eof(res : PMYSQL_RES) : my_bool; 
Function mysql_fetch_field_direct(res : PMYSQL_RES; fieldnr : long) : TMYSQL_FIELD; 
Function mysql_fetch_fields(res : PMYSQL_RES) : PMYSQL_FIELD; 
Function mysql_row_tell(res : PMYSQL_RES) : PMYSQL_ROWS;
Function mysql_field_tell(res : PMYSQL_RES) : long;
Function mysql_affected_rows(mysql : PMYSQL): my_ulonglong;  
Function mysql_insert_id(mysql : PMYSQL): my_ulonglong;  
Function mysql_errno(mysql : PMYSQL) : long;
Function mysql_info(mysql : PMYSQL): PAsc;
Function mysql_reload(mysql : PMYSQL) : Longint; 
Function mysql_thread_id(mysql : PMYSQL) : long; 
Function mysql_error(mysql : PMYSQL) : pasc; 

{ Original functions }


external mysql
function mysql_connect (mysql : PMYSQL; host,user,passwd: pasc) : PMYSQL; name 'mysql_connect';
function mysql_real_connect (mysql : PMYSQL; const host,user,passwd : pasc;
				   port : long;
				   unix_socket : pasc;
				   clientflag : long) : PMYSQL; name 'mysql_real_connect';
				   
function mysql_close(sock : PMYSQL) : longint ; name 'mysql_close';
function mysql_select_db(MYSQL : PMYSQL; db : PAsc) : longint; name 'mysql_select_db';
function mysql_query(mysql : PMYSQL; q : pasc) : longint; name 'mysql_query';
function mysql_real_query(mysql : PMYSQL; q : PAsc; length : longint) : longint; name 'mysql_real_query';
function mysql_create_db(mysql : PMYSQL; db : pasc) : longint; name 'mysql_create_db';
Function mysql_drop_db(mysql : PMYSQL; DB : PAsc) : longint; name 'mysql_drop_db';
Function mysql_shutdown(mysql : PMYSQL) : longint; name 'mysql_shutdown';
Function mysql_dump_debug_info(mysql : PMYSQL) : longint; name 'mysql_dump_debug_info';
Function mysql_refresh(mysql : PMYSQL; refresh_options : long) : longint; name 'mysql_refresh';
Function mysql_kill(mysql : PMYSQL; pid : long) : longint; name 'mysql_kill';
Function mysql_stat(mysql : PMYSQL) : PAsc; name 'mysql_stat';
Function mysql_get_server_info(mysql : PMYSQL) : pasc; name 'mysql_get_server_info';
Function mysql_get_client_info : pasc;name 'mysql_get_client_info';
Function mysql_get_host_info(mysql : PMYSQL) : pasc; name 'mysql_get_host_info';
Function mysql_get_proto_info(mysql : PMYSQL) : long; name 'mysql_get_proto_info';
Function mysql_list_dbs(mysql : PMYSQL;wild : PAsc) : PMYSQL_RES; name 'mysql_list_dbs';
Function mysql_list_tables(mysql : PMYSQL;Wild : PAsc) : PMYSQL_RES; name 'mysql_list_tables';
Function mysql_list_fields(mysql : PMYSQL; table,wild : pasc) : PMYSQL_RES; name 'mysql_list_fields';
Function mysql_list_processes(mysql : PMYSQL) : PMYSQL_RES; name 'mysql_list_processes';
Function mysql_store_result(mysql : PMYSQL) : PMYSQL_RES; name 'mysql_store_result';
Function mysql_use_result(mysql : PMYSQL) : PMYSQL_RES; name 'mysql_use_result';
Procedure mysql_free_result(res : PMYSQL_RES); name 'mysql_free_result';
Procedure mysql_data_seek(mysql : PMYSQL_RES; offs : long); name 'mysql_data_seek';
Function mysql_row_seek(mysql : PMYSQL_RES; Offs: TMYSQL_ROW_OFFSET): TMYSQL_ROW_OFFSET; name 'mysql_row_seek';
Function mysql_field_seek(musql : PMYSQL_RES;offs : TMYSQL_FIELD_OFFSET): TMYSQL_FIELD_OFFSET; name 'mysql_field_seek';
function mysql_fetch_row(mysql : PMYSQL_RES) : TMYSQL_ROW; name 'mysql_fetch_row';
function mysql_fetch_lengths(mysql : PMYSQL_RES) : Plong; name 'mysql_fetch_lengths';
function mysql_fetch_field(handle : PMYSQL_RES) : PMYSQL_FIELD; name 'mysql_fetch_field';
Function mysql_escape_string(escto,escfrom : pasc; length : long) : long; name 'mysql_escape_string';
Procedure mysql_debug(debug : pasc); name 'mysql_debug';
end;

end public

Function  mysql_error(mysql : PMYSQL) : pasc;
begin
 exit(@mysql^.net.last_error);
end;

Function mysql_num_rows (res : PMYSQL_RES) : my_ulonglong;  

begin
  exit(res^.row_count);
end;

Function mysql_num_fields(res : PMYSQL_RES) : long;

begin
  exit(res^.field_count);
end;

Function mysql_eof(res : PMYSQL_RES) : my_bool;

begin
  exit(res^.eof);
end;

Function mysql_fetch_field_direct(res : PMYSQL_RES; fieldnr : long) : TMYSQL_FIELD;

begin
  exit((res^.fields+fieldnr)^);
end;

Function mysql_fetch_fields(res : PMYSQL_RES) : PMYSQL_FIELD;

begin
 exit(res^.fields);
end;

Function mysql_row_tell(res : PMYSQL_RES) : PMYSQL_ROWS;

begin
  exit(res^.data_cursor);
end;

Function mysql_field_tell(res : PMYSQL_RES) : long;

begin
  exit(res^.current_field);
end;

Function mysql_affected_rows(mysql : PMYSQL): my_ulonglong; 

begin
  exit(mysql^.affected_rows);
end;

Function mysql_insert_id(mysql : PMYSQL): my_ulonglong; 

begin
  exit(mysql^.insert_id);
end;

Function mysql_errno(mysql : PMYSQL) : long;

begin
  exit(mysql^.net.last_errno);
end;

Function mysql_info(mysql : PMYSQL): PAsc;

begin
  exit(mysql^.info);
end;

Function mysql_reload(mysql : PMYSQL) : Longint;

begin
   exit(mysql_refresh(mysql,REFRESH_GRANT));
end;

Function mysql_thread_id(mysql : PMysql) : long;

begin
  exit(mysql^.thread_id);
end;

end.


